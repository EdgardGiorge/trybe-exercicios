/* Criando middlewares globais com app.use
Outra forma de utilizar middlewares √© quando precisamos reaproveitar um middleware para todas as rotas da nossa aplica√ß√£o (ou uma boa parte destas). Vamos criar uma forma de autenticar se um determinado usu√°rio pode ter acesso a nossa API de receitas. Para isso, ser√° necess√°rio enviar as informa√ß√µes de nome de usu√°rio e senha pelo Header da requisi√ß√£o (‚ö†Ô∏è Este √© um exemplo did√°tico, na pr√°tica vamos utilizar abordagens mais seguras de fazer esse tipo de autentica√ß√£o, por exemplo utilizando JWT).
Vamos come√ßar definindo nosso middleware em um arquivo separado: auth-middleware.js. 

No c√≥digo abaixo temos um middleware que, ao receber uma requisi√ß√£o, verifica se ela possui no header as informa√ß√µes username e password. Se alguma das informa√ß√µes n√£o foi enviada, esse middleware retorna uma mensagem dizendo que essas informa√ß√µes n√£o podem ser vazias. Na sequ√™ncia, √© feita uma segunda verifica√ß√£o para checar se os valor de username e password s√£o iguais aos valores pr√©-determinados no objeto validUser (Na pr√°tica, em uma aplica√ß√£o de verdade, esse objeto validUser teria os valores vindo do banco de dados e n√£o hard-coded).
Caso nenhuma dessas op√ß√µes seja verdadeira, uma resposta √© enviada ao client dizendo que n√£o foi poss√≠vel realizar a autentica√ß√£o. Ao enviarmos uma resposta para o client, impedimos que qualquer outro middleware seja executado depois desse. Caso esteja tudo certo com o header, o middleware chama a fun√ß√£o next que, basicamente, diz ao Express "ok, terminei aqui, pode chamar o pr√≥ximo que disse que queria saber de requisi√ß√µes pra essa rota".

Observe que adicionamos uma rota, antes do app.use. Aqui √© importante destacar que o app.use s√≥ afeta as rotas que vem abaixo da sua defini√ß√£o. Ou seja, todas as rotas do nosso CRUD de receitas v√£o passar pelo middleware de autentica√ß√£o, enquanto a rota /open n√£o, por que foi definida antes da linha do app.use. Vamos testar: Tente fazer uma requisi√ß√£o para as rotas GET /open e GET /recipes.

Para utilizarmos esse middleware de autentica√ß√£o, vamos alterar o arquivo index.js:
Copiar
// const express = require('express');
// const bodyParser = require('body-parser');
const authMiddleware = require('./auth-middleware');

// const app = express();
// app.use(bodyParser.json());

// Esta rota n√£o passa pelo middleware de autentica√ß√£o!
app.get('/open', function (req, res) {
  res.send('open!')
});

app.use(authMiddleware);

Obs. O restante do c√≥digo pra baixo √© o mesmo:
// const recipes = [ 

              Passando valores entre middlewares com objeto req
Middlewares tamb√©m podem modificar o objeto req, e essas modifica√ß√µes ser√£o recebidas pelos pr√≥ximos middlewares, caso next seja chamado. Isso geralmente √© utilizado para propagar informa√ß√µes de um middleware para o outro.
Por exemplo, vamos considerar que agora temos v√°rios usu√°rios v√°lidos, e ao cadastrar e editar queremos passar o objeto do usu√°rio encontrado para os middlewares do CRUD terem acesso a esse usu√°rio v√°lido.
Observe que tivemos acesso ao objeto req.user que veio do nosso middleware authMiddleware. Dessa forma aproveitando o encadeamento entre middlewares conseguimos passar informa√ß√µes entre middleware sempre que for necess√°rio. O objeto req praticamente aceita qualquer atributo que voc√™ quiser definir, s√≥ √© preciso tomar cuidado para n√£o sobrescrever nenhum dos atributos padr√£o (req.body, req.headers, req.params, req.query, etc).
Pacotes que s√£o middlewares
Existem alguns pacotes que nos fornecem ferramentas necess√°rias para o desenvolvimento de nossas aplica√ß√µes. Um exemplo disso √© o m√≥dulo body-parser, que utilizamos ontem. Ele √© um middleware que l√™ o corpo da request, cria nela uma propriedade body e coloca o conte√∫do do corpo l√°. Para utiliz√°-lo e ter acesso √†s informa√ß√µes do corpo da request, s√≥ precisamos instal√°-lo com npm i body-parser e registr√°-lo na nossa aplica√ß√£o:
A fun√ß√£o json() utilizada na linha app.use(bodyParser.json()) diz ao body-parser que queremos um middleware que processe corpos de requisi√ß√µes escritos em JSON. Se executarmos nossa API e fizermos uma requisi√ß√£o do tipo POST conseguiremos ter acesso aos valores enviados no body da requisi√ß√£o. Por√©m, se tirarmos o uso deste middleware, voc√™ ir√° perceber que as requisi√ß√µes do tipo POST n√£o conseguem processar os dados enviados no body da requisi√ß√£o.
‚ÑπÔ∏è Fa√ßa o teste ‚ÑπÔ∏è : Copie o script abaixo, cole-o em um arquivo chamado server.js e execute-o com o comando node server.js . Em seguida, abra o Postman ou o Insomnia e realize a request POST localhost:3000/hello, passando o JSON { "name": "<seu nome aqui">" }.
Copiar
const express = require('express');
const app = express();
const bodyParser = require('body-parser');

app.use(bodyParser.json());

app.post('/hello', (req, res) => {
  // req.body agora est√° dispon√≠vel
  res.status(200).json({ greeting: `Hello, ${req.body.name}!` });
});

app.listen(3000, () => { console.log('Ouvindo na porta 3000'); });
Experimente comentar a linha 5 do script, executar novamente o arquivo e realizar uma nova request para o endpoint POST /hello e perceba que, sem o body-parser, req.body √© undefined.
Outro middleware bem comum de utilizarmos nas nossas aplica√ß√µes back-end √© o cors, que permite que nossa API receba requisi√ß√µes de outras aplica√ß√µes, como por exemplo, uma aplica√ß√£o front-end que consuma nossa API. O uso b√°sico desse m√≥dulo √© instal√°-lo usando npm i cors e adicionando as seguintes linha no nosso c√≥digo.
Copiar
const cors = require('cors');

app.use(cors());
Agora, qualquer requisi√ß√£o que voc√™ fizer de outra aplica√ß√£o vai responder, pois temos o middleware cors. Caso n√£o o tiv√©ssemos, o navegador bloquearia as requests do nosso front-end para nossa API. O cors tem um conjunto de configura√ß√µes que permitem criar regras espec√≠ficas, de quem e como as requisi√ß√µes podem ser feitas. Por enquanto, n√£o precisamos nos preocupar com isso j√° que estamos desenvolvendo aplica√ß√µes apenas em ambiente de desenvolvimento. Por√©m √© importante ter cuidado com essa configura√ß√£o ao subir uma aplica√ß√£o para ambiente de produ√ß√£o.
Para aprofundar-se em middlewares, assista a este v√≠deo.

            Visualizando o conte√∫do das requisi√ß√µes no Console
√â muito comum, durante a constru√ß√£o de uma API, que a gente tenha dificuldade para visualizar o que est√° sendo feito por cada endpoint em cada requisi√ß√£o.
Para resolver esse problema, √© poss√≠vel adicionar um middleware que imprimir√° no console as informa√ß√µes recebidas no par√¢metro req.
Copiar
app.use((req, _res, next) => {
  console.log('req.method:', req.method);
  console.log('req.path:', req.path);
  console.log('req.params:', req.params);
  console.log('req.query:', req.query);
  console.log('req.headers:', req.headers);
  console.log('req.body:', req.body);
  next();
});
Adicionando o c√≥digo acima, sempre que uma requisi√ß√£o http for executada, o middleware criado imprimir√° no console as informa√ß√µes contidas no par√¢metro req. Lembrando que isso s√≥ afetar√° as rotas que forem declaradas abaixo da defini√ß√£o do app.use.
‚ùóImportante ressaltar que essa pr√°tica n√£o deve ser utilizada em produ√ß√£o, pois serve apenas para dar visibilidade no momento do desenvolvimento.

                        Router middleware
Voc√™ deve estar pensando: "Nossa! Mas, com tudo isso, meu arquivo principal vai ficar gigante!" üò±
Calma! O Express tem uma solu√ß√£o bem interessante para organizar nossas rotas e middlewares: o Router.
O Router √© um middleware que "agrupa" v√°rias rotas em um mesmo lugar, como se fosse uma vers√£o mini do app do Express. Ele √© depois "plugado" no "app principal".
Vamos utilizar o Router para organizar o c√≥digo que desenvolvemos no conte√∫do de ontem.
Copiar
 recipesRouter.js 
const express = require('express');
const router = express.Router();

const recipes = [
  { id: 1, name: 'Lasanha', preco: 40.0, tempoDePreparo: 30 },
  { id: 2, name: 'Macarr√£o a Bolonhesa', preco: 35.0, tempoDePreparo: 25 },
  { id: 3, name: 'Macarr√£o com molho branco', preco: 35.0, tempoDePreparo: 25 },
];

function validateName(req, res, next) {
  const { name } = req.body;
  if (!name || name === '') return res.status(400).json({ message: 'Invalid data!'});

  next();
};

router.get('/', function (req, res) {
  res.status(200).json(recipes);
});

router.get('/pesquisar', function (req, res) {
  const { name, maxPrice } = req.query;
  const filteredRecipes = recipes.filter((r) => r.name.includes(name) && r.preco < parseInt(maxPrice));
  res.status(200).json(filteredRecipes);
});

router.get('/:id', function (req, res) {
  const { id } = req.params;
  const recipe = recipes.find((r) => r.id === parseInt(id));
  if (!recipe) return res.status(404).json({ message: 'Recipe not found!'});

  res.status(200).json(recipe);
});

router.post('/', validateName, function (req, res) {
  const { id, name, price } = req.body;
  recipes.push({ id, name, price});
  res.status(201).json({ message: 'Recipe created successfully!'});
});

router.put('/:id', validateName, function (req, res) {
  const { id } = req.params;
  const { name, price } = req.body;
  const recipeIndex = recipes.findIndex((r) => r.id === parseInt(id));

  if (recipeIndex === -1) return res.status(500).json({ message: 'Recipe not found!' });

  recipes[recipeIndex] = { ...recipes[recipeIndex], name, price };

  res.status(204).end();
});

router.delete('/:id', function (req, res) {
  const { id } = req.params;
  const recipeIndex = recipes.findIndex((r) => r.id === parseInt(id));

  if (recipeIndex === -1) return res.status(500).json({ message: 'Recipe not found!' });

  recipes.splice(recipeIndex, 1);

  res.status(204).end();
});

module.exports = router;
Copiar
 index.js 
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Esta rota n√£o passa pelo middleware de autentica√ß√£o!
app.get('/open', function (req, res) {
  res.send('open!')
});

const recipesRouter = require('./recipesRouter');

 Todas as rotas com /recipes/<alguma-coisa> entram aqui e v√£o para o roteador. 
app.use('/recipes', recipesRouter);

// app.all('*', function (req, res) {
// 	return res.status(404).json({ message: `Rota '${req.path}' n√£o existe!`});
// });

app.listen(3001, () => { console.log('Ouvindo na porta 3001'); });
Repare no uso de mais um par√¢metro na chamada √† fun√ß√£o app.use. Isso diz ao Express que queremos que aquele middleware (no caso o router) seja executado para qualquer rota que comece com aquele caminho. Repare que, ao registrar uma rota no router, n√£o precisamos repetir a parte do caminho que j√° passamos para app.use. √â por isso que a rota que definimos com router.get('/:id') na verdade se torna acess√≠vel atrav√©s de /recipes/:id.
Routers suportam que qualquer tipo de middleware seja registrado. Ou seja, se tivermos v√°rios endpoints com autentica√ß√£o e v√°rios endpoints abertos, podemos criar um router, e registrar nele nosso middleware de autentica√ß√£o, bem como todas as rotas que precisam ser autenticadas, registrando as rotas abertas diretamente no app. Veja abaixo:
Copiar
 recipesRouter.js 
// const express = require('express');
// const router = express.Router();

const authMiddleware = require('./auth-middleware');
router.use(authMiddleware);

// ...

// module.exports = router;
Copiar
 index.js 
// const express = require('express');
// const bodyParser = require('body-parser');
const authMiddleware = require('./auth-middleware');

// const app = express();
// app.use(bodyParser.json());

// Esta rota n√£o passa pelo middleware de autentica√ß√£o!
app.get('/open', function (req, res) {
	res.send('open!')
});

// Esta rota passa pelo middleware de autentica√ß√£o!
app.get('/fechado', authMiddleware, function (req, res) {
	res.send('closed!')
});

const recipesRouter = require('./recipesRouter');

Todas as rotas com /recipes/<alguma-coisa> entram aqui e v√£o para o roteador. 
app.use('/recipes', recipesRouter);

// app.all('*', function (req, res) {
// 	return res.status(404).json({ message: `Rota '${req.path}' n√£o existe!`});
// });


// app.listen(3001, () => { console.log('Ouvindo na porta 3001'); });

*/

const validUsers = [
  { username: 'MestreCuca', password: 'MinhaSenhaSuperSeguraSqn' },
  { username: 'McRonald', password: 'Senha123Mudar' },
  { username: 'Burger Queen', password: 'Senha123Mudar' },
  { username: 'UpWay', password: 'Senha123Mudar' },
];

const authMiddleware = (req, res, next) => {
  const { username, password } = req.headers;

  if (!username && !password) {
    return res.status(401).json({ message: 'Username and password can`t be blank!' });
  }

  const foundUser = validUsers.find((user) => user.username === username);

  if (!foundUser) return res.status(401).json({ message: 'Invalid credentials!' });

  if (!(username === foundUser.username  && password === foundUser.password)) {
    return res.status(401).json({ message: 'Invalid credentials!' });
  }

  req.user = foundUser; // Aqui estamos passando o usu√°rio encontrado para o pr√≥ximo middleware.


  next();
};

module.exports = authMiddleware;