import React, {Component} from "react"

class DadJoke extends Component {
  constructor() {
    super();
    /*bind das fun√ß√µes que n√≥s criamos*/  
    this.saveJoke = this.saveJoke.bind(this);
    this.renderJokeElement = this.renderJokeElement.bind(this);

    this.state = { // define o estado inicial da...
      jokeObj: undefined, // piada mais recente retornada pela api
      loading: true, // loading
      storedJokes: [], // array de piadas
    }
  }

  async fetchJoke() { // 1) requisi√ß√£o da api pra inserir no estado
    this.setState(
      { loading: true }, // 6.1) Primeiro par√¢metro da setState() √© loading true!, informo la na renderiza√ß√£o condicional que ele est√° true dai ele imprime 'Loading'
      async () => { // 6.2) Segundo par√¢metro √© o fetch (depois de carregar eu executo a sequ√™ncia do fetch )
      const requestHeaders = { headers: { Accept: 'application/json' } } // 1.2)chaves headers e accept pra recuperar o json (ver documenta√ß√£o da api)
      const requestReturn = await fetch('https://icanhazdadjoke.com/', requestHeaders) // 1.1)url pra recuperar o json. O fetch vai retornar a promisse
      const requestObject = await requestReturn.json(); // 1.3)roda a fun√ß√£o json que tamb√©m √© uma promisse que retorna um objeto Java script com o retorno da requisi√ß√£o
      this.setState({
        loading: false, // 6.3) mudo o estado pra false e faz a renderiza√ß√£o junto com a parte 6).
        jokeObj: requestObject // 1.4) recebe este objeto de pidas do fetch e coloca no estado
      });
    });
  }

  componentDidMount() { // 2) durante a fase de montagem a piada aparece no come√ßo da aplica√ß√£o, pra isso, chama-se a l√≥gica do fetch dentro do componentDidMount(ideal pra fazer requisi√ß√µes de api) 
    this.fetchJoke(); 
  }

  saveJoke() { // 5) pegar a piada atual e salvar no meu array de piadas
    this.setState(({ storedJokes, jokeObj }) => ({ // 5.1) call back que recebe como primeiro par√¢metro o meu estado anterior, e o segundo o estado atual 
      storedJokes: [...storedJokes, jokeObj] // 5.2) spread operator que 'espalha/junta' dois arrays em um s√≥, isso dispara uma nova renderiza√ß√£o do componente  
    }));

    this.fetchJoke();
  }

  renderJokeElement() {
    return (
      <div>
        <p>{this.state.jokeObj.joke}</p> {/* 3)renderiza a piada mais recente que esta no meu estado*/}
        <button type="button" onClick={this.saveJoke}>
          Salvar piada!
        </button>{/* 4)renderiza o bot√£o que vai fazer a piada ser salva na minha lista.*/}
      </div>
    );
  }

  render() {
    const { storedJokes, loading } = this.state;
    const loadingElement = <span>Loading...</span>;

    return (
      <div>
        <span>
          {storedJokes.map(({ id, joke }) => (<p key={id}>{joke}</p>))}
        </span> {/* 5.3) fun√ß√£o que vai iterar sobre as piadas que est√£o salvas dentro do array de piadas (que vem do estado, eu pego o objeto de piadas que cont√©m o id e a piada que nesta api vem da chave joke). o map faz uma lista din√¢mica de piadas baseada no array, com o conte√∫do √© a piada{joke}, e a chave(pra facilitar a vida do react na hora de renderizar as coisas de forma eficiente vai ser o id, com isso a lista de piadas esta pronta */}

      <p>{loading ? loadingElement : this.renderJokeElement() }</p> {/* 6) Renderiza√ß√£o condicional: o primeiro render(na ordem de montagem) o jakeObj √© undefined, esta condi√ß√£o pergunta... estou carregando o novo estado, enquanto isso manda a msg de carregando... se o loading √© true, ele renderiza a msg 'Loading', caso contr√°rio, ele renderiza a fun√ß√£o que traz a piada e salva*/}

      </div>
    );
  }
}

export default DadJoke;

/* Esta aplica√ß√£o deve trazer uma piada logo no carregamento da tela, que deve ser salva em uma lista quando aperto o bot√£o salvar, apertando este bot√£o, tamb√©m deve mostrar na tela a pr√≥xima piada, antes de cada atualiza√ß√£o/piada, deve-se mostrar a msg Loading na tela Sequencia da l√≥gica: 1, 1.1, 1.2, 1.3, 1.4, 2, 3, 4, 5, 5.1, 5.2, 5.3, 6, 6.1, 6.2, 6.3,  

/* 
// Renderiza√ß√£o condicional e atualiza√ß√£o de arrays no estado

Estamos realizando uma requisi√ß√£o para uma API, e enquanto esperamos o resultado retornar, criamos uma l√≥gica de renderiza√ß√£o condicional.
Vimos no v√≠deo como fazemos para garantir que algo s√≥ rode depois do estado ser atualizado! Passamos como segundo par√¢metro da this.setState uma callback com a dita l√≥gica!
this.setState({ meuEstado: novoValor }, () => {
  // ... Sua l√≥gica aqui
})
E para o caso mais complicado? Isto √©, atualizar o estado baseado no estado anterior e executar alguma l√≥gica somente depois do estado atualizar ao mesmo tempo?! Nesse caso tanto o primeiro par√¢metro quanto o segundo s√£o callbacks!
this.setState(
  (estadoAnterior) => ({ meuEstado: estadoAnterior }), // Primeiro par√¢metro!
  () => { ... Sua l√≥gica aqui } // Segundo par√¢metro!
  )
  sintaxe √© um tanto confusa, mas guarde isso na sua caixa de ferramentas para fazer l√≥gicas de Loading... quando se est√° esperando a resposta de uma API! E lembre-se: como a this.setState n√£o retorna uma promise, usar async/await com ela NUNCA vai funcionar.
  üí° Aprendemos no v√≠deo tamb√©m sobre como atualizar arrays no estado com base no estado anterior! Use o spread operator! this.setState(({ meuArrayNoEstado }) => ({meuArrayNoEstado: [...meuArrayNoEstado, novoElemento] }))
*/    