import React, {Component} from "react";

class Counter extends Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 0
    };
    console.log("construtor");
  }

  componentDidMount() {
    console.log("componentDidMount");
  }

  shouldComponentUpdate(nextProps, nextState) {
    console.log("shouldComponentUpdate", this.state, nextState);
    return true;
  }

  componentDidUpdate(prevProps, prevState) {
    console.log("componentDidUpdate", this.state, prevState);
  }

  render() {
    console.log("render");
    return (
      <div>
        <p>Contador</p>
        <button
          onClick={() => this.setState((state) => ({ counter: state.counter + 1 }))}
        >
          Soma
        </button>
        <p>{this.state.counter}</p>
      </div>
    );
  }
}

export default Counter;

/*

//  O Ciclo de Vida de um componente React

Como visto no v√≠deo anterior, existem fun√ß√µes espec√≠ficas que s√£o executadas ao final de cada fase do ciclo de vida de um componente: componentDidMount , componentDidUpdate e componentWillUnmount . Por√©m o v√≠deo tamb√©m menciona que existem outras fun√ß√µes consideradas menos comuns, como √© caso de shouldComponentUpdate , que pode ser chamada na fase de atualiza√ß√£o.
Os componentes React , assim como os seres vivos, possuem um ciclo de vida. No caso do React, o ciclo √© dividido em 3 etapas. S√£o elas:
a) Montagem - quando o componente √© inicializado e inserido no DOM;
b) Atualiza√ß√£o - quando os props ou estados do componente s√£o alterados;
c) Desmontagem - quando o componente morre üßü‚Äç‚ôÇÔ∏è, sumindo do DOM.
O ciclo de vida √© acess√≠vel por meio de m√©todos nativos dos class components . Como exemplo, pense no render , que √© um m√©todo de renderiza√ß√£o dos class components e que √© chamado toda vez que uma atualiza√ß√£o acontece. Ele possui caracter√≠sticas intr√≠nsecas que permitem adicionar o componente no DOM. Assim como o render , outros m√©todos possuem suas pr√≥prias caracter√≠sticas e objetivos. O ciclo de vida e os principais m√©todos funcionam da seguinte maneira:
Montagem:
a) constructor - recebe as props e define o estado;
b) render - renderiza o componente, inserindo-o no DOM;
c) componentDidMount - dispara uma ou mais a√ß√µes ap√≥s o componente ser inserido no DOM (ideal para requisi√ß√µes) ;
Atualiza√ß√£o:
a) shouldComponentUpdate - possibilita autorizar ou n√£o o componente a atualizar;
b) componentDidUpdate - dispara uma ou mais a√ß√µes ap√≥s o componente ser atualizado;
Desmontagem:
a) componentWillUnmount - dispara uma ou mais a√ß√µes antes de o componente ser desmontado.
Al√©m dos m√©todos citados, h√° tamb√©m outros que o pr√≥prio React intitula de M√©todos Raramente Usados , como o getDerivedStateFromProps e getSnapshotBeforeUpdate.

// Entendendo quando cada m√©todo √© chamado
Vamos agora fazer uma simula√ß√£o, para ver na pr√°tica quando cada m√©todo √© chamado, componente acima.
Ao executar o c√≥digo acima, sem o clique no bot√£o Soma , aparecer√£o as seguintes mensagens no console do seu browser:
constructor
render 
componentDidMount

Atente-se para a ordem de chamada dos m√©todos. As mensagens refletem a ordem de execu√ß√£o dos m√©todos de ciclo de vida do componente.
Os m√©todos shouldComponentUpdate e componentDidUpdate n√£o apareceram no console, pois n√£o houve atualiza√ß√£o. Caso o bot√£o Soma seja clicado, teremos mais mensagens no console:
constructor
render 
componentDidMount
shouldComponentUpdate
render
componentDidUpdate
Note que, durante o processo de atualiza√ß√£o, o m√©todo render √© chamado novamente. Isso acontece porque, quando se atualiza uma props ou estado, o React "pede" que o componente seja renderizado no DOM. Como apresentamos acima, caso seja v√°lido, podemos impedir essa renderiza√ß√£o retornando false com o m√©todo shouldComponentUpdate .
Podemos tamb√©m, nos m√©todos shouldComponentUpdate e componentDidUpdate , acessar os estados ou props pr√≥ximos e anteriores. Para isso, devemos utilizar os par√¢metros nextProps e nextState no shouldComponentUpdate e prevProps e prevState no componentDidUpdate . Veja um exemplo:
Antes, vamos alterar os console.log() dos m√©todos citados acima:
  shouldComponentUpdate(nextProps, nextState) {
    console.log("shouldComponentUpdate", this.state, nextState);
    return true;
  }

  componentDidUpdate(prevProps, prevState) {
    console.log("componentDidUpdate", this.state, prevState);
  }
constructor
render 
componentDidMount
shouldComponentUpdate {counter:0} {counter:1}
render
componentDidUpdate {counter:1} {counter:0}
Perceba que o estado s√≥ √© de fato atualizado quando chega no m√©todo componentDidUpdate . Por isso, caso seja necess√°rio impedir uma renderiza√ß√£o, voc√™ deve utilizar o m√©todo shouldComponentUpdate , que permite comparar os atuais e pr√≥ximos estados ou props e adicionar a l√≥gica.
*/


