import React, { Component } from "react";


class MinhaDescricao extends Component {
  constructor() {
    super()
    this.handleClick = this.handleClick.bind(this)
    this.state = {
      numeroDeCliques: 0
    }

  }
  
  handleClick() {
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1
    }))
    console.log(this)
    console.log('Clicou e usou o constructor')    
  }
  render() {
    return(
      <div className="App">
      <h1>Giorge</h1>
      <p>Sou Giorge, 43 anos, sou formado em Administra√ß√£o e  Eletr√¥nica. No aspecto social, gosto de quase todos os tipos de m√∫sica, jogo game, pratico corrida, sou a maioria das vezes ‚Äòcaseiro‚Äô.  No aspecto profissional, atuei em v√°rias √°reas sempre me desafiando.
      Sou de S√£o Paulo mas j√° morei em muitas partes do Brasil
      O mais importante pra mim √©  estar em companhias e viver ao lado de pessoas agrad√°veis.</p>
      <button onClick={this.handleClick}>Cliques: {this.state.numeroDeCliques}</button>
      </div>

    )
  }
}

export default MinhaDescricao;

/* 

// Vinculando fun√ß√µes √† classe com this e bind no constructor

Vinculando fun√ß√µes √† classe com this e bind no constructor
this ,√© um objeto que o react cria e entrega pra n√≥s, dentro dele tem muitas coisas dentre eles o prop e state
constructor() , √© uma m√©todo/fun√ß√£o interna que podemos subscrev√™-la , pra isso dentro dela usamos uma outra fun√ß√£o chamada‚Ä¶ super(). Conseguimos ent√£o, vincular(bind) ou se fazer acessar o this dentro das fun√ß√µes com a seguinte sintaxe:
constructor  () {
  super()
  this.<nomeDaFun√ß√£o> = this.<nomeDaFun√ß√£o>.bind(this)
}
 <nomeDaFun√ß√£o> , a fun√ß√£o ent√£o √© escrita dentro da classe (sem precisar escrever function antes da fun√ß√£o), antes do render() , assim se consegue renderizar a fun√ß√£o!
 
 // Para Fixar:
 3 - Declare dentro da classe do seu componente dos exerc√≠cios de fixa√ß√£o acima a fun√ß√£o que lida com o evento que antes era lidado por uma fun√ß√£o do lado de fora da classe!
4 - Garanta acesso ao objeto this na fun√ß√£o que voc√™ declarou.

 constructor() {
    super()
    this.handleClick = this.handleClick.bind(this)
  }
  
  handleClick() {
    console.log(this)
    console.log('Clicou e usou o constructor')    
  }
  render() {
    return(
      <div className="App">      
      <button onClick={this.handleClick}>Test Constructor</button>
      </div>

    )
  }
}
*/

// Unindo componentes com estados e eventos

/*
Unindo componentes com estados e eventos
estado inicial e l√≥gica
this.state ,√© um objeto que esta dentro do this. Usamos ele dentro do constructor pra definir uma chave e seu valor inicial, neste exemplo queremos que apare√ßa no bot√£o a quantidade de cliques
setState, √© a fun√ß√£o que funciona de forma ass√≠ncrona que ir√° determinar a ordem em que o estado ser√° executado, pois o estado √© ass√≠ncrono e o react enfileira todas as atualiza√ß√µes de estado, agrega e executa de um,a vez, n√£o garantindo a ordem que queremos
this.setState((estadoAnterior, _props)) ,ao inv√©s de passarmos como par√¢metro o objeto do estado atualizado, passamos uma fun√ß√£o (call back) com dois par√¢metros obrigat√≥rios‚Ä¶ o primeiro √© o estadoAnterior e o segundo a props da aplica√ß√£o(deste estado). Como a props n√£o iremos utilizar neste exemplo, colocamos um _ pra informar q n ser√° usado
((estadoAnterior, _props) => ({
  })) , no corpo da arrow function podemos definir/ retornar direto o nosso novo estado, veja fun√ß√£o completa abaixo:
constructor() {
  super()
  this.<nomeDaFun√ß√£o> = this.<nomeDaFun√ß√£o>.bind(this)
  this.state = {
    numeroDeCliques : 0
  }
}

<nomeDaFun√ß√£o>() {
  this.setState((estadoAnterior, _props) => ({
    numeroDeCliques: estadoAnterior.mumeroDeCliques + 1    
  }))
}
podemos colocar agora no texto do bot√£o o valor deste estado‚Ä¶(que esta dentro do reder:
<button onClick={this.<nomeDaFun√ß√£o>}>{this.state.numeroDeCliques}</button>

Exemplo do componente acima: 
import React, { Component } from "react";


class MinhaDescricao extends Component {
  constructor() {
    super()
    this.handleClick = this.handleClick.bind(this)
    this.state = {
      numeroDeCliques: 0
    }

  }
  
  handleClick() {
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1
    }))
    console.log(this)
    console.log('Clicou e usou o constructor')    
  }
  render() {
    return(
      <div className="App">     
      <button onClick={this.handleClick}>Cliques: {this.state.numeroDeCliques}</button>
      </div>

    )
  }
}

export default MinhaDescricao; 

Cote√∫do Course
E muita aten√ß√£o ao que foi dito acima! Voc√™ NUNCA deve atribuir valores ao estado diretamente com this.state . O estado √© atualizado de forma ass√≠ncrona pelo React, para garantir performance, e o React n√£o garante a ordem em que as atualiza√ß√µes ocorrer√£o. Se voc√™ fizer uma atribui√ß√£o direta, ter√° problemas! Fa√ßa-o sempre atrav√©s da fun√ß√£o this.setState(meuNovoObjetoQueRepresentaOEstado) . N√ÉO se esque√ßa disso! üòÉ
Mas se a a atualiza√ß√£o do estado n√£o ocorre em ordem, voc√™s perguntam, "como eu atualizo meu estado com base no estado anterior? Se tudo ocorre fora de ordem, como eu sei que uma conta de novoEstado = estadoAtual + 1 n√£o dar√° problemas?"
Pois bem! Lembre-se de que, com Promises, para garantir que algum c√≥digo executasse somente ap√≥s o retorno da Promise, que √© ass√≠ncrona, voc√™ tinha que coloc√°-lo dentro da fun√ß√£o .then . Aqui a l√≥gica √© da mesma natureza:
Se voc√™ quisesse chamar, no elemento, um evento passando um par√¢metro, voc√™ deveria trocar a sintaxe <button onClick{this.minhaFuncao} ...> por <button onClick={() => this.minhaFuncao('meu parametro')} . Basicamente, substitua a fun√ß√£o do evento por uma chamada √† mesma feita via callback! Experimente!
import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super()
    this.state = {
      numeroDeCliques: 0
    }
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick = () => {
    Passando uma callback √† fun√ß√£o setState, que recebe de par√¢metros
    o estado anterior e as props do componente, voc√™ garante que as atualiza√ß√µes
    do estado acontecer√£o uma depois da outra! 
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1
    }))
  }

  render() {
    return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>
  }
}

export default App; 

// Para fixar

5- Agora voc√™ vai converter sua aplica√ß√£o para uma que conta o n√∫mero de cliques dado em cada bot√£o! Primeiramente, defina um estado inicial para a contagem de cada bot√£o.
ü¶ú Dica: Uma possibilidade √© voc√™ definir tr√™s chaves, uma para cada bot√£o!
    this.state = {
      clicksBtnOne: 0,
      clicksBtnTwo: 0,
      clicksBtnThree: 0,
    };

6- Agora, quando um bot√£o for clicado, altere de forma ass√≠ncrona o estado deste bot√£o de zero para um.
    import React from 'react';

    class App extends React.Component {
      constructor() {
        super();

        this.handleButtonOne = this.handleButtonOne.bind(this);
        this.handleButtonTwo = this.handleButtonTwo.bind(this);
        this.handleButtonThree = this.handleButtonThree.bind(this);

        this.state = {
          clicksBtnOne: 0,
          clicksBtnTwo: 0,
          clicksBtnThree: 0,
        };
      }

      handleButtonOne() {
        this.setState(() => ({
          clicksBtnOne: 1,
        }));
      }
      
      handleButtonTwo() {
        this.setState(() => ({
          clicksBtnTwo: 1,
        }));
      }
      
      handleButtonThree() {
        this.setState(() => ({
          clicksBtnThree: 1,
        }));
      }
     
       render() {
        return (
          <div>
            <button onClick={ this.handleButtonOne }>Bot√£o 1</button>
            <button onClick={ this.handleButtonTwo }>Bot√£o 2</button>
            <button onClick={ this.handleButtonThree }>Bot√£o 3</button>
          </div>
        );
      }
    }

    export default App;

7- Por fim, baseie-se no estado anterior ao atual para incrementar a contagem de cliques cada vez que um bot√£o for clicado!    
    import React from 'react';

    class App extends React.Component {
      constructor() {
        super();

        this.handleButtonOne = this.handleButtonOne.bind(this);
        this.handleButtonTwo = this.handleButtonTwo.bind(this);
        this.handleButtonThree = this.handleButtonThree.bind(this);

        this.state = {
          clicksBtnOne: 0,
          clicksBtnTwo: 0,
          clicksBtnThree: 0,
        };
      }

      handleButtonOne() {
        this.setState((prevState) => ({
          clicksBtnOne: prevState.clicksBtnOne + 1,
        }));
      }
      
      handleButtonTwo() {
        this.setState((prevState) => ({
          clicksBtnTwo: prevState.clicksBtnTwo + 1,
        }));
      }
      
      handleButtonThree() {
        // A √∫nica coisa diferente √© a desconstru√ß√£o.
        // Apenas um m√©todo diferente de fazer a mesma coisa
        // do que foi feito nas fun√ß√µes anteriores.
        this.setState(({ clicksBtnThree }) => ({
          clicksBtnThree: clicksBtnThree + 1,
        }));
      }
      
      render() {
        return (
          <div>
            <button onClick={ this.handleButtonOne }>Bot√£o 1 | Count = {this.state.clicksBtnOne}</button>
            <button onClick={ this.handleButtonTwo }>Bot√£o 2 | Count = {this.state.clicksBtnTwo}</button>
            <button onClick={ this.handleButtonThree }>Bot√£o 3 | Count = {this.state.clicksBtnThree}</button>
          </div>
        );
      }
    }

    export default App;

8- Defina uma l√≥gica que estabele√ßa que, quando o n√∫mero de cliques no bot√£o for par, ele deve ser verde.
  import React from 'react';

  class App extends React.Component {
    constructor() {
      super();

      this.state = {
        clicksBtnOne: 0,
        clicksBtnTwo: 0,
        clicksBtnThree: 0,
      };

      this.handleButtonOne = this.handleButtonOne.bind(this);
      this.handleButtonTwo = this.handleButtonTwo.bind(this);
      this.handleButtonThree = this.handleButtonThree.bind(this);
    }

    handleButtonOne() {
      this.setState(({ clicksBtnOne }) => ({
        clicksBtnOne: clicksBtnOne + 1,
      }));
    }
    
    handleButtonTwo() {
      this.setState(({ clicksBtnTwo }) => ({
        clicksBtnTwo: clicksBtnTwo + 1,
      }));
    }
    
    handleButtonThree() {
      this.setState(({ clicksBtnThree }) => ({
        clicksBtnThree: clicksBtnThree + 1,
      }));
    }

    // Para essa fun√ß√£o, n√£o precisamos utilizar o bind porque ela √© utilizada
    // apenas dentro do contexto do componente App
    getButtonColor(num) {
      // Essa fun√ß√£o cont√©m um tern√°rio que realiza a l√≥gica para mudarmos
      // a cor do bot√£o para verde quando for um n√∫mero par
      return num % 2 === 0 ? 'green' : 'white';
    }

    render() {
      const { clicksBtnOne, clicksBtnTwo, clicksBtnThree } = this.state;
      return (
        <div>
          <button
            onClick={ this.handleButtonOne }
            // Para renderizarmos as cores, precisamos acrescentar a fun√ß√£o
            // que cont√©m a nossa l√≥gica ao "inline style", passando o estado
            // correspondente como par√¢metro
            style={{ backgroundColor: this.getButtonColor(clicksBtnOne) }}
          >
            Bot√£o 1 | Count = { clicksBtnOne }
          </button>
          <button
            onClick={ this.handleButtonTwo }
            style={{ backgroundColor: this.getButtonColor(clicksBtnTwo) }}
          >
            Bot√£o 2 | Count = { clicksBtnTwo }
          </button>
          <button
            onClick={ this.handleButtonThree }
            style={{ backgroundColor: this.getButtonColor(clicksBtnThree) }}
          >
            Bot√£o 3 | Count = { clicksBtnThree }
          </button>
        </div>
      );
    }
  }

  export default App;

9- A cor atual do bot√£o deve ser impressa num console.log() de dentro da fun√ß√£o do evento que lida com o clique. Fa√ßa isso acontecer!
ü¶ú Dica: Lembre-se de substituir a refer√™ncia √† fun√ß√£o, no evento, por uma callback que invoca!
  import React from 'react';

  class App extends React.Component {
    constructor() {
      super();

      this.state = {
        clicksBtnOne: 0,
        clicksBtnTwo: 0,
        clicksBtnThree: 0,
      };

      this.handleButtonOne = this.handleButtonOne.bind(this);
      this.handleButtonTwo = this.handleButtonTwo.bind(this);
      this.handleButtonThree = this.handleButtonThree.bind(this);
    }

    handleButtonOne() {
      this.setState(({ clicksBtnOne }) => ({
        clicksBtnOne: clicksBtnOne + 1,
      }), () => {
        console.log(`Bot√£o 1 ${this.getButtonColor(this.state.clicksBtnOne)}`);
      });
    }
    
    handleButtonTwo() {
      this.setState(({ clicksBtnTwo }) => ({
        clicksBtnTwo: clicksBtnTwo + 1,
      }), () => {
        console.log(`Bot√£o 2 ${this.getButtonColor(this.state.clicksBtnTwo)}`);
      });
    }
    
    handleButtonThree() {
      this.setState(({ clicksBtnThree }) => ({
        clicksBtnThree: clicksBtnThree + 1,
      }), () => {
        // Aqui imprimimos a cor no console ap√≥s o setState atualizar
        // a quantidade de clicks no bot√£o
        console.log(`Bot√£o 3 ${this.getButtonColor(this.state.clicksBtnThree)}`);
      });
    }

    getButtonColor(num) {
      return num % 2 === 0 ? 'green' : 'white';
    }

    render() {
      const { clicksBtnOne, clicksBtnTwo, clicksBtnThree } = this.state;
      return (
        <div>
          <button
            onClick={ this.handleButtonOne }
            style={{ backgroundColor: this.getButtonColor(clicksBtnOne) }}
          >
            Bot√£o 1 | Count = { clicksBtnOne }
          </button>
          <button
            onClick={ this.handleButtonTwo }
            style={{ backgroundColor: this.getButtonColor(clicksBtnTwo) }}
          >
            Bot√£o 2 | Count = { clicksBtnTwo }
          </button>
          <button
            onClick={ this.handleButtonThree }
            style={{ backgroundColor: this.getButtonColor(clicksBtnThree) }}
          >
            Bot√£o 3 | Count = { clicksBtnThree }
          </button>
        </div>
      );
    }
  }

  export default App;
*/  