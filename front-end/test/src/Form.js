import React, {Component} from "react"
import './Form.css'

class Form extends Component {
  constructor() {
    super()

    this.handleChange = this.handleChange.bind(this)

    this.state = {
      estadoFavorito: '',
      nome: '',
      email: '',
      idade: 0,
      vaiComparecer: false,
      palavraChavefavorita: ''
    }
  }

  handleChange(event) {
    this.setState({estadoFavorito: event.target.value})
    console.log(event.target.value)
  }
  render() {
    return (
      <div>
        <h1>Estados e React - Tecnologia fant√°stica ou reagindo a regionalismos?</h1>
        <form className="form">
          <label>
            Diga qual o seu Estado favorito! De React ou do Brasil, voc√™ decide!
            <textarea 
            name="estadoFavorito" 
            value={this.state.estadoFavorito} 
            onChange={this.handleChange} />
          </label>
          
          <label>
            Email
            <input type="email" name="email"/>
          </label>
          
          <label>
            Nome
            <input type="text" name="nome"/>
          </label>
          
          <label>
            Idade
            <input type="number" name="idade"/>
          </label>
          <label>
            Vai comparecer √† confer√™ncia?
            <input type="checkbox" name="vaiComparecer"/>
          </label>

          <label>
            Escolha sua palavra chave favorita:
            <select name="palavraChaveFavorita">
              <option value="estado">Estado</option>
              <option value="evento">Evento</option>
              <option value="props">Props</option>
              <option value="hooks">Hooks</option>
            </select>
          </label>        
        </form>
      </div>      
    );
  }
}

export default Form;

/*
                        11.2 - Formul√°rios no React
//  Componentes controlados
 
                        
Documenta√ß√£o formul√°rios em React:
https://pt-br.reactjs.org/docs/forms.html

No JavaScript "tradicional", que voc√™s usavam nos primeiros blocos, voc√™ fez formul√°rios, certo? Pois bem, se pergunte o seguinte: onde ficavam os dados que voc√™s inseriam nesses formul√°rios? Os dados dos campos num√©ricos, de texto, select ... Eles n√£o ficavam em nenhuma vari√°vel declarada por voc√™ certo?
Pois ent√£o! Se voc√™ reparar com um inspect , vai ver que os dados dos campos preenchidos sempre aparecem no pr√≥prio DOM quando inseridos. Voc√™ acredita que √© a√≠ que esses dados s√£o salvos? Sim! No pr√≥prio DOM. Meio estranho, certo? Pensando numa aplica√ß√£o React , onde n√≥s salvar√≠amos os dados do nosso formul√°rio? Pensando no formul√°rio, l√≥gico, como um componente.
... No Estado , correto?
Pois √©! Como todos os dados que concernem os componentes do React, os dados de um formul√°rio tamb√©m devem ser salvos no Estado ! E eis o pulo do gato: a partir do momento que a informa√ß√£o do forms n√£o √© mais salva no pr√≥prio elemento, no DOM, mas no Estado do componente que o cont√©m, passamos a dizer que esse elemento √© um Componente Controlado!
 Aten√ß√£o! Essa nomenclatura, oficial do React, √© confusa. Estamos dizendo aqui que o elemento do formul√°rio √© um componente controlado. N√£o estamos falando dos componentes React aqui, mas dos elementos que comp√µem o formul√°rio! Cuidado para n√£o confundir.
üí° A extens√£o do Google Chrome React Developer Tools ( https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi ) √© muito √∫til para se desenvolver aplicativos React! N√£o deixe de baix√°-la.
*/