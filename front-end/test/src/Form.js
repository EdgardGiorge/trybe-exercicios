// import React, {Component} from "react"
// import './Form.css'

// class Form extends Component {
//   constructor() {
//     super()

//     this.handleChange = this.handleChange.bind(this)

//     this.state = {
//       estadoFavorito: '',
//       nome: '',
//       email: '',
//       idade: 0,
//       vaiComparecer: false,
//       palavraChavefavorita: ''
//     }
//   }

//   handleChange(event) {
//     this.setState({estadoFavorito: event.target.value})
//     console.log(event.target.value)
//   }
//   render() {
//     return (
//       <div>
//         <h1>Estados e React - Tecnologia fant√°stica ou reagindo a regionalismos?</h1>
//         <form className="form">
//           <label>
//             Diga qual o seu Estado favorito! De React ou do Brasil, voc√™ decide!
//             <textarea 
//             name="estadoFavorito" 
//             value={this.state.estadoFavorito} 
//             onChange={this.handleChange} />
//           </label>
          
//           <label>
//             Email
//             <input type="email" name="email"/>
//           </label>
          
//           <label>
//             Nome
//             <input type="text" name="nome"/>
//           </label>
          
//           <label>
//             Idade
//             <input type="number" name="idade"/>
//           </label>
//           <label>
//             Vai comparecer √† confer√™ncia?
//             <input type="checkbox" name="vaiComparecer"/>
//           </label>

//           <label>
//             Escolha sua palavra chave favorita:
//             <select name="palavraChaveFavorita">
//               <option value="estado">Estado</option>
//               <option value="evento">Evento</option>
//               <option value="props">Props</option>
//               <option value="hooks">Hooks</option>
//             </select>
//           </label>        
//         </form>
//       </div>      
//     );
//   }
// }

// export default Form;

/*
                        11.2 - Formul√°rios no React
//  Componentes controlados
 
                        
Documenta√ß√£o formul√°rios em React:
https://pt-br.reactjs.org/docs/forms.html

No JavaScript "tradicional", que voc√™s usavam nos primeiros blocos, voc√™ fez formul√°rios, certo? Pois bem, se pergunte o seguinte: onde ficavam os dados que voc√™s inseriam nesses formul√°rios? Os dados dos campos num√©ricos, de texto, select ... Eles n√£o ficavam em nenhuma vari√°vel declarada por voc√™ certo?
Pois ent√£o! Se voc√™ reparar com um inspect , vai ver que os dados dos campos preenchidos sempre aparecem no pr√≥prio DOM quando inseridos. Voc√™ acredita que √© a√≠ que esses dados s√£o salvos? Sim! No pr√≥prio DOM. Meio estranho, certo? Pensando numa aplica√ß√£o React , onde n√≥s salvar√≠amos os dados do nosso formul√°rio? Pensando no formul√°rio, l√≥gico, como um componente.
... No Estado , correto?
Pois √©! Como todos os dados que concernem os componentes do React, os dados de um formul√°rio tamb√©m devem ser salvos no Estado ! E eis o pulo do gato: a partir do momento que a informa√ß√£o do forms n√£o √© mais salva no pr√≥prio elemento, no DOM, mas no Estado do componente que o cont√©m, passamos a dizer que esse elemento √© um Componente Controlado!
 Aten√ß√£o! Essa nomenclatura, oficial do React, √© confusa. Estamos dizendo aqui que o elemento do formul√°rio √© um componente controlado. N√£o estamos falando dos componentes React aqui, mas dos elementos que comp√µem o formul√°rio! Cuidado para n√£o confundir.
üí° A extens√£o do Google Chrome React Developer Tools ( https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi ) √© muito √∫til para se desenvolver aplicativos React! N√£o deixe de baix√°-la.
*/

// event handlers gen√©ricos

// import React, {Component} from "react"
// import './Form.css'

// class Form extends Component {
//   constructor() {
//     super()

//     this.handleChange = this.handleChange.bind(this)

//     this.state = {
//       estadoFavorito: '',
//       nome: '',
//       email: '',
//       idade: 0,
//       vaiComparecer: false,
//       palavraChavefavorita: '',
//       anecdote: ''
//     }
//   }

//   handleChange({target}) {
//     const { name } = target
//     const value = target.type === 'checkbox' ? target.checked : target.value // elemento tipo checkbox √© com target.checked , tipo 

//     this.state ({
//       [name]: value
//     })
    
//   }
  
//   render() {
//     const { estadoFavorito, email, nome, idade, vaiComparecer, palavraChaveFavorita, anecdote }= this.state
//     return (
//       <div>
//         <h1>Estados e React - Tecnologia fant√°stica ou reagindo a regionalismos?</h1>
//         <form className="form">
//           <label>
//             Diga qual o seu Estado favorito! De React ou do Brasil, voc√™ decide!
//             <textarea 
//             name="estadoFavorito" 
//             value={estadoFavorito} /* sem desconstruir: this.state.estadoFavorito */
//             onChange={this.handleChange} />
//           </label>
          
//           <label>
//             Email
//             <input type="email" name="email"  value={email} onChange={this.handleChange}/>
//           </label>
          
//           <label>
//             Nome
//             <input type="text" name="nome" value={nome} onChange={this.handleChange}/>
//           </label>
          
//           <label>
//             Idade
//             <input type="number" name="idade" value={idade} onChange={this.handleChange}/>
//           </label>
//           <label>
//             Vai comparecer √† confer√™ncia?
//             <input type="checkbox" name="vaiComparecer" value={vaiComparecer} onChange={this.handleChange}/>
//           </label>

//           <label>
//             Escolha sua palavra chave favorita:
//             <select name="palavraChaveFavorita" value={palavraChaveFavorita} onChange={this.handleChange}>
//               <option value="estado">Estado</option>
//               <option value="evento">Evento</option>
//               <option value="props">Props</option>
//               <option value="hooks">Hooks</option>
//             </select>
//           </label>

//           <fieldset>
//               <legend>Texto e arquivos</legend>
//               <label htmlFor="anecdote">
//                 Anedota:
//                 <textarea
//                   id="anecdote"
//                   name="anecdote"
//                   onChange={ this.handleChange }
//                   value={ anecdote }
//                 />
//               </label>

//               <input type="file" /* No React, um <input type="file" /> √© sempre um componente n√£o controlado porque seu valor s√≥ pode ser definido por um usu√°rio e n√£o programaticamente */ />
//             </fieldset>        
//         </form>
//       </div>      
//     );
//   }
// }

// export default Form;

/*
event handlers gen√©ricos ... descri√ß√£o

Uma excelente forma de criarmos formul√°rios 100% com componentes controlados √© fazermos um event handler gen√©rico, capaz de atualizar o estado de todos os componentes com a mesma l√≥gica.
O truque √© o seguinte:
a) D√™ a cada elemento um nome que seja igual √† respectiva chave no estado do componente ( name="estadoFavorito" value={this.state.estadoFavorito} 
b) No handler, recupere a partir do par√¢metro event o nome do componente que disparou o evento e o valor associado ao disparo. const { name } = target 
c) Interpole o nome do componente como chave do estado numa sintaxe como a acima. 
this.state ({
[name]: value
})
*/

/*
Transmitindo informa√ß√µes de componente filho para componente pai

A transmiss√£o de informa√ß√µes de um componente filho para um componente pai √© um dos conceitos primordiais de React. Ele se baseia nos seguintes pilares:
a) O componente pai det√©m o Estado e controla completamente como ele ser√° atualizado. Isso significa que as fun√ß√µes que manipular√£o o estado devem ser declaradas sempre nele mesmo.
b)Quando algum componente filho deve passar alguma informa√ß√£o ao componente pai, ele deve receber como props a fun√ß√£o que atualiza o estado do pai e dar a ela, como par√¢metro, a informa√ß√£o pedida.
c) A informa√ß√£o transmitida dessa forma ser√° inserida no estado do componente pai.
No c√≥digo abaixo vemos um exemplo disso acontecendo numa aplica√ß√£o.
*/
import React, {Component} from "react"
import EstadoFavorito from "./EstadoFavorito"
import './Form.css'

class Form extends Component {
  constructor() {
    super()

    this.handleChange = this.handleChange.bind(this)

    this.state = {
      estadoFavorito: '',
      nome: '',
      email: '',
      idade: 0,
      vaiComparecer: false,
      palavraChavefavorita: '',
      anecdote: ''
    }
  }

  handleChange({target}) {
    const { name } = target
    const value = target.type === 'checkbox' ? target.checked : target.value // elemento tipo checkbox √© com target.checked , tipo 

    this.setState({
      [name]: value
    })
    
  }
  
  render() {
    const { estadoFavorito, email, nome, idade, vaiComparecer, palavraChaveFavorita, anecdote }= this.state
    return (
      <div>
        <h1>Estados e React - Tecnologia fant√°stica ou reagindo a regionalismos?</h1>
        <form className="form">
          <EstadoFavorito value={estadoFavorito} /* define uma prop no pai */ handleChange={this.handleChange} /*, no pai passar a fun√ß√£o que manipula o estado como prop *//> 
          
          
          <label>
            Email
            <input type="email" name="email"  value={email} onChange={this.handleChange}/>
          </label>
          
          <label>
            Nome
            <input type="text" name="nome" value={nome} onChange={this.handleChange}/>
          </label>
          
          <label>
            Idade
            <input type="number" name="idade" value={idade} onChange={this.handleChange}/>
          </label>
          <label>
            Vai comparecer √† confer√™ncia?
            <input type="checkbox" name="vaiComparecer" value={vaiComparecer} onChange={this.handleChange}/>
          </label>

          <label>
            Escolha sua palavra chave favorita:
            <select name="palavraChaveFavorita" value={palavraChaveFavorita} onChange={this.handleChange}>
              <option value="estado">Estado</option>
              <option value="evento">Evento</option>
              <option value="props">Props</option>
              <option value="hooks">Hooks</option>
            </select>
          </label>

          <fieldset>
              <legend>Texto e arquivos</legend>
              <label htmlFor="anecdote">
                Anedota:
                <textarea
                  id="anecdote"
                  name="anecdote"
                  onChange={ this.handleChange }
                  value={ anecdote }
                />
              </label>

              <input type="file" /* No React, um <input type="file" /> √© sempre um componente n√£o controlado porque seu valor s√≥ pode ser definido por um usu√°rio e n√£o programaticamente */ />
            </fieldset>        
        </form>
      </div>      
    );
  }
}

export default Form;

/*              Aula ao vivo
Para n√£o precisar criar um componente para cada input, pode se criar um componente padr√£o pra quase todos os componentes... exemplo da aula ao vivo

<Login.js> (pai)

import React from 'react';
import Input from './Input';

class Login extends React.Component {
  constructor() {
    super();
    this.state = {
      email: 'murillo',
      password: '',
    };
  }

  handleChange = ({ target: { value, name } }) => {
    this.setState({ [name]: value });
  }

  render() {
    const { password, email, message } = this.state;
    return (
      <section>
        <h2>Login</h2>
        <form>
          <Input
            name="email"
            value={ email }
            type="email"
            onInputChange={ this.handleChange }
          />
          <Input
            name="password"
            value={ password }
            type="password"
            onInputChange={ this.handleChange }
          />
          <Input
            name="message"
            value={ message }
            type="text"
            onInputChange={ this.handleChange }
          />
          <button type="submit">FAZER LOGIN</button>
        </form>
      </section>
    );
  }
}

export default Login;

<Input.js> (filho)

import React from 'react';

class Input extends React.Component {
  constructor() {
    super();
  }

  render() {
    const { value, onInputChange, name, type } = this.props;
    return (
      <input
        type={ type }
        name={ name }
        value={ value }
        onChange={ onInputChange }
      />
    );
  }
}
export default Input;
*/