/*import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}


export default App; */

// INTRODU√á√ÉO AO REACT

/* Para fixar tudo o que voc√™ aprendeu siga os passos √† seguir para criar o seu primeiro componente React de classe:
1- Crie um novo projeto utilizando npx create-react-app nome-app
‚ö†Ô∏è Substitua o nome-app pelo que voc√™ desejar para seu app ‚ö†Ô∏è
2- Na pasta src , acesse App.js e remova todo o conte√∫do da fun√ß√£o App , de modo que ela fique assim: 
3- Na pasta src , crie um arquivo chamado Component.js crie um componente que retorne um <h1> com o seu nome um paragr√°fo, <p> , com uma breve descri√ß√£o sobre voc√™.
Lembre-se, quando vamos retornar mais de um elemento √© preciso que eles estejam dentro de um <div>.
4- Importe seu componente em App.js de modo que ele seja renderizado na tela quando a aplica√ß√£o for iniciada, npm start. Para isso voc√™ precisar√° utilizar o export default para exportar seu componente, o export default √© sempre utilizado quando queremos exportar apenas um elemento de um arquivo, seja uma fun√ß√£o, um componente ou uma vari√°vel. A pen√∫ltima linha do arquivo Component.js dever√° ficar da seguinte forma:
5- Execute sua aplica√ß√£o, npm start , e verifique se tudo ocorreu como o esperado. Ao finalizar esse exerc√≠cio voc√™ ter√° feito o seu primeiro componente React de classe. Parab√©ns üéâ */

 //import logo from './logo.svg';
 import './App.css';
 import MinhaDescricao from './MinhaDescricao';
 //Exerc. de fixa√ß√£o do Cap. Componentes React - Props:
 import Image from './Image';
 import Form from './Form'

function App() {
  return (
    <div>
      <MinhaDescricao />
      <Form />
      <main>
        <Image source='https://cdn.pixabay.com/photo/2017/02/20/18/03/cat-2083492_1280.jpg' alternativeText="Cute cat string" />
      </main>
    </div>
  );
}


export default App;

/* Exerc√≠cios Introdu√ß√£o ao React

1- Crie um novo projeto utilizando npx create-react-app.

Solu√ß√£o: npx create-react-app nomeDoSeuApp

2- Crie uma lista de tarefas simples que:
Utilize a fun√ß√£o Task dentro do componente App .
Leia as tarefas de dentro de um Array.
Use a fun√ß√£o map para criar cada item da lista no HTML.

Solu√ß√£o:

    import React from 'react';
    import './App.css';

    const Task = (value) => {
      return (
        <li key={value}>{value}</li>
      );
    }

    const tarefas = ['Acordar', 'Tomar caf√©', 'Escovar os dentes', 'Ir trabalhar'];

    class App extends React.Component {
      render() {
        return (
          <ul>{ tarefas.map(tarefa => Task(tarefa)) }</ul>
        );
      }
    }

    export default App;

3- Crie um novo projeto utilizando npx create-react-app.
a) Na pasta src, crie um novo arquivo chamado Header.jsx , que representar√° o componente Header;
b) No arquivo Header.jsx , crie uma classe React, chamada Header. Essa classe deve renderizar uma tag h1 com o texto 'Conte√∫dos de Front-End'. N√£o esque√ßa de exportar esse componente;
c) No arquivo App.js , importe o componente Header criado anteriormente;
d) Renderize o componente Header no App.js ;
e) Na pasta src, crie um novo arquivo chamado Content.jsx , que representar√° o componente Content ;
f) Dentro do arquivo Content.jsx , crie uma classe React chamada Content ;
g) Ainda no arquivo Content.jsx , adicione o seguinte array. A classe Content deve renderizar o array conteudos com a utiliza√ß√£o da fun√ß√£o map, como visto anteriormente, com o seguinte formato:

O conte√∫do √©: `Nome do Conte√∫do`
Status: `Status do Conte√∫do`
Bloco: `Bloco do Conte√∫do`

Lembre-se de adicionar o atributo 'key' ao elemento pai dessa lista, na renderiza√ß√£o.

h) Exporte o componente Content ;
i) No arquivo App.js , importe o componente Content criado anteriormente;
j)Renderize o componente Content no App.js ;
k)Crie um novo arquivo Footer.jsx ;
l)No arquivo Footer.jsx , crie uma classe chamada Footer .
A classe Footer deve renderizar uma tag h1 com o texto "E isso √© s√≥ o come√ßo...". N√£o esque√ßa de exportar o componente criado.
m)Importe o componente Footer no app.js
n)Renderize o componente Footer no app.js .


Solu√ß√£o - App.js:
      // App.js
      import React from 'react';

      import Header from './Header';
      import Content from './Content';
      import Footer from './Footer';

      import './App.css'

      class App extends React.Component {
        render() {
          return (
            <div>
              <Header />
              <Content />
              <Footer />
            </div>
          );
        }
      }

      export default App;

Solu√ß√£o - Header.jsx:
      // Header.jsx
      import React from 'react';

      class Header extends React.Component {
        render() {
          return (
            <div>
              <h1 className='title'>Conte√∫dos de Front-end</h1>
            </div>
          )
        }
      }

      export default Header;

Solu√ß√£o - Content.jsx:
      // Content.jsx
      import React from 'react';

      const conteudos = [
        {
          conteudo: 'High Order Functions',
          bloco: 8,
          status: 'Aprendido'
        },
        {
          conteudo: 'Composi√ß√£o de Componentes',
          bloco: 11,
          status: 'Aprendendo',
        },
        {
          conteudo: 'Composi√ß√£o de Estados',
          bloco: 12,
          status: 'Aprenderei'
        },
        {
          conteudo: 'Redux',
          bloco: 16,
          status: 'Aprenderei'
        },
      ]
      class Content extends React.Component {
        render() {
          return(
            <div className="content">
              {conteudos.map((elem) => (
                <div key={elem.conteudo} className="card">
                  <h4>{`O conteudo √©: ${elem.conteudo}`}</h4>
                  <p>{`status: ${elem.status}`}</p>
                  <p>{`bloco: ${elem.bloco}`}</p>
                </div>
              ))}
            </div>
          );
        }
      }

      export default Content;

Solu√ß√£o - Footer.jsx:
    // Footer.jsx
      import React from 'react';

      class Footer extends React.Component {
        render() {
          return (
            <footer className='footer'>
              <h1>E isso √© s√≥ o come√ßo...</h1>
            </footer>
          )
        }
      }

      export default Footer; */
      

// COMPONENTES REACT

// Props

/* As props s√£o umas das partes mais importantes de um componente. S√£o por elas que voc√™ passa os valores para o componente, e √© como o torna reutiliz√°vel em diferentes contextos. Elas s√£o como os par√¢metros de uma fun√ß√£o. Observe o exemplo abaixo de como seria uma fun√ß√£o que retornaria a mesma mensagem que o componente Greeting renderiza:
Lembrando que, assim como podemos ter v√°rios par√¢metros em uma fun√ß√£o, conseguimos tamb√©m passar in√∫meras propriedades para o componente por meio das props . Adicionemos o sobrenome da pessoa √† fun√ß√£o e ao componente.
Ao componente Greeting :
import React from 'react';

class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name} {this.props.lastName}</h1>;
  }
}

export default Greeting;
Agora o chamamos dentro do componente App :
import Greeting from './Greeting';

function App() {
  return (
    <main>
      <Greeting name="Samuel" lastName="Silva" />
    </main>
  );
}

export default App;
Observe como a chamada do componente lembra a chamada de uma fun√ß√£o com passagem de par√¢metros! Seu retorno, nesse caso, ser√° <h1>Hello, Samuel Silva</h1>
Voc√™ pode estar pensando: entendi que o uso de props √© importante e como pass√°-las para um componente, mas como funciona exatamente o tr√¢mite das props ? Para compreender isso melhor, vamos analisar com mais cuidado a linha 6 do c√≥digo anterior. Ao atribuir as props name e lastName ao componente Greeting , o React automaticamente monta um objeto contendo as informa√ß√µes passadas e as disponibiliza para o componente montado numa vari√°vel chamada props , num formato parecido com esse:
Esse objeto props , por sua vez, √© passado para o componente Greeting , o qual poder√° resgatar tanto o nome como o sobrenome atrav√©s do this.props.name e this.props.lastName .
const props = { name: 'Samuel', lastName: 'Silva' }

// Para Fixar

Agora vamos fazer este exerc√≠cio de fixa√ß√£o!
Crie uma aplica√ß√£o React na sua m√°quina via create-react-app com o nome fixation-exercises-10-2 . Crie um arquivo Image.js no diret√≥rio src do projeto e copie para esse arquivo o c√≥digo escrito acima. Uma vez feito isso tudo, responda:
1- Qual o nome do componente declarado acima?

Solu√ß√£o: Image

2- Chame o componente Image , de forma que seja mostrada esta imagem, ou o texto Cute cat staring , caso a imagem n√£o consiga ser carregada. */

//Solu√ß√£o: verifique o arquivo Image.jsx e App.js l√° nas primeiras linhas ... up

//Composi√ß√£o de componentes

/* Conforme dito anteriormente, componentes s√£o utilizados para construir uma aplica√ß√£o React. Mas como essa constru√ß√£o √© feita? Em React, faz-se uso de composi√ß√£o de componentes. Mas antes de nos aprofundarmos no assunto, vamos dar um passo para tr√°s e refletir: de forma geral, o que √© composi√ß√£o? S√£o elementos ordenados de forma a constituir algo maior e mais complexo. S√£o, por exemplo, as m√∫sicas em um √°lbum musical, as frutas em uma salada de frutas ou at√© mesmo os inputs , as labels e os buttons em um form . Como voc√™ j√° deve ter percebido, composi√ß√µes j√° fazem parte do nosso cotidiano e, com o uso do React , isso se tornar√° ainda mais comum. Componentes React podem conter um ou mais componentes! Essa √© uma funcionalidade muito importante do React , pois permite a reutiliza√ß√£o e a redu√ß√£o do n√≠vel de complexidade de c√≥digos. Vamos refatorar o c√≥digo abaixo para poder entender, na pr√°tica, sobre composi√ß√£o de componentes e seus benef√≠cios. O c√≥digo a seguir renderiza informa√ß√µes b√°sicas sobre dois √°lbuns do Coldplay.

// src/App.js
import React from 'react';

class App extends React.Component {
  render() {
    // Declara√ß√£o do objeto contendo informa√ß√µes do album01
    const album01 = {
      image: 'https://upload.wikimedia.org/wikipedia/en/thumb/b/b0/Coldplay_-_Mylo_Xyloto.JPG/220px-Coldplay_-_Mylo_Xyloto.JPG',
      title: 'Mylo Xyloto',
      releaseDate: {
        year: '2011',
        month: '10',
        day: '24',
      },
      others: {
        recordCompany: 'Capitol, Parlophone',
        formats: 'CD, digital'
      }
    };

    // Declara√ß√£o do objeto contendo informa√ß√µes do album02
    const album02 = {
      image: 'https://upload.wikimedia.org/wikipedia/pt/thumb/5/5d/Coldplay_-_Ghost_Stories.jpg/220px-Coldplay_-_Ghost_Stories.jpg',
      title: 'Ghost Stories',
      releaseDate: {
        year: '2014',
        month: '05',
        day: '16',
      },
      others: {
        recordCompany: 'Parlophone',
        formats: 'CD, digital'
      }
    };

    // Retorno do que ser√° renderizado
    return (
      <article>
        <section>
          <img src={ album01.image } alt={ album01.title } />
          <h2>{ album01.title }</h2>
          <p>Lan√ßamento: { album01.releaseDate.year }</p>
          <p>Gravadora: { album01.others.recordCompany }</p>
          <p>Formatos: { album01.others.formats }</p>
        </section>
        <section>
          <img src={ album02.image } alt={ album02.title } />
          <h2>{ album02.title }</h2>
          <p>Lan√ßamento: { album02.releaseDate.year }</p>
          <p>Gravadora: { album02.others.recordCompany }</p>
          <p>Formatos: { album02.others.formats }</p>
        </section>
      </article>
    );
  }
}

export default App;

Como voc√™ deve ter notado, o c√≥digo, apesar de conter pouca l√≥gica, est√° extenso . Ambas as sections , apesar de possuirem estruturas semelhantes , renderizam informa√ß√µes diferentes. Imagine o tamanho do c√≥digo se tiv√©ssemos cinco albuns. Ou dez? Percebe-se que, nesse contexto, a section √© uma excelente candidata a ser transformada em um componente reutiliz√°vel , dando in√≠cio √† nossa refatora√ß√£o. Para isso, vamos criar um novo arquivo, chamado Album.js , para armazenar o c√≥digo das sections e adapt√°-lo para fazer a leitura das props que iremos passar futuramente:

// /src/components/Album.js
import React from 'react';

class Album extends React.Component {
  render() {
    return (
      <section>
        <img src={ this.props.album.image } alt={ this.props.album.title } />
        <h2>{ this.props.album.title }</h2>
        <p>{ this.props.album.releaseDate.year }</p>
        <p>
          Lan√ßamento:
          { `${ this.props.album.releaseDate.day }/${ this.props.album.releaseDate.month }/${ this.props.album.releaseDate.year }` }
        </p>
        <p>Gravadora: { this.props.album.others.recordCompany }</p>
        <p>Formatos: { this.props.album.others.formats }</p>
      </section>
    );
  }
}

export default Album;

Em seguida, vamos refatorar o App.js. Para substituirmos as sections pelo novo componente criado, temos que:
1. Import√°-lo no arquivo App.js :
  // src/App.js
  import React from 'react';
  import Album from './components/Album'

2. Passar as props apropriadas:
  // src/App.js
   class App extends React.Component {
       ...
       render() {
         return (
           <div>
             <Album album={ album01 } />
             <Album album={ album02 } />
           </div>
         );
       }
   }
   ...

Desse modo, o componente App.js ficar√° assim:
Veja como o c√≥digo ficou mais limpo e melhor de ler. Aqui, o nosso componente App cont√©m dois componentes Album . Isso √© composi√ß√£o de componentes! Cada um desses componentes recebe um objeto diferente atrav√©s da prop album . Importante notar que os dois componentes irm√£os <Album /> , s√£o, na realidade, o mesmo componente, por√©m reutilizados** com base nas props recebidas. Ou seja, apesar de serem o mesmo componente, renderizam informa√ß√µes diferentes, uma vez que recebem props diferentes.
√Ä primeira vista, componentizar a aplica√ß√£o em uma combina√ß√£o de componentes React pode parecer um processo pesado e complexo. No entanto, conforme a aplica√ß√£o cresce, ter √† disposi√ß√£o uma gama de componentes reutiliz√°veis e de baixo n√≠vel de complexidade individual facilitar√° muito o trabalho!

// src/App.js
import React from 'react';
import Album from './components/Album'

class App extends React.Component {
  render() {
    const album01 = {
      image: 'https://upload.wikimedia.org/wikipedia/en/thumb/b/b0/Coldplay_-_Mylo_Xyloto.JPG/220px-Coldplay_-_Mylo_Xyloto.JPG',
      title: 'Mylo Xyloto',
      releaseDate: {
        year: '2011',
        month: '10',
        day: '24',
      },
      others: {
        recordCompany: 'Capitol, Parlophone',
        formats: 'CD, digital'
      }
    };

    const album02 = {
      image: 'https://upload.wikimedia.org/wikipedia/pt/thumb/5/5d/Coldplay_-_Ghost_Stories.jpg/220px-Coldplay_-_Ghost_Stories.jpg',
      title: 'Ghost Stories',
      releaseDate: {
        year: '2014',
        month: '05',
        day: '16',
      },
      others: {
        recordCompany: 'Parlophone',
        formats: 'CD, digital'
      }
    };

    return (
      <div>
        <Album album={ album01 } />
        <Album album={ album02 } />
      </div>
    );
  }
}

export default App;

Agora, vamos refor√ßar o que voc√™ acabou de aprender com este exemplo:
Analisando o c√≥digo abaixo, temos:
O componente App √© composto por dois componentes UserProfile. Em outras palavras, o componente App √© pai dos dois componentes UserProfile . Al√©m disso, <UserProfile user={joao} /> e <UserProfile user={amelia} /> s√£o componentes irm√£os , e eles dois s√£o filhos do componente App .
O componente UserProfile , por sua vez, possui um componente Image. Ou seja, UserProfile tem Image como filho.
Os dados s√£o repassados de componente pai para componente(s) filho(s). Olhando para o c√≥digo abaixo, o componente App , que √© pai dos dois componentes UserProfile , passa para cada um de seus filhos um objeto com as informa√ß√µes de um perfil. O mesmo pode ser dito olhando para UserProfile , que passa para seu componente filho Image a origem de uma imagem.


// arquivo Image.js
import React from 'react';

class Image extends React.Component {
  render() {
    return <img src={this.props.source} alt={this.props.alternativeText} />;
  }
}

export default Image;

// arquivo UserProfile.js
import React from 'react';
import Image from './Image';

class UserProfile extends React.Component {
  render() {
    return (
      <div>
        <p> {this.props.user.name} </p>
        <p> {this.props.user.email} </p>
        <Image source={this.props.user.avatar} alternativeText="User avatar" />
      </div>
    );
  }
}

export default UserProfile;

// arquivo App.js, criado pelo create-react-app, modificado
import React from 'react';
import './App.css';
import UserProfile from './UserProfile';

class App extends React.Component {
  render() {
    const joao = {
      id: 102,
      name: "Jo√£o",
      email: "joao@gmail.com",
      avatar: "https://cdn.pixabay.com/photo/2016/08/20/05/38/avatar-1606916_640.png"
    };

    const amelia = {
      id: 77,
      name: "Am√©lia",
      email: "amelia@gmail.com",
      avatar: "https://cdn.pixabay.com/photo/2017/01/31/13/05/cameo-2023867_640.png"
    };

    return (
      <div className="App">
        <UserProfile user={joao} />
        <UserProfile user={amelia} />
      </div>
    );
  }
}

export default App;

// Lista de componentes e chaves

Agora que voc√™ j√° sabe o que √© componente e como comp√¥-lo, suponha que voc√™ precise implementar um componente que renderiza uma lista de compras. Entretanto, voc√™ n√£o sabe de antem√£o os elementos dessa lista. Como voc√™ renderizaria dinamicamente essa lista de compras?Imagine que temos a seguinte lista a ser renderizada de maneira din√¢mica:
const shoppingList = ['leite', 'arroz', 'feij√£o', 'banana', 'carne'];
O primeiro passo √© criar uma cole√ß√£o de elementos. Para isso, iteramos sobre shoppingList com uma HOF que retorne, em um novo array , cada item da lista envolvido por um elemento <li> . A seguir, atribu√≠mos o array resultante para a vari√°vel items.
// o console log foi adicionado para facilitar a compreens√£o
const items = shoppingList.map((item) => {
  console.log("item: ", item);
  return (<li>{ item }</li>);
});
Agora, s√≥ nos resta renderizar a lista que acabamos de criar! Para isso, dentro do escopo do return , devemos fazer o uso das chaves { } e utilizar, dentro dela, a constante de elementos criada anteriormente. √â por meio das chaves que o React ir√° diferenciar o que √© c√≥digo a ser executado e o que deve ser apenas impresso para leitura:
import React from 'react';

class App extends React.Component {
  render() {
    const shoppingList = ['leite', 'arroz', 'feij√£o', 'banana', 'carne'];
    const items = shoppingList.map((item) => {
      console.log("item: ", item);
      return (<li>{ item }</li>);
    });

    return (
      <div>
        <h2>Lista de compras</h2>
        <ul>
          { items }
        </ul>
      </div>
    );
  }
}
export default App;
Pronto! Agora j√° podemos a renderizar m√∫ltiplos componentes de forma din√¢mica, sem quaisquer problemas, certo? Quase! Ao executar o c√≥digo acima, receberemos, pelo console , um alerta de que uma key deve ser definida para cada item renderizado. Essas keys s√£o importantes para o React indentificar, com precis√£o, quais itens foram adicionados, removidos ou alterados. Ent√£o, como atribu√≠mos e quais devem ser os valores dessas keys? O melhor valor para uma key √© um que seja √∫nico para cada item da lista, como, por exemplo, um ID . No entanto, nem sempre dispomos de um ID est√°vel em m√£os, tal qual o caso do nosso c√≥digo acima. Para solucionarmos esse problema, utilizamos o √≠ndice gerado no segundo par√¢metro da nossa HOF . E, para atribuirmos a key , adicionamos na <li> um atributo key com o valor escolhido:
const items = shoppingList.map((item, index) => (<li key={ index }>{ item }</li>));
Vale ressaltar que, n√£o √© recomendado o uso de √≠ndices como keys em listas que possibilitam a altera√ß√£o na ordem dos itens , pois pode impactar negativamente o desempenho da aplica√ß√£o ou gerar problemas relacionados ao estado do componente. Caso esteja curioso e deseje entender mais a fundo esse debate e como o uso do √≠ndice pode afetar a aplica√ß√£o, leia "Index as a key is ananti-pattern", por Robin Pakorny , na sess√£o de Recursos Adicionais.

Agora vamos fazer este exerc√≠cio de fixa√ß√£o:

1- Lembra do c√≥digo de exemplo da se√ß√£o anterior, referente √† composi√ß√£o de componentes? Crie os componentes Image , UserProfile e App no diret√≥rio src do projeto fixation-exercises-10-2 , e vamos olhar especificamente para o arquivo App.js:

// arquivo Image.js
import React from 'react';

class Image extends React.Component {
  render() {
    return <img src={this.props.source} alt={this.props.alternativeText} />;
  }
}

export default Image;

// arquivo UserProfile.js
import React from 'react';
import Image from './Image';

class UserProfile extends React.Component {
  render() {
    return (
      <div>
        <p> {this.props.user.name} </p>
        <p> {this.props.user.email} </p>
        <Image source={this.props.user.avatar} alternativeText="User avatar" />
      </div>
    );
  }
}

export default UserProfile;

Solu√ß√£o:

// arquivo App.js, criado pelo create-react-app, modificado
import React from 'react';
import './App.css';
import UserProfile from './UserProfile';

class App extends React.Component {
  render() {
    const users = [
      {
        id: 102,
        name: "Jo√£o",
        email: "joao@gmail.com",
        avatar: "https:\/\/cdn.pixabay.com/photo/2016/08/20/05/38/avatar-1606916_640.png"
      },
      {
        id: 77,
        name: "Am√©lia",
        email: "amelia@gmail.com",
        avatar: "https:\/\/cdn.pixabay.com/photo/2017/01/31/13/05/cameo-2023867_640.png"
      }
    ];

    return (
      <div className="App">
        {users.map(user => <UserProfile key={user.id} user={user} />)}
        // Como boa pr√°tica utilizamos a chave `id` do objeto como nossa key por ser √∫nica,
        // caso ela n√£o existisse, precisar√≠mos utilizar o `index` como segundo par√¢metro do map.
      </div>
    );
  }
}

export default App;

//        PropTypes, checagem de tipos

Agora voc√™ vai estudar outro importante fundamento do React : a checagem de tipos ! Imagine que voc√™ criou um componente reutiliz√°vel e que ele, para funcionar corretamente, precisa receber determinadas props de tipos espec√≠ficos, caso contr√°rio a aplica√ß√£o quebrar√°. A checagem de tipos ajuda a prevenir cen√°rios como esse, pois verifica os tipos das props passadas para um componente durante o desenvolvimento e levanta um warning se algo n√£o estiver como planejado. Como deve ter notado, essa verifica√ß√£o previne in√∫meros erros, economizando muito tempo de desenvolvimento!
A melhor forma para compreender o uso dessa ferramenta √© visualizar um exemplo pr√°tico e destrinch√°-lo:

antes‚Ä¶ no terminal instalar pacotes prop-types
npm install prop-types

import React from 'react';
import PropTypes from 'prop-types';

class Greeting extends React.Component {
  render() {
    return (<h1>Hello, {this.props.name} {this.props.lastName}</h1>);
  }
}

Greeting.propTypes = {
  name: PropTypes.string,
  lastName: PropTypes.string,
};

export default Greeting;
1- O primeiro passo para utilizar o prop-types √© import√°-lo no componente:
    import PropTypes from 'prop-types';
2- Em seguida, para executarmos a checagem de tipos no componente Greeting , adicionamos a seguinte estrutura antes do export default :
    Greeting.propTypes = {
      name: PropTypes.string.isRequired,
      lastName: PropTypes.string.isRequired,
    };
√â dentro dessa estrutura que ocorre a checagem das props . Basta pegarmos o nome da prop que queremos tipar, e usar a sintaxe de identifica√ß√£o apropriada para o caso. √Ä primeira vista, pode parecer confuso, por isso vamos ao exemplo:
    ...
    name: PropTypes.string,
    ‚Ä¶
2- A outra prop que falta ser tipada , lastName , se encontra em uma situa√ß√£o bem semelhante √† anterior. Ent√£o repetimos o processo, trocando apenas o nome da prop :
    ...
    name: PropTypes.string,
    lastName: PropTypes.string,
    ‚Ä¶
Agora podemos ter certeza que, caso o componente seja renderizado com alguma prop de tipo inv√°lido, o console disparar√° um aviso , facilitando muito o processo de debugging .
E caso o nosso componente seja renderizado sem nenhum valor numa prop , ainda ser√° disparado o aviso? Em casos como esse, no qual as props s√£o essenciais para o bom funcionamento do componente, √© importante acrescentar o .isRequired - ingl√™s para "√© obrigat√≥rio" - ap√≥s a defini√ß√£o do tipo da prop :
Greeting.propTypes = {
  name: PropTypes.string.isRequired,
  lastName: PropTypes.string.isRequired,
};
Desse modo, sempre que o componente for renderizado sem uma das props ou com alguma do tipo errado, um aviso ser√° disparado.
Abaixo segue alguns dos principais validadores oferecidos pela PropTypes . Caso esteja revisitando o conte√∫do e nenhum dos validadores abaixo consigam te ajudar, ou esteja apenas curioso para saber mais sobre outros validadores que a biblioteca oferece, acesse "React - PropTypes" na sess√£o de Recursos Adicionais.
MeuComponente.propTypes = {
  // Todos os validadores aqui s√£o, por padr√£o, validadores opcionais.
  // Para torn√°-los obrigat√≥rios basta adicionar .isRequired
  numeroObrigat√≥rio: PropTypes.number.isRequired,

  // Tipos b√°sico do JS.
  stringOpcional: PropTypes.string,
  numeroOpcional: PropTypes.number,
  booleanoOpcional: PropTypes.bool,
  funcaoOpcional: PropTypes.func,
  objetoOpcional: PropTypes.object,
  arrayOpcional: PropTypes.array,

  // Um array de determinado tipo b√°sico
  arrayDe: PropTypes.arrayOf(PropTypes.number),

  // Um objeto de determinado tipo b√°sico
  objetoDe: PropTypes.objectOf(PropTypes.number),

  // Um objeto com forma espec√≠fica
  objetoComForma: PropTypes.shape({
    name: PropTypes.string,
    age: PropTypes.number,
  }),

  // Um objeto que n√£o permite props extras
  objetoComFormatoRigoroso: PropTypes.exact({
    name: PropTypes.string,
    quantity: PropTypes.number,
    avaibility: PropTypes.bool,
  }),
};
*/

//              Aula ao vivo

// arquivo App.js
/*
import React from "react";
import './index.css';
import Card from './components/Card';
import contens from './data'


class App extends React.Component {
  
  render(){
    return (
      <main>
        <div>
          <h1>Conteudo</h1>
          <p>Acesse a agenda de cada m√≥dulo abaixo, ou continue aprendendo com nossas aulas ao vivo e trilha de Soft Skills.</p>
          <section> 
            {
              contens.map(item => {
                return <Card key={item.title} itemInfo={item}  />
              })
            }
          </section>
        </div>
      </main>
    );
  }
}

export default App;

// arquivo Card.js

import React from 'react';
import PropTypes from 'prop-types';
//QUERO RECEBER INFORMACOES

class Card extends React.Component {
    render(){
        //PROPS => OBJETO
        const {itemInfo} = this.props
        const {imageUrl, name, title} = itemInfo;

        //const {itemInfo : {imageUrl, name, title}} = this.props;
        return(
          <article>
            <img src={imageUrl}/>
            <h3>{name}</h3>
            <h2>{title}</h2>
          </article>
        )
    }
}

Card.propTypes = {
    itemInfo: PropTypes.shape({
        imageUrl: PropTypes.string,
        name: PropTypes.string,
        title: PropTypes.string
    })
}

export default Card;

// arquivo data.js

const contents = [
    {
      id: 1,
      name: "Modulo 1",
      title: "Fundamentos",
      imageUrl: "https://app.betrybe.com/static/media/fundamentals.d4ce6da9.svg",
      isLarge: false
    },
    {
      id: 2,
      name: 2,
      title: "Front-end",
      imageUrl: "	https://app.betrybe.com/static/media/front-end.3f3c4418.svg",
      isLarge: false
    },
    {
      id: 3,
      name: "Modulo 3",
      title: "Back-end",
      imageUrl: "https://app.betrybe.com/static/media/back-end.a979af1a.svg",
      isLarge: false
    },
    {
      id: 4,
      name: "Modulo 4",
      title: "Ci√™ncia da computa√ß√£o",
      imageUrl:
        "https://app.betrybe.com/static/media/computer-science.7ae26ddf.svg",
      isLarge: false
    },
    {
      id: 5,
      name: "Modulo 5",
      title: "SoftSkills",
      imageUrl: "	https://app.betrybe.com/static/media/soft-skills.756af71b.svg",
      isLarge: true
    },
    {
      id: 6,
      name: "Modulo 6",
      title: "Aulas ao vivo",
      imageUrl: "https://app.betrybe.com/static/media/live-lectures.500f6512.svg",
      isLarge: true
    }
  ];
  
  export default contents;
  */
 
 //       Exerc√≠cios Componentes React
 /* Voc√™ vai implementar de forma simplificada uma Pokedex!! Para os que n√£o est√£o familiarizados com o universo Pokemon , a Pokedex √© uma enciclop√©dia de todos os pokemons na natureza. Para o seu caso, a sua aplica√ß√£o precisa mostrar todos os pokemons presentes no arquivo data.js mencionado acima.
 Voc√™ pode usar a imagina√ß√£o para estilizar a sua aplica√ß√£o. Entretanto, √© obrigat√≥rio que voc√™ pelo menos implemente estes dois componentes:
 1- Pokemon : como o pr√≥prio nome diz, esse componente representa um pokemon. Esse componente recebe como entrada um objeto que cont√©m informa√ß√µes referentes a um pokemon espec√≠fico. Esse componente precisa retornar as seguintes informa√ß√µes obrigat√≥rias para serem mostradas para quem usar a aplica√ß√£o, essas informa√ß√µes devem ser validadas utilizando PropTypes:
 a) nome do pokemon;
 b) tipo do pokemon;
 c) peso m√©dio do pokemon, acompanhado da unidade de medida usada;
 d) imagem do pokemon.
 
 2- Pokedex : esse componente representa a enciclop√©dia de pokemons. Esse componente recebe como entrada uma lista de pokemons para serem mostrados na tela. Para cada um desses pokemons recebidos, Pokedex chama o componente Pokemon .
 Segue uma sugest√£o de implementa√ß√£o da aplica√ß√£o:
 Gif exibindo uma sugest√£o de implementa√ß√£o da aplica√ß√£o my-pokedex.

 // Solu√ß√£o:

Gabarito do exerc√≠cio
√â mostrada, em sequ√™ncia, uma sugest√£o de implementa√ß√£o da aplica√ß√£o, em que todas as modifica√ß√µes efetuadas se encontram dentro do diret√≥rio ./my-pokedex/src , onde my-pokedex √© o nome do projeto criado com create-react-app .
Hey! Est√° com d√∫vida de como iniciar? Segue uma dica que pode ser √∫til e tente novamente fazer o exerc√≠cio.
Que tal come√ßar trabalhando no App.js importando o array de pokemons?
arquivo ./my-pokedex/src/data.js:

const pokemons = [
  {
      id: 25,
      name: "Pikachu",
      type: 'Electric',
      averageWeight: {
          value: 6.0,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/b/b2/Spr_5b_025_m.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Pikachu_(Pok%C3%A9mon)"
  },
  {
      id: 4,
      name: "Charmander",
      type: 'Fire',
      averageWeight: {
          value: 8.5,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/0/0a/Spr_5b_004.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Charmander_(Pok%C3%A9mon)"
  },
  {
      id: 10,
      name: "Caterpie",
      type: 'Bug',
      averageWeight: {
          value: 2.9,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/8/83/Spr_5b_010.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Caterpie_(Pok%C3%A9mon)"
  },
  {
      id: 23,
      name: "Ekans",
      type: 'Poison',
      averageWeight: {
          value: 6.9,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/1/18/Spr_5b_023.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Ekans_(Pok%C3%A9mon)"
  },
  {
      id: 65,
      name: "Alakazam",
      type: 'Psychic',
      averageWeight: {
          value: 48.0,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/8/88/Spr_5b_065_m.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Alakazam_(Pok%C3%A9mon)"
  },
  {
      id: 151,
      name: "Mew",
      type: 'Psychic',
      averageWeight: {
          value: 4.0,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/4/43/Spr_5b_151.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Mew_(Pok%C3%A9mon)"
  },
  {
      id: 78,
      name: "Rapidash",
      type: 'Fire',
      averageWeight: {
          value: 95.0,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/5/58/Spr_5b_078.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Rapidash_(Pok%C3%A9mon)"
  },
  {
      id: 143,
      name: "Snorlax",
      type: 'Normal',
      averageWeight: {
          value: 460.0,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/f/fd/Spr_4p_143_s.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Snorlax_(Pok%C3%A9mon)"
  },
  {
      id: 148,
      name: "Dragonair",
      type: 'Dragon',
      averageWeight: {
          value: 16.5,
          measurementUnit: "kg"
      },
      image: "https:\/\/cdn2.bulbagarden.net/upload/2/2c/Spr_5b_148.png",
      moreInfo: "https:\/\/bulbapedia.bulbagarden.net/wiki/Dragonair_(Pok%C3%A9mon)"
  }
];

export default pokemons;

// arquivo ./my-pokedex/src/App.js:

import React from 'react';
import './App.css';
import pokemons from './data';
//Import do json criado com os pokemons e seus dados.
import Pokedex from './Pokedex';

class App extends React.Component {
render() {
  return (
    <div className="App">
      <h1> Pokedex </h1>
      <Pokedex pokemons={pokemons} />
      // No arquivo App.js, estamos renderizando o componente da Pokedex.
      // Criamos a prop "pokemons", e nela chamamos o nosso json "pokemons",
      // pokemons={} √© a nossa prop e o valor dentro das {} √© o nosso json,
      // ou seja nomeDaProps={valorDaProps}, o nome da props √© o que foi passado
      // dentro do componente Pokedex.
      // O valor da props, vem o import que fizemos na linha 3 do arquivo data.js
      // pois desta forma poderemos trabalhar com esses dados via "props".
      // Uma informa√ß√£o importante √© que podemos dar qualquer nome a uma prop,
      // mas atente-se para que seja um nome descritivo.
    </div>
  );
}

}

export default App;

E a√≠, conseguiu dar o primeiro passo, mas ainda se sente perdido? Tente isso:

// arquivo ./my-pokedex/src/Pokedex.js:

import React from 'react';
import Pokemon from './Pokemon';

class Pokedex extends React.Component {
    render() {
      const { pokemons } = this.props;
      // Recebemos do App.js, atrav√©s da props "pokemons", o nosso array de pokemons.
      // Devemos fazer um map, e nele renderizar o componente <Pokemon>, que receber√°
      // por props cada item do array.
      // Lembre-se: √© no componente Pokemon que iremos
      // renderizar todas as informa√ß√µes necess√°rias para a exibi√ß√£o.
        return (
            <div className="pokedex">
                {pokemons.map(pokemon => <Pokemon key={pokemon.id} pokemon={pokemon} />)}
            </div>
        );
    }
}

export default Pokedex;

// arquivo ./my-pokedex/src/Pokemon.js:

import React from 'react';
import PropTypes from 'prop-types';

class Pokemon extends React.Component {
  render() {
    const { pokemon: { name, type, averageWeight, image } } = this.props;
    // Fizemos um map no nosso array de pokemons
    // que vai renderizar o componente Pokemon para cada item do array.
    // Ent√£o, recebemos a props "pokemon" que √© um objeto do array de pokemons
    // Nesses objetos temos informa√ß√µes como name, type e etc, ent√£o
    // desestruturamos essas informa√ß√µes e renderizamos em uma tag HTML,
    // no caso, utilizamos um <p>.

    return (
      <div className="pokemon">
        <div>
          <p>{ name }</p>
          <p>{ type }</p>
          <p>
            {`Average weight: ${averageWeight.value} ${averageWeight.measurementUnit}`}
          </p>
        </div>
        <img src={ image } alt={ `${name} sprite` } />
      </div>
    );
  }
}

Pokemon.propTypes = {
  pokemon: PropTypes.shape({
    name: PropTypes.string,
    type: PropTypes.string,
    averageWeight: PropTypes.shape({
      measurementUnit: PropTypes.string,
      value: PropTypes.number,
    }),
    image: PropTypes.string,
  }).isRequired,
};

export default Pokemon;

Chegamos na parte final do exerc√≠cio! N√£o se preocupe se foi preciso olhar o gabarito para visualizar o que precisava ser feito! Mas n√£o se esque√ßa de refazer o exerc√≠cio para fixar o conte√∫do!
Caso voc√™ n√£o queira se aventurar no css , deixamos um pronto pra voc√™! ;)

// arquivo ./my-pokedex/src/App.css:

.App {
  text-align: center;
}

// arquivo ./my-pokedex/src/index.css:

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.pokemon {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-around;
  flex: 1 1 0;
  min-width: 25%;
  margin: 10px 10px;
  border: 1px gray solid;
  border-radius: 10px;
}

.pokedex {
  display: flex;
  flex-wrap: wrap;
  margin: 10px 10px;
}
*/