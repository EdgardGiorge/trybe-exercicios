/*import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}


export default App; */

// INTRODU√á√ÉO AO REACT

/* Para fixar tudo o que voc√™ aprendeu siga os passos √† seguir para criar o seu primeiro componente React de classe:
1- Crie um novo projeto utilizando npx create-react-app nome-app
‚ö†Ô∏è Substitua o nome-app pelo que voc√™ desejar para seu app ‚ö†Ô∏è
2- Na pasta src , acesse App.js e remova todo o conte√∫do da fun√ß√£o App , de modo que ela fique assim: 
3- Na pasta src , crie um arquivo chamado Component.js crie um componente que retorne um <h1> com o seu nome um paragr√°fo, <p> , com uma breve descri√ß√£o sobre voc√™.
Lembre-se, quando vamos retornar mais de um elemento √© preciso que eles estejam dentro de um <div>.
4- Importe seu componente em App.js de modo que ele seja renderizado na tela quando a aplica√ß√£o for iniciada, npm start. Para isso voc√™ precisar√° utilizar o export default para exportar seu componente, o export default √© sempre utilizado quando queremos exportar apenas um elemento de um arquivo, seja uma fun√ß√£o, um componente ou uma vari√°vel. A pen√∫ltima linha do arquivo Component.js dever√° ficar da seguinte forma:
5- Execute sua aplica√ß√£o, npm start , e verifique se tudo ocorreu como o esperado. Ao finalizar esse exerc√≠cio voc√™ ter√° feito o seu primeiro componente React de classe. Parab√©ns üéâ */

 import logo from './logo.svg';
 import './App.css';
 import MinhaDescricao from './MinhaDescricao';
 //Exerc. de fixa√ß√£o do Cap. Componentes React - Props:
 import Image from './Image';



function App() {
  return (
    <div>
      <MinhaDescricao />
      <main>
        <Image source='https://cdn.pixabay.com/photo/2017/02/20/18/03/cat-2083492_1280.jpg' alternativeText="Cute cat string" />
      </main>
    </div>
  );
}


export default App;

/* Exerc√≠cios Introdu√ß√£o ao React

1- Crie um novo projeto utilizando npx create-react-app.

Solu√ß√£o: npx create-react-app nomeDoSeuApp

2- Crie uma lista de tarefas simples que:
Utilize a fun√ß√£o Task dentro do componente App .
Leia as tarefas de dentro de um Array.
Use a fun√ß√£o map para criar cada item da lista no HTML.

Solu√ß√£o:

    import React from 'react';
    import './App.css';

    const Task = (value) => {
      return (
        <li key={value}>{value}</li>
      );
    }

    const tarefas = ['Acordar', 'Tomar caf√©', 'Escovar os dentes', 'Ir trabalhar'];

    class App extends React.Component {
      render() {
        return (
          <ul>{ tarefas.map(tarefa => Task(tarefa)) }</ul>
        );
      }
    }

    export default App;

3- Crie um novo projeto utilizando npx create-react-app.
a) Na pasta src, crie um novo arquivo chamado Header.jsx , que representar√° o componente Header;
b) No arquivo Header.jsx , crie uma classe React, chamada Header. Essa classe deve renderizar uma tag h1 com o texto 'Conte√∫dos de Front-End'. N√£o esque√ßa de exportar esse componente;
c) No arquivo App.js , importe o componente Header criado anteriormente;
d) Renderize o componente Header no App.js ;
e) Na pasta src, crie um novo arquivo chamado Content.jsx , que representar√° o componente Content ;
f) Dentro do arquivo Content.jsx , crie uma classe React chamada Content ;
g) Ainda no arquivo Content.jsx , adicione o seguinte array. A classe Content deve renderizar o array conteudos com a utiliza√ß√£o da fun√ß√£o map, como visto anteriormente, com o seguinte formato:

O conte√∫do √©: `Nome do Conte√∫do`
Status: `Status do Conte√∫do`
Bloco: `Bloco do Conte√∫do`

Lembre-se de adicionar o atributo 'key' ao elemento pai dessa lista, na renderiza√ß√£o.

h) Exporte o componente Content ;
i) No arquivo App.js , importe o componente Content criado anteriormente;
j)Renderize o componente Content no App.js ;
k)Crie um novo arquivo Footer.jsx ;
l)No arquivo Footer.jsx , crie uma classe chamada Footer .
A classe Footer deve renderizar uma tag h1 com o texto "E isso √© s√≥ o come√ßo...". N√£o esque√ßa de exportar o componente criado.
m)Importe o componente Footer no app.js
n)Renderize o componente Footer no app.js .


Solu√ß√£o - App.js:
      // App.js
      import React from 'react';

      import Header from './Header';
      import Content from './Content';
      import Footer from './Footer';

      import './App.css'

      class App extends React.Component {
        render() {
          return (
            <div>
              <Header />
              <Content />
              <Footer />
            </div>
          );
        }
      }

      export default App;

Solu√ß√£o - Header.jsx:
      // Header.jsx
      import React from 'react';

      class Header extends React.Component {
        render() {
          return (
            <div>
              <h1 className='title'>Conte√∫dos de Front-end</h1>
            </div>
          )
        }
      }

      export default Header;

Solu√ß√£o - Content.jsx:
      // Content.jsx
      import React from 'react';

      const conteudos = [
        {
          conteudo: 'High Order Functions',
          bloco: 8,
          status: 'Aprendido'
        },
        {
          conteudo: 'Composi√ß√£o de Componentes',
          bloco: 11,
          status: 'Aprendendo',
        },
        {
          conteudo: 'Composi√ß√£o de Estados',
          bloco: 12,
          status: 'Aprenderei'
        },
        {
          conteudo: 'Redux',
          bloco: 16,
          status: 'Aprenderei'
        },
      ]
      class Content extends React.Component {
        render() {
          return(
            <div className="content">
              {conteudos.map((elem) => (
                <div key={elem.conteudo} className="card">
                  <h4>{`O conteudo √©: ${elem.conteudo}`}</h4>
                  <p>{`status: ${elem.status}`}</p>
                  <p>{`bloco: ${elem.bloco}`}</p>
                </div>
              ))}
            </div>
          );
        }
      }

      export default Content;

Solu√ß√£o - Footer.jsx:
    // Footer.jsx
      import React from 'react';

      class Footer extends React.Component {
        render() {
          return (
            <footer className='footer'>
              <h1>E isso √© s√≥ o come√ßo...</h1>
            </footer>
          )
        }
      }

      export default Footer; */
      

// COMPONENTES REACT

// Props

/* As props s√£o umas das partes mais importantes de um componente. S√£o por elas que voc√™ passa os valores para o componente, e √© como o torna reutiliz√°vel em diferentes contextos. Elas s√£o como os par√¢metros de uma fun√ß√£o. Observe o exemplo abaixo de como seria uma fun√ß√£o que retornaria a mesma mensagem que o componente Greeting renderiza:
Lembrando que, assim como podemos ter v√°rios par√¢metros em uma fun√ß√£o, conseguimos tamb√©m passar in√∫meras propriedades para o componente por meio das props . Adicionemos o sobrenome da pessoa √† fun√ß√£o e ao componente.
Ao componente Greeting :
import React from 'react';

class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name} {this.props.lastName}</h1>;
  }
}

export default Greeting;
Agora o chamamos dentro do componente App :
import Greeting from './Greeting';

function App() {
  return (
    <main>
      <Greeting name="Samuel" lastName="Silva" />
    </main>
  );
}

export default App;
Observe como a chamada do componente lembra a chamada de uma fun√ß√£o com passagem de par√¢metros! Seu retorno, nesse caso, ser√° <h1>Hello, Samuel Silva</h1>
Voc√™ pode estar pensando: entendi que o uso de props √© importante e como pass√°-las para um componente, mas como funciona exatamente o tr√¢mite das props ? Para compreender isso melhor, vamos analisar com mais cuidado a linha 6 do c√≥digo anterior. Ao atribuir as props name e lastName ao componente Greeting , o React automaticamente monta um objeto contendo as informa√ß√µes passadas e as disponibiliza para o componente montado numa vari√°vel chamada props , num formato parecido com esse:
Esse objeto props , por sua vez, √© passado para o componente Greeting , o qual poder√° resgatar tanto o nome como o sobrenome atrav√©s do this.props.name e this.props.lastName .
const props = { name: 'Samuel', lastName: 'Silva' }

// Para Fixar

Agora vamos fazer este exerc√≠cio de fixa√ß√£o!
Crie uma aplica√ß√£o React na sua m√°quina via create-react-app com o nome fixation-exercises-10-2 . Crie um arquivo Image.js no diret√≥rio src do projeto e copie para esse arquivo o c√≥digo escrito acima. Uma vez feito isso tudo, responda:
1- Qual o nome do componente declarado acima?

Solu√ß√£o: Image

2- Chame o componente Image , de forma que seja mostrada esta imagem, ou o texto Cute cat staring , caso a imagem n√£o consiga ser carregada. */

//Solu√ß√£o: verifique o arquivo Image.jsx e App.js l√° nas primeiras linhas ... up

//Composi√ß√£o de componentes

/* Conforme dito anteriormente, componentes s√£o utilizados para construir uma aplica√ß√£o React. Mas como essa constru√ß√£o √© feita? Em React, faz-se uso de composi√ß√£o de componentes. Mas antes de nos aprofundarmos no assunto, vamos dar um passo para tr√°s e refletir: de forma geral, o que √© composi√ß√£o? S√£o elementos ordenados de forma a constituir algo maior e mais complexo. S√£o, por exemplo, as m√∫sicas em um √°lbum musical, as frutas em uma salada de frutas ou at√© mesmo os inputs , as labels e os buttons em um form . Como voc√™ j√° deve ter percebido, composi√ß√µes j√° fazem parte do nosso cotidiano e, com o uso do React , isso se tornar√° ainda mais comum. Componentes React podem conter um ou mais componentes! Essa √© uma funcionalidade muito importante do React , pois permite a reutiliza√ß√£o e a redu√ß√£o do n√≠vel de complexidade de c√≥digos. Vamos refatorar o c√≥digo abaixo para poder entender, na pr√°tica, sobre composi√ß√£o de componentes e seus benef√≠cios. O c√≥digo a seguir renderiza informa√ß√µes b√°sicas sobre dois √°lbuns do Coldplay.

// src/App.js
import React from 'react';

class App extends React.Component {
  render() {
    // Declara√ß√£o do objeto contendo informa√ß√µes do album01
    const album01 = {
      image: 'https://upload.wikimedia.org/wikipedia/en/thumb/b/b0/Coldplay_-_Mylo_Xyloto.JPG/220px-Coldplay_-_Mylo_Xyloto.JPG',
      title: 'Mylo Xyloto',
      releaseDate: {
        year: '2011',
        month: '10',
        day: '24',
      },
      others: {
        recordCompany: 'Capitol, Parlophone',
        formats: 'CD, digital'
      }
    };

    // Declara√ß√£o do objeto contendo informa√ß√µes do album02
    const album02 = {
      image: 'https://upload.wikimedia.org/wikipedia/pt/thumb/5/5d/Coldplay_-_Ghost_Stories.jpg/220px-Coldplay_-_Ghost_Stories.jpg',
      title: 'Ghost Stories',
      releaseDate: {
        year: '2014',
        month: '05',
        day: '16',
      },
      others: {
        recordCompany: 'Parlophone',
        formats: 'CD, digital'
      }
    };

    // Retorno do que ser√° renderizado
    return (
      <article>
        <section>
          <img src={ album01.image } alt={ album01.title } />
          <h2>{ album01.title }</h2>
          <p>Lan√ßamento: { album01.releaseDate.year }</p>
          <p>Gravadora: { album01.others.recordCompany }</p>
          <p>Formatos: { album01.others.formats }</p>
        </section>
        <section>
          <img src={ album02.image } alt={ album02.title } />
          <h2>{ album02.title }</h2>
          <p>Lan√ßamento: { album02.releaseDate.year }</p>
          <p>Gravadora: { album02.others.recordCompany }</p>
          <p>Formatos: { album02.others.formats }</p>
        </section>
      </article>
    );
  }
}

export default App;

Como voc√™ deve ter notado, o c√≥digo, apesar de conter pouca l√≥gica, est√° extenso . Ambas as sections , apesar de possuirem estruturas semelhantes , renderizam informa√ß√µes diferentes. Imagine o tamanho do c√≥digo se tiv√©ssemos cinco albuns. Ou dez? Percebe-se que, nesse contexto, a section √© uma excelente candidata a ser transformada em um componente reutiliz√°vel , dando in√≠cio √† nossa refatora√ß√£o. Para isso, vamos criar um novo arquivo, chamado Album.js , para armazenar o c√≥digo das sections e adapt√°-lo para fazer a leitura das props que iremos passar futuramente:

// /src/components/Album.js
import React from 'react';

class Album extends React.Component {
  render() {
    return (
      <section>
        <img src={ this.props.album.image } alt={ this.props.album.title } />
        <h2>{ this.props.album.title }</h2>
        <p>{ this.props.album.releaseDate.year }</p>
        <p>
          Lan√ßamento:
          { `${ this.props.album.releaseDate.day }/${ this.props.album.releaseDate.month }/${ this.props.album.releaseDate.year }` }
        </p>
        <p>Gravadora: { this.props.album.others.recordCompany }</p>
        <p>Formatos: { this.props.album.others.formats }</p>
      </section>
    );
  }
}

export default Album;

Em seguida, vamos refatorar o App.js. Para substituirmos as sections pelo novo componente criado, temos que:
1. Import√°-lo no arquivo App.js :
  // src/App.js
  import React from 'react';
  import Album from './components/Album'

2. Passar as props apropriadas:
  // src/App.js
   class App extends React.Component {
       ...
       render() {
         return (
           <div>
             <Album album={ album01 } />
             <Album album={ album02 } />
           </div>
         );
       }
   }
   ...

Desse modo, o componente App.js ficar√° assim:
Veja como o c√≥digo ficou mais limpo e melhor de ler. Aqui, o nosso componente App cont√©m dois componentes Album . Isso √© composi√ß√£o de componentes! Cada um desses componentes recebe um objeto diferente atrav√©s da prop album . Importante notar que os dois componentes irm√£os <Album /> , s√£o, na realidade, o mesmo componente, por√©m reutilizados** com base nas props recebidas. Ou seja, apesar de serem o mesmo componente, renderizam informa√ß√µes diferentes, uma vez que recebem props diferentes.
√Ä primeira vista, componentizar a aplica√ß√£o em uma combina√ß√£o de componentes React pode parecer um processo pesado e complexo. No entanto, conforme a aplica√ß√£o cresce, ter √† disposi√ß√£o uma gama de componentes reutiliz√°veis e de baixo n√≠vel de complexidade individual facilitar√° muito o trabalho!

// src/App.js
import React from 'react';
import Album from './components/Album'

class App extends React.Component {
  render() {
    const album01 = {
      image: 'https://upload.wikimedia.org/wikipedia/en/thumb/b/b0/Coldplay_-_Mylo_Xyloto.JPG/220px-Coldplay_-_Mylo_Xyloto.JPG',
      title: 'Mylo Xyloto',
      releaseDate: {
        year: '2011',
        month: '10',
        day: '24',
      },
      others: {
        recordCompany: 'Capitol, Parlophone',
        formats: 'CD, digital'
      }
    };

    const album02 = {
      image: 'https://upload.wikimedia.org/wikipedia/pt/thumb/5/5d/Coldplay_-_Ghost_Stories.jpg/220px-Coldplay_-_Ghost_Stories.jpg',
      title: 'Ghost Stories',
      releaseDate: {
        year: '2014',
        month: '05',
        day: '16',
      },
      others: {
        recordCompany: 'Parlophone',
        formats: 'CD, digital'
      }
    };

    return (
      <div>
        <Album album={ album01 } />
        <Album album={ album02 } />
      </div>
    );
  }
}

export default App;

Agora, vamos refor√ßar o que voc√™ acabou de aprender com este exemplo:
Analisando o c√≥digo abaixo, temos:
O componente App √© composto por dois componentes UserProfile. Em outras palavras, o componente App √© pai dos dois componentes UserProfile . Al√©m disso, <UserProfile user={joao} /> e <UserProfile user={amelia} /> s√£o componentes irm√£os , e eles dois s√£o filhos do componente App .
O componente UserProfile , por sua vez, possui um componente Image. Ou seja, UserProfile tem Image como filho.
Os dados s√£o repassados de componente pai para componente(s) filho(s). Olhando para o c√≥digo abaixo, o componente App , que √© pai dos dois componentes UserProfile , passa para cada um de seus filhos um objeto com as informa√ß√µes de um perfil. O mesmo pode ser dito olhando para UserProfile , que passa para seu componente filho Image a origem de uma imagem.


// arquivo Image.js
import React from 'react';

class Image extends React.Component {
  render() {
    return <img src={this.props.source} alt={this.props.alternativeText} />;
  }
}

export default Image;

// arquivo UserProfile.js
import React from 'react';
import Image from './Image';

class UserProfile extends React.Component {
  render() {
    return (
      <div>
        <p> {this.props.user.name} </p>
        <p> {this.props.user.email} </p>
        <Image source={this.props.user.avatar} alternativeText="User avatar" />
      </div>
    );
  }
}

export default UserProfile;

// arquivo App.js, criado pelo create-react-app, modificado
import React from 'react';
import './App.css';
import UserProfile from './UserProfile';

class App extends React.Component {
  render() {
    const joao = {
      id: 102,
      name: "Jo√£o",
      email: "joao@gmail.com",
      avatar: "https://cdn.pixabay.com/photo/2016/08/20/05/38/avatar-1606916_640.png"
    };

    const amelia = {
      id: 77,
      name: "Am√©lia",
      email: "amelia@gmail.com",
      avatar: "https://cdn.pixabay.com/photo/2017/01/31/13/05/cameo-2023867_640.png"
    };

    return (
      <div className="App">
        <UserProfile user={joao} />
        <UserProfile user={amelia} />
      </div>
    );
  }
}

export default App;


      