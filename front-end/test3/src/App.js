// src/App.js
import React from 'react';
import { Provider } from 'react-redux';
import { BrowserRouter, Switch, Route } from 'react-router-dom';
import store from './store';
import Home from './Home';
import Login from './Login';
import Register from './Register';
import Clients from './Clients';

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <BrowserRouter>
          <Switch>
            <Route exact path="/" component={Home} />
            <Route path="/login" component={Login} />
            <Route path="/register" component={Register} />
            <Route path="/clients" component={Clients} />
          </Switch>
        </BrowserRouter>
      </Provider>
    );
  }
}

export default App;

/*
  Conte√∫do 15.1 - Introdu√ß√£o ao Redux/15.2 - React com Redux - parte 1 /15.3 - Praticando redux com reac
22/02 - 15.1 - Introdu√ß√£o ao Redux
O que vamos aprender?
No dia de hoje, iremos aprender sobre a biblioteca do Redux . Ela √© utilizada para ajudar no gerenciamento de estado e possui ampla ado√ß√£o entre as pessoas que desenvolvem em React .
Devido ao fato do Redux ser uma biblioteca que tem uma liga√ß√£o muito forte com o React , √© muito comum ver tutoriais e artigos na internet ensinando sobre o Redux j√° com React . Por√©m √© importante salientar que voc√™ n√£o depende do React para utiliz√°-lo. √â poss√≠vel usar o Redux com qualquer outro framework front-end de sua prefer√™ncia, ou at√© mesmo us√°-lo com javascript puro. Os exemplos do conte√∫do de hoje ser√£o todos com javascript puro, dessa forma vamos manter o foco em entender quais s√£o as pe√ßas que comp√µem o Redux .
Agora, vamos entender um pouco mais sobre o que √©, como nasceu e como funciona o Redux !!
Voc√™ ser√° capaz de:
Criar uma Store para armazenar o estado de uma aplica√ß√£o.
Utilizar Reducers e Actions para atualizar a Store
Por que isso √© importante?
Como dito anteriormente, Redux √© uma biblioteca com ampla ado√ß√£o na comunidade React , al√©m de contar com implementa√ß√µes que superam as fronteiras do JavaScript , como arquiteturas para desenvolvimento Android e iOS que se baseiam na estrutura de gerenciamento de estado que o Redux traz.
Imagine que voc√™ precisa transitar diversas informa√ß√µes entre os mais diversos componentes em React. Imagine tamb√©m que estas informa√ß√µes descem n√≠veis e mais n√≠veis na hierarquia de componentes. Voc√™ concorda que esta manipula√ß√£o, quando o estado √© guardado por componente, √© extremamente dif√≠cil? Suponha que voc√™ tenha um componente X que possui um dado que precisa ser repassado para um componente Y , que est√° 10 n√≠veis abaixo da hierarquia de componentes. Voc√™ precisa passar esse dado para v√°rios componentes no meio, sendo que nenhum deles precisa de tal informa√ß√£o! E se voc√™ passar o dado errado de um componente para outro no meio do caminho? Esse problema se chama prop threading (ou drilling), e √© um dos problemas que o Redux ataca! üöÄ
Quando voc√™, enquanto pessoa que desenvolve software, passa a adotar uma abordagem como a do Redux , significa que voc√™ est√° levando a um outro n√≠vel a organiza√ß√£o do seu c√≥digo, endere√ßando a problem√°tica do par√°grafo acima, se preocupando em como transitar as informa√ß√µes entre os componentes e deixando seu c√≥digo mais organizado e com maior confiabilidade.
Pe√ßas do Redux
Como dito anteriormente, Redux √© uma biblioteca que pode ser utilizada com algum framework front-end ou com javascript puro (tamb√©m conhecido como Vanilla JS). Hoje vamos focar em entender o Redux , por isso vamos usar o javascript puro, mas n√£o se preocupe, nos pr√≥ximos dias vamos aprender como integrar o Redux e o React .
√â importante dizer que o Redux vem para resolver problemas de fluxo de informa√ß√£o dentro da sua aplica√ß√£o, assim como o gerenciamento de seus dados. Voc√™ ver√° que ele ajuda na comunica√ß√£o entre componentes.



Assim como na vida cotidiana ou no trabalho existem v√°rios fluxos e rotinas que podemos chamar de "modelo de neg√≥cio". Por exemplo, quando voc√™ vai √† padaria, quais s√£o os processos que ocorrem desde a hora que voc√™ entra no estabelecimento at√© sair? Existe todo um fluxo de a√ß√µes e divis√µes de responsabilidades das pessoas funcion√°rias e clientes, correto?
Por essa perspectiva, podemos dizer que existe muita similaridade entre as nossas rotinas e os fluxos de uma aplica√ß√£o. Cada componente, estado e fun√ß√£o t√™m seus pap√©is e demandas que precisam ser executadas conforme o "modelo de neg√≥cio" do sistema. Isso envolve transmiss√£o de informa√ß√£o - de componentes pais para componentes filhos, filhos dos filhos, filhos para pais, enfim! N√≥s j√° vimos que, quando nossa aplica√ß√£o cresce, a transmiss√£o de informa√ß√µes come√ßa a ficar complicada de se fazer, n√£o √© mesmo?
O Redux existe para auxiliar o fluxo de dados dentro da sua aplica√ß√£o! Com ele voc√™ consegue ter, al√©m do estado local de cada componente, um estado global , acess√≠vel a todos os componentes , onde se pode armazenar e recuperar informa√ß√µes que precisam ser compartilhadas. Essa ferramenta pode ser dividida em tr√™s partes principais - actions , stores e reducers .
Podemos dizer que cada parte tem suas responsabilidades bem definidas, vamos explicar brevemente uma a uma e depois faremos uma analogia para ficar mais f√°cil compreender.
Actions
As actions , como o nome indica, s√£o as poss√≠veis a√ß√µes que seu sistema pode executar na store . Elas atuam como uma regra de neg√≥cio para manter os dados dos estados da aplica√ß√£o e as suas mudan√ßas previs√≠veis e consistentes. √â bem comum ouvirmos que as actions s√£o inten√ß√µes (grave esse termo) de mudan√ßa de estado (para usar um termo mais t√©cnico).
Store
A store √© onde o estado da sua aplica√ß√£o fica registrado e protegido. As mudan√ßas ou consultas feitas na store precisam estar definidas anteriormente numa action . Isso garante a integridade dos dados, como explicado anteriormente.
Reducers
Os reducers s√£o respons√°veis por manipular a store seguindo as regras definidas pelas actions . Os reducers s√£o importantes para evitar a manipula√ß√£o direta da store e facilitam a manuten√ß√£o do c√≥digo.
Entendendo actions, stores e reducers
Para facilitar o entendimento do funcionamento das actions , stores e reducers , podemos usar algumas analogias com o nosso dia-a-dia. Voltemos ao exemplo da padaria.
Se o Redux fosse uma padaria, a store seria o forno de assar p√£o, o reducer seria a pessoa que faz o p√£o, as actions seriam as responsabilidades de quem faz o p√£o e o (a) cliente seria a aplica√ß√£o ou o componente (no caso do React) que precisasse de um servi√ßo.
Para a padaria funcionar bem, √© importante que cada pessoa e equipamento tenham suas responsabilidades bem definidas, sendo assim, suponhamos que o (a) cliente queira comprar p√£o.
Primeiramente ele (a) entra na padaria com a inten√ß√£o de comprar o p√£o - isso poderia ser assimilado a uma action - ao requisitar pra quem faz o p√£o, a inten√ß√£o √© executada.
Logo ap√≥s o pedido, a pessoa que faz o p√£o - que na nossa analogia √© o reducer - vai at√© o forno ( store ) e finalmente retira um p√£o de l√°. Note que agora o estado do forno mudou, ele possui um p√£o a menos; o pagamento √© feito e o fluxo encerra!
Observe que durante todo o processo, cada agente cumpriu seu papel e n√£o houve conflitos no processo! Exatamente para isso que o Redux foi desenvolvido assim, com as partes bem definidas.
Agora vamos praticar os nossos conceitos e colocar a m√£o na massa. Obs: podemos testar os c√≥digos a seguir com o Code Runner (abuse do console.log e do debug) Primeiro vamos criar a nossa aplica√ß√£o e instalar o Redux executando os comandos abaixo no terminal:
npm init -y
npm install redux
Ap√≥s a instala√ß√£o, vamos criar uma arquivo index.js e importar o Redux:
const Redux = require(‚Äòredux‚Äô);
Agora vamos criar uma pequena store e vamos acess√°-la, retornando o estado que guardamos nela e criando uma action para alter√°-lo.
Primeiro vamos criar e retornar a nossa store :
const store = Redux.createStore();
Uma store s√≥ funciona se passarmos uma fun√ß√£o que ser√° respons√°vel por alterar os dados dela: o reducer . O reducer recebe como primeiro par√¢metro um state, sendo que seu retorno substituir√° o state da store . Para fins did√°ticos, iremos montar o reducer no mesmo arquivo, mas a boa pr√°tica √© fazer em um arquivo separado.
const reducer = (state) => {
return state;
};

const store = Redux.createStore(reducer);
Inicialmente o state vem como undefined , e n√£o queremos isto. Ent√£o iremos atribuir a ele um valor padr√£o.
const reducer = (state = { login: false, email: "" }) => {
return state;
};

const store = Redux.createStore(reducer);
Agora sim, nosso reducer est√° pronto! Mas o que acontece se nosso valor inicial (que podemos chamar de estado inicial) ficar muito grande? Nosso c√≥digo vai ficar "bagun√ßado" n√©?! Ent√£o podemos reescrev√™-lo.
const ESTADO_INICIAL = {
login: false,
email: "",
};

const reducer = (state = ESTADO_INICIAL) => {
return state;
};

const store = Redux.createStore(reducer);
Nosso reducer est√° montado e possui o nosso estado inicial da aplica√ß√£o. Vamos verificar o output quando acessamos a store com a fun√ß√£o getState().
const ESTADO_INICIAL = {
  login: false,
  email: "",
};

const reducer = (state = ESTADO_INICIAL) => {
  return state;
};

const store = Redux.createStore(reducer);

console.log(store.getState());

//{ login: false, email: '' }

Mas e se precisarmos alterar o dado que est√° no estado? A pe√ßa que tem esta fun√ß√£o √© a action ! Uma action √© um objeto JavaScript que tem pelo menos uma propriedade type e √© respons√°vel por comunicar ao reducer uma mudan√ßa a ser feita na store . Em Redux n√≥s utilizamos o actionCreator , que nada mais do que uma fun√ß√£o que retorna uma action . Para o nosso exemplo, iremos usar uma actionCreator chamada fazerLogin . Esta fun√ß√£o ir√° enviar uma action ao nosso reducer , com a inten√ß√£o de alterar para verdadeiro a chave login da nossa store.
const fazerLogin = (email) => ({
  type: "LOGIN",
  email});

const ESTADO_INICIAL = {
  login: false,
  email: "",
};

const reducer = (state = ESTADO_INICIAL, action) => {
  switch (action.type) {
    case "LOGIN":
      return {
        ...state,
        login: !state.login,
        email: action.email,
      };
    default: // No switch, sempre precisamos ter um caso default!
      return state;
  }
};

const store = Redux.createStore(reducer);

store.dispatch(fazerLogin("alguem@email.com"));

console.log(store.getState());

// { login: true, email: 'alguem@email.com' }
Conseguimos mudar o estado da store utilizando o dispatch . Ele despacha nossa action para dentro do reducer , para que nosso estado seja alterado. Note, tamb√©m, que o reducer retorna todo o estado , e n√£o somente o que ser√° modificado. Retornamos, ent√£o, um objeto que cont√©m todos os dados atuais do estado { ...state } mais as chaves que ser√£o modificadas pela action! Mas e se tivermos mais de um reducer?
Combinando Reducers
Como podemos notar, o Redux auxilia bastante o desenvolvimento do nosso projeto, especialmente quando a aplica√ß√£o se torna muito complexa.
Imagine que a sua aplica√ß√£o tenha dezenas de componentes e actions diferentes com l√≥gicas espec√≠ficas e complicadas. Agora suponha que voc√™ precise organizar tudo isso em v√°rios reducers , e pior, depois ainda precise passar todos os reducers para um √∫nico store ! :fearful:
O problema que voc√™ pode j√° ter notado √© justamente esse, como poder√≠amos unir v√°rios reducers numa aplica√ß√£o que, normalmente, possui apenas um store?
O Redux j√° possui uma fun√ß√£o para resolver isso, a combineReducers() . Essa fun√ß√£o recebe um objeto como par√¢metro contendo cada um dos seus reducers como elementos, por exemplo:
// Arquivo index.js

import { combineReducers } from 'redux';
import meuReducer from './meuReducer';
import meuOutroReducer from './meuOutroReducer';

const reducerCombinado = combineReducers({
meuReducer,
meuOutroReducer});

export default reducerCombinado;
Agora basta fazer a sua importa√ß√£o no seu store para a m√°gica acontecer!
import { createStore } from 'redux';
// Importando o reducer combinado que fizemos logo acima
import reducerCombinado from './reducers/index';

const store = createStore(reducerCombinado);
...
Vamos imprimir essa store com os reducers combinados para verificar o output :
import { createStore } from 'redux';
// Importando o reducer combinado que fizemos logo acima
import reducerCombinado from './reducers/index';

const store = createStore(reducerCombinado);

console.log(store.getState())

//{
// meuReducer: {/_estado do meuReducer_/},
// meuOutroReducer: {/_estado do meuOutroReducer_/,}
//}
‚Ä¶
Agora temos acesso a ambos reducers armazenados na store. Em reducers combinados, as actions podem ser escritas normalmente, pois todos eles escutam a action e s√≥ executam a mudan√ßa quando a action.type da a√ß√£o √© reconhecida. Ou seja, cada action √© enviada para todos os reducers , independente se ele a utiliza ou n√£o, cabendo ao switch administrar a execu√ß√£o da action , com base na propriedade type .
Um detalhe importante √© a forma que ocorre o acesso √†s informa√ß√µes do estado. Considerando que s√≥ existisse o meuReducer e que temos uma chave email nele, para acessar o valor dessa chave bastava utilizar state.email , j√° que o meuReducer era acessado diretamente. Agora, ao utilizar a combina√ß√£o, √© preciso especificar qual o reducer que gerencia este estado, ent√£o acessar√≠amos atrav√©s de state.meuReducer.email . √â como se cada reducer fosse uma gaveta de um arquivo (a store) e, para acessar os dados da gaveta, √© preciso abri-la!
Voc√™ pode conferir uma explica√ß√£o mais detalhada neste, t√≥pico da documenta√ß√£o sobre a combina√ß√£o de m√∫ltiplos reducers . Guarde para ler depois!
Outra funcionalidade bastante √∫til que iremos aprender hoje √© o subscribe . Ele adiciona um listener que executar√° uma callback toda vez que uma action for despachada. Para ilustrar, vamos usar o subscribe junto com nossa store . No nosso exemplo, toda vez que a store sofrer alguma altera√ß√£o, pegamos nosso estado e fazemos um console.log dele.
import { createStore } from 'redux';
// Importando o reducer combinado que fizemos logo acima
import reducerCombinado from './reducers/index';

const store = createStore(reducerCombinado);

store.subscribe(() => {
  console.log(store.getState());
});
‚Ä¶
Ao vivo:









state =  estado dentro do store, subscribe = s√≥ pra ser avisado que algo mudou e a partir dai voc√™ faz uma opera√ß√£o(executa uma fun√ß√£o), getstate = pega o estado, dispatch = √© equivalente ao setState do react, a escrita acontece atrav√©s de um dispatch e no dispatch n√≥s passamos o que deveria ser a muni√ß√£o, no caso action( o que e quem devemos mudar, √© um objeto no qual diz qual a inten√ß√£o(type) do que queremos fazer dentro da store, 
reducer 1- √© sempre uma fun√ß√£o, 2- ele vai receber state e action, 3- ele sempre vai devolver um novo estado, ele sempre tem que ser um objeto novo
Exemplo de redux da aula ao vivo:
<!DOCTYPE html>
<html>

<head>
  <title>Redux dark mode example</title>
  <script src="https://unpkg.com/redux@latest/dist/redux.min.js"></script>
  <script defer src="script.js"></script>
  <link rel="stylesheet" href="./style.css" />
</head>

<body>
  <main id="wrapper" class="light">
    <img src="img/light.png" alt="lampada" />
    <button id="light-switch">
      <img src="img/interruptor.png" alt="interruptor" />
    </button>
  </main>

  <script>

    // ============ REDUCER =============
    const initialState = false;
    const reducer = function (state = initialState, action) {
      let newState = state;
      if (action.type === 'CHANGE_MODE')
        newState = action.payload;
      // modifica√ß√µes
      return newState;
    }

    // ============ Armazenamento =============
    //como podemos criar uma store?

    const store = Redux.createStore(reducer);

    // ============ LEITURA =============
    // como ler uma propriedade do state?
    function changeMode() {
      const lightMode = store.getState()
      if (lightMode) {
        document.getElementById('wrapper').className = 'light'
        console.log('light')
      }
      else {
        console.log('dark')
        document.getElementById('wrapper').className = 'dark'
      }
    }

    changeMode();
    store.subscribe(changeMode);

    // ============ ESCRITA =============
    document.getElementById('light-switch').addEventListener("click", () => {
      // ao clicar precisamos alterar o dado
      store.dispatch({ type: 'CHANGE_MODE', payload: !store.getState() });
    });


  </script>


</body>

</html>

// 

*/