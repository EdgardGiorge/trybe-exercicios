// src/App.js
import React from 'react';
import { Provider } from 'react-redux';
import { BrowserRouter, Switch, Route } from 'react-router-dom';
import store from './store';
import Home from './Home';
import Login from './Login';
import Register from './Register';
import Clients from './Clients';

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <BrowserRouter>
          <Switch>
            <Route exact path="/" component={Home} />
            <Route path="/login" component={Login} />
            <Route path="/register" component={Register} />
            <Route path="/clients" component={Clients} />
          </Switch>
        </BrowserRouter>
      </Provider>
    );
  }
}

export default App;

/*
            Conte√∫do 

            15.1 - Introdu√ß√£o ao Redux/15.2 - React com Redux - parte 1 /15.3 - Praticando redux com reac
22/02 - 15.1 - Introdu√ß√£o ao Redux
O que vamos aprender?
No dia de hoje, iremos aprender sobre a biblioteca do Redux . Ela √© utilizada para ajudar no gerenciamento de estado e possui ampla ado√ß√£o entre as pessoas que desenvolvem em React .
Devido ao fato do Redux ser uma biblioteca que tem uma liga√ß√£o muito forte com o React , √© muito comum ver tutoriais e artigos na internet ensinando sobre o Redux j√° com React . Por√©m √© importante salientar que voc√™ n√£o depende do React para utiliz√°-lo. √â poss√≠vel usar o Redux com qualquer outro framework front-end de sua prefer√™ncia, ou at√© mesmo us√°-lo com javascript puro. Os exemplos do conte√∫do de hoje ser√£o todos com javascript puro, dessa forma vamos manter o foco em entender quais s√£o as pe√ßas que comp√µem o Redux .
Agora, vamos entender um pouco mais sobre o que √©, como nasceu e como funciona o Redux !!
Voc√™ ser√° capaz de:
Criar uma Store para armazenar o estado de uma aplica√ß√£o.
Utilizar Reducers e Actions para atualizar a Store
Por que isso √© importante?
Como dito anteriormente, Redux √© uma biblioteca com ampla ado√ß√£o na comunidade React , al√©m de contar com implementa√ß√µes que superam as fronteiras do JavaScript , como arquiteturas para desenvolvimento Android e iOS que se baseiam na estrutura de gerenciamento de estado que o Redux traz.
Imagine que voc√™ precisa transitar diversas informa√ß√µes entre os mais diversos componentes em React. Imagine tamb√©m que estas informa√ß√µes descem n√≠veis e mais n√≠veis na hierarquia de componentes. Voc√™ concorda que esta manipula√ß√£o, quando o estado √© guardado por componente, √© extremamente dif√≠cil? Suponha que voc√™ tenha um componente X que possui um dado que precisa ser repassado para um componente Y , que est√° 10 n√≠veis abaixo da hierarquia de componentes. Voc√™ precisa passar esse dado para v√°rios componentes no meio, sendo que nenhum deles precisa de tal informa√ß√£o! E se voc√™ passar o dado errado de um componente para outro no meio do caminho? Esse problema se chama prop threading (ou drilling), e √© um dos problemas que o Redux ataca! üöÄ
Quando voc√™, enquanto pessoa que desenvolve software, passa a adotar uma abordagem como a do Redux , significa que voc√™ est√° levando a um outro n√≠vel a organiza√ß√£o do seu c√≥digo, endere√ßando a problem√°tica do par√°grafo acima, se preocupando em como transitar as informa√ß√µes entre os componentes e deixando seu c√≥digo mais organizado e com maior confiabilidade.
Pe√ßas do Redux
Como dito anteriormente, Redux √© uma biblioteca que pode ser utilizada com algum framework front-end ou com javascript puro (tamb√©m conhecido como Vanilla JS). Hoje vamos focar em entender o Redux , por isso vamos usar o javascript puro, mas n√£o se preocupe, nos pr√≥ximos dias vamos aprender como integrar o Redux e o React .
√â importante dizer que o Redux vem para resolver problemas de fluxo de informa√ß√£o dentro da sua aplica√ß√£o, assim como o gerenciamento de seus dados. Voc√™ ver√° que ele ajuda na comunica√ß√£o entre componentes.



Assim como na vida cotidiana ou no trabalho existem v√°rios fluxos e rotinas que podemos chamar de "modelo de neg√≥cio". Por exemplo, quando voc√™ vai √† padaria, quais s√£o os processos que ocorrem desde a hora que voc√™ entra no estabelecimento at√© sair? Existe todo um fluxo de a√ß√µes e divis√µes de responsabilidades das pessoas funcion√°rias e clientes, correto?
Por essa perspectiva, podemos dizer que existe muita similaridade entre as nossas rotinas e os fluxos de uma aplica√ß√£o. Cada componente, estado e fun√ß√£o t√™m seus pap√©is e demandas que precisam ser executadas conforme o "modelo de neg√≥cio" do sistema. Isso envolve transmiss√£o de informa√ß√£o - de componentes pais para componentes filhos, filhos dos filhos, filhos para pais, enfim! N√≥s j√° vimos que, quando nossa aplica√ß√£o cresce, a transmiss√£o de informa√ß√µes come√ßa a ficar complicada de se fazer, n√£o √© mesmo?
O Redux existe para auxiliar o fluxo de dados dentro da sua aplica√ß√£o! Com ele voc√™ consegue ter, al√©m do estado local de cada componente, um estado global , acess√≠vel a todos os componentes , onde se pode armazenar e recuperar informa√ß√µes que precisam ser compartilhadas. Essa ferramenta pode ser dividida em tr√™s partes principais - actions , stores e reducers .
Podemos dizer que cada parte tem suas responsabilidades bem definidas, vamos explicar brevemente uma a uma e depois faremos uma analogia para ficar mais f√°cil compreender.
Actions
As actions , como o nome indica, s√£o as poss√≠veis a√ß√µes que seu sistema pode executar na store . Elas atuam como uma regra de neg√≥cio para manter os dados dos estados da aplica√ß√£o e as suas mudan√ßas previs√≠veis e consistentes. √â bem comum ouvirmos que as actions s√£o inten√ß√µes (grave esse termo) de mudan√ßa de estado (para usar um termo mais t√©cnico).
Store
A store √© onde o estado da sua aplica√ß√£o fica registrado e protegido. As mudan√ßas ou consultas feitas na store precisam estar definidas anteriormente numa action . Isso garante a integridade dos dados, como explicado anteriormente.
Reducers
Os reducers s√£o respons√°veis por manipular a store seguindo as regras definidas pelas actions . Os reducers s√£o importantes para evitar a manipula√ß√£o direta da store e facilitam a manuten√ß√£o do c√≥digo.
Entendendo actions, stores e reducers
Para facilitar o entendimento do funcionamento das actions , stores e reducers , podemos usar algumas analogias com o nosso dia-a-dia. Voltemos ao exemplo da padaria.
Se o Redux fosse uma padaria, a store seria o forno de assar p√£o, o reducer seria a pessoa que faz o p√£o, as actions seriam as responsabilidades de quem faz o p√£o e o (a) cliente seria a aplica√ß√£o ou o componente (no caso do React) que precisasse de um servi√ßo.
Para a padaria funcionar bem, √© importante que cada pessoa e equipamento tenham suas responsabilidades bem definidas, sendo assim, suponhamos que o (a) cliente queira comprar p√£o.
Primeiramente ele (a) entra na padaria com a inten√ß√£o de comprar o p√£o - isso poderia ser assimilado a uma action - ao requisitar pra quem faz o p√£o, a inten√ß√£o √© executada.
Logo ap√≥s o pedido, a pessoa que faz o p√£o - que na nossa analogia √© o reducer - vai at√© o forno ( store ) e finalmente retira um p√£o de l√°. Note que agora o estado do forno mudou, ele possui um p√£o a menos; o pagamento √© feito e o fluxo encerra!
Observe que durante todo o processo, cada agente cumpriu seu papel e n√£o houve conflitos no processo! Exatamente para isso que o Redux foi desenvolvido assim, com as partes bem definidas.
Agora vamos praticar os nossos conceitos e colocar a m√£o na massa. Obs: podemos testar os c√≥digos a seguir com o Code Runner (abuse do console.log e do debug) Primeiro vamos criar a nossa aplica√ß√£o e instalar o Redux executando os comandos abaixo no terminal:
npm init -y
npm install redux
Ap√≥s a instala√ß√£o, vamos criar uma arquivo index.js e importar o Redux:
const Redux = require(‚Äòredux‚Äô);
Agora vamos criar uma pequena store e vamos acess√°-la, retornando o estado que guardamos nela e criando uma action para alter√°-lo.
Primeiro vamos criar e retornar a nossa store :
const store = Redux.createStore();
Uma store s√≥ funciona se passarmos uma fun√ß√£o que ser√° respons√°vel por alterar os dados dela: o reducer . O reducer recebe como primeiro par√¢metro um state, sendo que seu retorno substituir√° o state da store . Para fins did√°ticos, iremos montar o reducer no mesmo arquivo, mas a boa pr√°tica √© fazer em um arquivo separado.
const reducer = (state) => {
return state;
};

const store = Redux.createStore(reducer);
Inicialmente o state vem como undefined , e n√£o queremos isto. Ent√£o iremos atribuir a ele um valor padr√£o.
const reducer = (state = { login: false, email: "" }) => {
return state;
};

const store = Redux.createStore(reducer);
Agora sim, nosso reducer est√° pronto! Mas o que acontece se nosso valor inicial (que podemos chamar de estado inicial) ficar muito grande? Nosso c√≥digo vai ficar "bagun√ßado" n√©?! Ent√£o podemos reescrev√™-lo.
const ESTADO_INICIAL = {
login: false,
email: "",
};

const reducer = (state = ESTADO_INICIAL) => {
return state;
};

const store = Redux.createStore(reducer);
Nosso reducer est√° montado e possui o nosso estado inicial da aplica√ß√£o. Vamos verificar o output quando acessamos a store com a fun√ß√£o getState().
const ESTADO_INICIAL = {
  login: false,
  email: "",
};

const reducer = (state = ESTADO_INICIAL) => {
  return state;
};

const store = Redux.createStore(reducer);

console.log(store.getState());

//{ login: false, email: '' }

Mas e se precisarmos alterar o dado que est√° no estado? A pe√ßa que tem esta fun√ß√£o √© a action ! Uma action √© um objeto JavaScript que tem pelo menos uma propriedade type e √© respons√°vel por comunicar ao reducer uma mudan√ßa a ser feita na store . Em Redux n√≥s utilizamos o actionCreator , que nada mais do que uma fun√ß√£o que retorna uma action . Para o nosso exemplo, iremos usar uma actionCreator chamada fazerLogin . Esta fun√ß√£o ir√° enviar uma action ao nosso reducer , com a inten√ß√£o de alterar para verdadeiro a chave login da nossa store.
const fazerLogin = (email) => ({
  type: "LOGIN",
  email});

const ESTADO_INICIAL = {
  login: false,
  email: "",
};

const reducer = (state = ESTADO_INICIAL, action) => {
  switch (action.type) {
    case "LOGIN":
      return {
        ...state,
        login: !state.login,
        email: action.email,
      };
    default: // No switch, sempre precisamos ter um caso default!
      return state;
  }
};

const store = Redux.createStore(reducer);

store.dispatch(fazerLogin("alguem@email.com"));

console.log(store.getState());

// { login: true, email: 'alguem@email.com' }
Conseguimos mudar o estado da store utilizando o dispatch . Ele despacha nossa action para dentro do reducer , para que nosso estado seja alterado. Note, tamb√©m, que o reducer retorna todo o estado , e n√£o somente o que ser√° modificado. Retornamos, ent√£o, um objeto que cont√©m todos os dados atuais do estado { ...state } mais as chaves que ser√£o modificadas pela action! Mas e se tivermos mais de um reducer?
Combinando Reducers
Como podemos notar, o Redux auxilia bastante o desenvolvimento do nosso projeto, especialmente quando a aplica√ß√£o se torna muito complexa.
Imagine que a sua aplica√ß√£o tenha dezenas de componentes e actions diferentes com l√≥gicas espec√≠ficas e complicadas. Agora suponha que voc√™ precise organizar tudo isso em v√°rios reducers , e pior, depois ainda precise passar todos os reducers para um √∫nico store ! :fearful:
O problema que voc√™ pode j√° ter notado √© justamente esse, como poder√≠amos unir v√°rios reducers numa aplica√ß√£o que, normalmente, possui apenas um store?
O Redux j√° possui uma fun√ß√£o para resolver isso, a combineReducers() . Essa fun√ß√£o recebe um objeto como par√¢metro contendo cada um dos seus reducers como elementos, por exemplo:
// Arquivo index.js

import { combineReducers } from 'redux';
import meuReducer from './meuReducer';
import meuOutroReducer from './meuOutroReducer';

const reducerCombinado = combineReducers({
meuReducer,
meuOutroReducer});

export default reducerCombinado;
Agora basta fazer a sua importa√ß√£o no seu store para a m√°gica acontecer!
import { createStore } from 'redux';
// Importando o reducer combinado que fizemos logo acima
import reducerCombinado from './reducers/index';

const store = createStore(reducerCombinado);
...
Vamos imprimir essa store com os reducers combinados para verificar o output :
import { createStore } from 'redux';
// Importando o reducer combinado que fizemos logo acima
import reducerCombinado from './reducers/index';

const store = createStore(reducerCombinado);

console.log(store.getState())

//{
// meuReducer: {/_estado do meuReducer_/},
// meuOutroReducer: {/_estado do meuOutroReducer_/,}
//}
‚Ä¶
Agora temos acesso a ambos reducers armazenados na store. Em reducers combinados, as actions podem ser escritas normalmente, pois todos eles escutam a action e s√≥ executam a mudan√ßa quando a action.type da a√ß√£o √© reconhecida. Ou seja, cada action √© enviada para todos os reducers , independente se ele a utiliza ou n√£o, cabendo ao switch administrar a execu√ß√£o da action , com base na propriedade type .
Um detalhe importante √© a forma que ocorre o acesso √†s informa√ß√µes do estado. Considerando que s√≥ existisse o meuReducer e que temos uma chave email nele, para acessar o valor dessa chave bastava utilizar state.email , j√° que o meuReducer era acessado diretamente. Agora, ao utilizar a combina√ß√£o, √© preciso especificar qual o reducer que gerencia este estado, ent√£o acessar√≠amos atrav√©s de state.meuReducer.email . √â como se cada reducer fosse uma gaveta de um arquivo (a store) e, para acessar os dados da gaveta, √© preciso abri-la!
Voc√™ pode conferir uma explica√ß√£o mais detalhada neste, t√≥pico da documenta√ß√£o sobre a combina√ß√£o de m√∫ltiplos reducers . Guarde para ler depois!
Outra funcionalidade bastante √∫til que iremos aprender hoje √© o subscribe . Ele adiciona um listener que executar√° uma callback toda vez que uma action for despachada. Para ilustrar, vamos usar o subscribe junto com nossa store . No nosso exemplo, toda vez que a store sofrer alguma altera√ß√£o, pegamos nosso estado e fazemos um console.log dele.
import { createStore } from 'redux';
// Importando o reducer combinado que fizemos logo acima
import reducerCombinado from './reducers/index';

const store = createStore(reducerCombinado);

store.subscribe(() => {
  console.log(store.getState());
});
‚Ä¶
Ao vivo:

state =  estado dentro do store, subscribe = s√≥ pra ser avisado que algo mudou e a partir dai voc√™ faz uma opera√ß√£o(executa uma fun√ß√£o), getstate = pega o estado, dispatch = √© equivalente ao setState do react, a escrita acontece atrav√©s de um dispatch e no dispatch n√≥s passamos o que deveria ser a muni√ß√£o, no caso action( o que e quem devemos mudar, √© um objeto no qual diz qual a inten√ß√£o(type) do que queremos fazer dentro da store, 
reducer 1- √© sempre uma fun√ß√£o, 2- ele vai receber state e action, 3- ele sempre vai devolver um novo estado, ele sempre tem que ser um objeto novo
Exemplo de redux da aula ao vivo:
<!DOCTYPE html>
<html>

<head>
  <title>Redux dark mode example</title>
  <script src="https://unpkg.com/redux@latest/dist/redux.min.js"></script>
  <script defer src="script.js"></script>
  <link rel="stylesheet" href="./style.css" />
</head>

<body>
  <main id="wrapper" class="light">
    <img src="img/light.png" alt="lampada" />
    <button id="light-switch">
      <img src="img/interruptor.png" alt="interruptor" />
    </button>
  </main>

  <script>

    // ============ REDUCER =============
    const initialState = false;
    const reducer = function (state = initialState, action) {
      let newState = state;
      if (action.type === 'CHANGE_MODE')
        newState = action.payload;
      // modifica√ß√µes
      return newState;
    }

    // ============ Armazenamento =============
    //como podemos criar uma store?

    const store = Redux.createStore(reducer);

    // ============ LEITURA =============
    // como ler uma propriedade do state?
    function changeMode() {
      const lightMode = store.getState()
      if (lightMode) {
        document.getElementById('wrapper').className = 'light'
        console.log('light')
      }
      else {
        console.log('dark')
        document.getElementById('wrapper').className = 'dark'
      }
    }

    changeMode();
    store.subscribe(changeMode);

    // ============ ESCRITA =============
    document.getElementById('light-switch').addEventListener("click", () => {
      // ao clicar precisamos alterar o dado
      store.dispatch({ type: 'CHANGE_MODE', payload: !store.getState() });
    });


  </script>


</body>

</html>

//            23/02 - 15.2 - React com Redux - parte 1

Por que isso √© importante?
Redux √© uma ferramenta para gerenciar o estado de uma aplica√ß√£o JavaScript . Antes de entender o porqu√™ de utilizar React com Redux , deve-se entender o porqu√™ de utilizarmos uma biblioteca externa para controlar e gerenciar o estado de uma aplica√ß√£o.
A maioria das bibliotecas, como React , Angular etc, possuem uma forma interna de gerenciar o estado da aplica√ß√£o sem o aux√≠lio ou necessidade de uma ferramenta externa. Isto funciona bem para aplica√ß√µes que possuem poucos componentes mas, √† medida que a aplica√ß√£o cresce, o gerenciamento de estados compartilhados entre componentes torna-se uma tarefa complicada e desgastante.
Em uma aplica√ß√£o em que muitos dados s√£o compartilhados entre componentes, pode n√£o ficar muito n√≠tido onde cada dado deve ficar. Al√©m disso, algumas vezes pode-se criar uma implementa√ß√£o que n√£o √© ideal. Por exemplo: em uma aplica√ß√£o onde √© necess√°rio compartilhar os dados com v√°rios componentes filhos, necessariamente esse dado deve ficar no componente pai. Aplica√ß√µes maiores tamb√©m apresentam a necessidade de compartilhar dados entre componentes que n√£o est√£o na mesma √°rvore de componentes. Para esse compartilhamento ser feito, esse dado ter√° de passar atrav√©s de muitos componentes at√© chegar em seu componente alvo.
Com todos estes exemplos, fica n√≠tido que o gerenciamento de estado torna-se confuso √† medida que a aplica√ß√£o cresce. Por isso, utilizar uma ferramenta externa para gerenciar o estado, como o Redux , facilitar√° o desenvolvimento e crescimento das aplica√ß√µes.
Antes de come√ßar o dia
Hoje √© um dia muito importante para sua trilha de desenvolvimento web full-stack e voc√™ precisa se empenhar para absorver cada trecho do conte√∫do do dia, portanto, antes de prosseguir com o conte√∫do:
1 - Acesse a URL:  https://github.com/tryber/exercises-redux-step-by-step 
Fa√ßa um fork do reposit√≥rio para o seu reposit√≥rio GitHub.
2 - Clique no bot√£o "Fork" do reposit√≥rio.
3 - Selecione seu usu√°rio do GitHub.
4 - Escolha a URL remota (SSH, HTTPS) para fazer o clone do reposit√≥rio.
5 - Agora √© s√≥ dar um git clone na sua m√°quina e come√ßar a codar.
Relembrando conceitos
Redux √© uma biblioteca que pode ser utilizada com React , Angular , Vue , Ember e JavaScript puro, para dar s√≥ alguns exemplos. √â muito comum o uso de Redux com React , apesar de serem ferramentas independentes .
Quando voc√™ utiliza Redux com algum UI framework ( User Interface Framework ), √© comum usar alguma biblioteca para realizar a conex√£o ( binding ) entre o Redux e o framework . No caso do React , a biblioteca React Redux √© quem faz essa conex√£o e pode ser instalada em sua aplica√ß√£o atrav√©s do comando:
npm install react-redux
React Redux √© a biblioteca oficial para realizar a conex√£o entre React e Redux
Vamos relembrar alguns conceitos:
Store
√â onde vamos armazenar todos os dados compartilhados da aplica√ß√£o e √© representado por um objeto JavaScript . O State √© armazenado no Store do Redux.
Action
√â um objeto JavaScript que representa alguma mudan√ßa/altera√ß√£o que precisa acontecer no State.
Reducer
√â uma fun√ß√£o JavaScript que recebe o estado atual ( current state ) e a a√ß√£o corrente ( current action ) e retorna um novo estado ( new state ). √â responsabilidade dessa fun√ß√£o decidir o que acontecer√° com o estado dada uma a√ß√£o( action ).
Dispatch
√â uma fun√ß√£o que envia uma a√ß√£o ( action ) para processamento.
Configurando Redux com React
Agora que relembramos todos estes conceitos, podemos criar e configurar uma aplica√ß√£o React que utilizar√° Redux.
Primeiro, criamos nossa aplica√ß√£o React:
npx create-react-app my-app
Depois, instalamos as depend√™ncias:
npm install redux react-redux
redux √© a biblioteca que possui a implementa√ß√£o do Redux ;
react-redux √© a biblioteca que realiza a conex√£o entre o Redux e o React .
Agora, imagine que vamos implementar uma solu√ß√£o para salvar uma lista de itens que podem ser adicionados por quem utilizar a aplica√ß√£o. Inicialmente esta lista estar√° vazia. A primeira coisa que precisamos fazer, ao implementar o Redux em nossa aplica√ß√£o React, √© criar a nossa fonte universal de estados, o Store.
store
Vamos passar pelas pe√ßas de uma configura√ß√£o b√°sica react-redux e come√ßaremos pela store. N√£o se preocupe em testar os c√≥digos nesse momento e sim em absorver como as pe√ßas funcionam em conjunto, voc√™ ter√° muitas oportunidades de praticar essa configura√ß√£o com os exerc√≠cios do reposit√≥rio que voc√™ clonou no inicio da aula de hoje .
Vamos pensar na cria√ß√£o de um arquivo src/store/index.js com o seguinte conte√∫do:
import { createStore, combineReducers } from 'redux';
import rootReducer from '../reducers';

const store = createStore(rootReducer);

export default store;
A fun√ß√£o createStore sempre receber√° como par√¢metro um rootReducer . Portanto, deve-se criar um rootReducer no arquivo src/reducers/index.js .
Dica: Para facilitar a utiliza√ß√£o do Redux, recomendamos fortemente que voc√™ instale a extens√£o Redux Devtools . E adicione o pacote redux-devtools-extension com o seguinte comando: npm install --save redux-devtools-extension
Se a extens√£o e o pacote do Redux Devtools n√£o estiver instalada, a linha de configura√ß√£o dela apresentar√° um erro.
Observe o c√≥digo abaixo de uma store configurada com a extens√£o:
import { createStore } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension';

import rootReducer from '../reducers';

const store = createStore(rootReducer, composeWithDevTools());

export default store;
Observe a imagem abaixo da extens√£o em funcionamento:

reducer e rootReducer
Como dito anteriormente, a fun√ß√£o createStore precisa receber como par√¢metro um rootReducer , que por sua vez recebe todos os reducers da aplica√ß√£o como um objeto no par√¢metro da fun√ß√£o combineReducers .
Arquivo myReducer.js dentro do diret√≥rio reducers:
const INITIAL_STATE = {
  state: '',
};

function myReducer(state = INITIAL_STATE, action) {
  switch (action.type) {
    case 'NEW_ACTION':
      return { state: action.state };
    default:
      return state;
  }
}

export default myReducer;

Arquivo index.js dentro do diret√≥rio reducers:

import { combineReducers } from 'redux';
import myReducer from './myReducer';

const rootReducer = combineReducers({ myReducer });

export default rootReducer;

O m√©todo combineReducers que, como diz seu nome, combina reducers , deve receber um objeto com os reducers criados. Sem ele, s√≥ poder√≠amos usar um reducer em nossa aplica√ß√£o.
Dica: Mesmo que tenhamos apenas um reducer √© uma boa pr√°tica que utilizemos o combineReducers , pois caso nossa aplica√ß√£o cres√ßa e necessite de mais de um reducer n√£o ser√° necess√°rio alterar sua l√≥gica.
Vamos analisar o que est√° acontencedo:
Primeiro, definimos um estado inicial para nosso reducer;
Um reducer deve receber como par√¢metro um estado e uma a√ß√£o;
A a√ß√£o, por conven√ß√£o, deve ser um objeto e possuir a key type . √â essa key que define como o reducer vai manipular o estado.
Ent√£o combinamos os reducers dentro do arquivo contendo o rootReducer.

actions e action creators
Como dito anterioremente, nossa action , por conven√ß√£o, deve ser um objeto. Esse objeto pode possuir apenas a key type ou mais outras keys, caso seja conveniente. Note que, no caso abaixo, criamos tamb√©m uma key state , que guardar√° o valor recebido pela action.
A action possui sempre uma propriedade type √∫nica. Essa propriedade √© utilizada pelo Redux para identificar a a√ß√£o que ser√° realizada, esse conceito recebe o nome de action type.
export const newAction = (state) => ({ type: 'NEW_ACTION', state });

Acabamos de falar que actions s√£o objetos simples em javascript, ent√£o porque criamos fun√ß√µes?
Chamadas de action creators , essas fun√ß√µes apenas criam e retornam uma action. Utilizamos as action creators porque nos trazem alguns benef√≠cios em c√≥digos mais complexos. Imagine ter que escrever esse objeto no seu c√≥digo sempre que precisar enviar uma a√ß√£o para o reducer , estar√≠amos tendo um trabalho repetitivo desnecess√°rio, outra vantagem √© que dessa forma tamb√©m padronizamos a a√ß√£o, evitando poss√≠veis erros caso ela seja utilizada v√°rias vezes.
Provider
Para utilizarmos o estado compartilhado que o Redux prov√™, precisamos trabalhar o src/index.js para adicionarmos a configura√ß√£o do Provider.
import React from 'react';
import ReactDOM from 'react-dom';
// o provider √© o meio pelo qual disponibilizamos o store
// com os estados de toda a aplica√ß√£o para todos os demais componentes
import { Provider } from 'react-redux';
import './index.css';
import App from './App';
import store from './store';

ReactDOM.render(
  <Provider store={ store }>
    <App />
  </Provider>,
  document.getElementById('root'),
);

Agora que voc√™ j√° entendeu a configura√ß√£o dessas pe√ßas do react-redux, vamos assistir essa aula que mostra como integrar as pe√ßas em um outro tipo de aplica√ß√£o.
Neste v√≠deo voc√™ viu como estruturar as pe√ßas do Redux que aprendemos no bloco anterior, s√≥ que agora utilizando o React. Caso voc√™ rode esta aplica√ß√£o, ela ainda n√£o ir√° funcionar, primeiro ser√° necess√°rio conectar todas as pe√ßas, o que veremos ainda neste bloco.
// src/actions/index.js
const addAssignment = (value) => ({ type: 'ADD_ELEMENT', value });

export default addAssignment;
// src/reducers/index.js
const INITIAL_STATE = [];

function listReducer(state = INITIAL_STATE, action) {
  switch(action.type) {
    case 'ADD_ELEMENT':
      return [...state, action.value];
    default:
      return state;
  }
}

export default listReducer;
Aqui, √© importante sempre lembrar do caso default na declara√ß√£o do switch . Apesar de n√£o ser obrigat√≥rio, ele garante que n√£o tenhamos um erro caso o reducer receba como par√¢metro uma action inexistente. Se isso acontecer, todos os case ser√£o pulados e a fun√ß√£o vai cair no argumento default , que simplesmente retorna o estado como ele est√°. Garantimos que nosso estado n√£o ser√° alterado se uma action com um type que n√£o conhecemos seja disparado para a store, mantendo assim a integridade do nosso estado global.
// src/store/index.js
import { createStore, combineReducers } from 'redux';
import listReducer from '../reducers';

const rootReducer = combineReducers({ listReducer });

const store = createStore(rootReducer);

export default store;

// src/App.js
import React from 'react';

function App() {
  return (
    <span> Hello, World </span>
  );
}

export default App;

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import App from './App';
import store from './store';

ReactDOM.render(
  <React.StrictMode>
    <Provider store = { store }>
      <App />
    </Provider>
  </React.StrictMode>,
  document.getElementById('root'),
);

mapStateToProps
Ao implementar os componentes √© preciso conect√°-los ao Redux . Primeiramente √© preciso importar e adicionar os componentes √† p√°gina que precisar√° renderizar os mesmos.

import React from 'react';
import FirstComponent from './FirstComponent';
import SecondComponent from './SecondComponent';

class App extends React.Component {
  render() {
    return (
      <div>
        <FirstComponent />
        <SecondComponent />
      </div>
    );
  }
}

export default App;
Agora vamos analisar a implementa√ß√£o do componente FirstComponent :
import React from 'react';
import { connect } from 'react-redux';

class FirstComponent extends React.Component {
  render() {
    return (
      <div>
        <div>
          {this.props.myFirstState.map((element,index) => (
            <p key={ index }>{element}</p>
          ))}
        </div>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  myFirstState: state.myReducer.state});

export default connect(mapStateToProps, null)(FirstComponent);
OBS: O m√©todo connect()() √© utilizado para conectar o componente a store do Redux. N√£o se preocupe, pois iremos falar mais sobre ele no pr√≥ximo t√≥pico.
Vamos analisar o que est√° acontecendo:
Estamos fazendo um map com os elementos presentes no array myFirstState que, por sua vez, est√° presente nas props . Mas como isso foi parar l√°?
A fun√ß√£o mapStateToProps , auto-descritiva, mapeia as entidades armazenadas nos estados para uma props .
No nosso caso, queremos acessar os dados providos pelo reducer myReducer , portanto basta acessar o caminho do state com o reducer desejado e nomear a prop que o receber√° (no caso, chamamos de myFirstState ).
Por √∫ltimo, como foi dito anteriormente, utilizamos o connect para conectar o Redux ao componente. Esse m√©todo possui o seguinte formato: connect()() . Como no caso estamos fazendo apenas leitura dos dados, basta passar a fun√ß√£o mapStateToProps no primeiro par√™nteses e o componente no segundo.
Acesse a branch exercise-5 para praticar a cria√ß√£o do mapStateToProps. Voc√™ dever√° visualizar o diret√≥rio missing_mapstatetoprops, essa √© a nossa aplica√ß√£o react-redux que precisar√° da implementa√ß√£o do mapStateToProps . Siga o passo a passo do arquivo README.md.
connect
O m√©todo connect nos d√° acesso a store do Redux. A sua estrutura se d√° da seguinte forma: connect()() .
Nos primeiros par√™nteses, devem estar presentes os m√©todos nativos do Redux. No caso de utilizar somente o mapDispatchToProps , o primeiro par√¢metro desses par√™nteses dever√° ser null , j√° no caso de utilizar somente o mapStateToProps , que veremos logo a frente, o segundo par√¢metro desses par√™nteses dever√° ser null . Portanto, no caso de utilizar ambos mapStateToProps e mapDispatchToProps , essa √© a sintaxe que o connect apresentar√°:
export default connect(mapStateToProps, mapDispatchToProps)(Component)
No segundo par√™nteses, colocamos o componente que dever√° ser conectado.
Acesse a branch exercise-6 para praticar a cria√ß√£o do connect. Voc√™ dever√° visualizar o diret√≥rio missing_connect, essa √© a nossa aplica√ß√£o react-redux que precisar√° da implementa√ß√£o do connect . Siga o passo a passo do arquivo README.md.
mapDispatchToProps e dispatch
Agora, vamos √† implementa√ß√£o do componente SecondComponent.
//actions.js

export const newAction = (state) => ({ type: 'NEW_ACTION', state });
import React from 'react';
import { connect } from 'react-redux';
import { newAction } from './actions';
// Import referente a `action creator` criada para disparar a a√ß√£o para a store.

class SecondComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { inputValue: '' };
    // Esse estado ir√° armazenar o valor do input
  }

  render() {
    const { myFirstDispatch } = this.props
    return (
      <div>
        <input
          type="text"
          onChange={event => this.setState({ inputValue: event.target.value })}
        />
        <button onClick={() => this.props.myFirstDispatch(this.state.inputValue)}> /
          Executar qualquer tarefa
        </button>
    // O bot√£o est√° disparando o mapDispatch e enviando o valor para a store
      </div>
    );
  }
}

// utilizando `action`:
// const mapDispatchToProps = (dispatch) => ({
  // myFirstDispatch: (state) => dispatch({ type: 'NEW_ACTION', state }),
// });

// No caso acima, vemos que o mapDispatchToProps √© uma fun√ß√£o que retorna um objeto, e sua key recebe uma callback.
// Essa callback ter√° um par√¢metro correspondente ao estado que ser√° enviado para a store.
// Nessa callback, chamamos a fun√ß√£o `dispatch`, que receber√° como argumento a `action`,
// que √© um objeto contendo o "type" e o parametro da callback, o "state", que ser√° o novo valor do estado.


// utilizando `action creator `:

const mapDispatchToProps = (dispatch) => ({
  myFirstDispatch: (state) => dispatch(newAction(state))});

// Podemos utilizar o mapDispatchToProps de outra forma tamb√©m! Lembra do arquivo que foi criado contendo a fun√ß√£o "newAction?
// No exemplo acima, o dispatch est√° recebendo como argumento a "newAction", que tamb√©m √© chamada de `action creator`.
// E √© a√≠ que est√° a vantagem de utilizar  as `action creator`, pois elas tamb√©m geram uma `action`.

export default connect(null, mapDispatchToProps)(SecondComponent);


// reducers/myReducer.js

const INITIAL_STATE = {
  state: '',
};

function myReducer(state = INITIAL_STATE, action) {
  switch (action.type) {
    case 'NEW_ACTION':
      return { state: action.state };
      // Nesse caso a utiliza√ß√£o do spread operator (...) n√£o √© necess√°rio, pois estamos trabalhando com uma √∫nica chave no estado.
      // Mas caso tenha d√∫vidas sobre a utiliza√ß√£o, consulte a documenta√ß√£o do Redux https://redux.js.org/recipes/using-object-spread-operator
    default:
      return state;
  }
}

export default myReducer;


// reducers/index.js

import { combineReducers } from 'redux';
import myReducer from './myReducer';

const rootReducer = combineReducers({ myReducer });

export default rootReducer;

O dispatch √© uma fun√ß√£o da Redux store. Lembra que voc√™ precisa chamar uma store.dispatch para despachar uma a√ß√£o com JavaScript puro? Ent√£o, o mapDispatchToProps tem acesso √† essa fun√ß√£o da store, e √© atrav√©s dela que voc√™ conseguir√° enviar a a√ß√£o para alterar o estado da aplica√ß√£o .
Vamos passar por cada parte do componente para explicar seu funcionamento:
Primeiro, n√≥s estamos definindo um estado interno do componente chamado inputValue . Note que, apesar de estarmos usando o Redux , que centraliza os states , caso haja algum estado o qual n√£o necessite navegar entre outros componentes, podemos declar√°-lo internamente.
Estamos criando um input para o usu√°rio digitar a tarefa que deseja executar. A cada mudan√ßa no valor do input, o valor √© salvo no estado inputValue .
Um bot√£o com a propriedade onClick foi criado, passando a fun√ß√£o myFirstDispatch que est√° presente na props . Mas como isso foi parar l√°? Veremos agora:
A fun√ß√£o mapDispatchToProps √© a respons√°vel por disparar - fazer o dispatch de - uma a√ß√£o para o reducer .
Para termos acesso √†s funcionalidades do Redux, seja a de ler os dados ou manipul√°-los, precisamos acess√°-las como props de um componente. Por isso, como explicitado no nome da fun√ß√£o, o mapDispatchToProps mapeia os dispatchs para o props .
Note que no in√≠cio do arquivo estamos importando a action newAction , criada anteriormente. No caso, estamos nomeando uma propriedade chamada myFirstDispatch , que faz o dispatch da action newAction com um par√¢metro.
Outra observa√ß√£o importante √© que as estruturas dos m√©todos mapStateToProps e mapDispatchToProps sempre ser√£o as mesmas, o que mudar√° s√£o as propriedades que vamos acessar ou actions que vamos disparar.
O mapDispatchToProps , assim como o mapStateToProps , podem ser criados via fun√ß√µes convencionais ou arrow functions. O que √© indispens√°vel √© que o retorno seja um objeto, pois √© assim que o Redux o espera.
Lembre-se: a √∫nica maneira de enviarmos uma action para um reducer √© fazendo seu dispatch .
Por √∫ltimo, para conectar o Redux ao componente, √© preciso importar o m√©todo connect .
Acesse a branch exercise-7 para praticar a cria√ß√£o do mapDispatchToProps e do dispatch. Voc√™ dever√° visualizar o diret√≥rio missing_mapdispatchtoprops, essa √© a nossa aplica√ß√£o react-redux que precisar√° da implementa√ß√£o do mapDispatchToProps e do dispatch . Siga o passo a passo do arquivo README.md .
Pronto! Essa √© uma aplica√ß√£o com react-redux pronta com todas as suas pe√ßas funcionando. Note que a estrutura pura do Redux se baseia em: store , actions e reducers . J√° a estrutura de conex√£o entre o React e o Redux √© composta por: provider , connect , dispatch , mapDispatchToProps e mapStateToProps . Essas s√£o as principais ferramentas que constituem a estrutura react-redux.
Agora que aprendemos como encaixar as pe√ßas, voc√™ j√° sabe como utilizar o Redux no React! Aproveite para observar o comportamento do estado utilizando a extens√£o do navegador Redux Devtools mencionada anteriormente no in√≠cio deste bloco.
// src/actions/index.js
const addAssignment = (value) => ({ type: 'ADD_ELEMENT', value });

export default addAssignment;
// src/reducers/index.js
const INITIAL_STATE = [];

function listReducer(state = INITIAL_STATE, action) {
  switch(action.type) {
    case 'ADD_ELEMENT':
      return [...state, action.value];
    default:
      return state;
  }
}

export default listReducer;
// src/store/index.js
import { createStore, combineReducers } from 'redux';
import listReducer from '../reducers';

const rootReducer = combineReducers({ listReducer });

const store = createStore(
  rootReducer,
  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  // A linha acima n√£o √© obrigat√≥ria, serve apenas para visualizar
  // a extens√£o "Redux Devtools", caso voc√™ tenha instalado.
);

export default store;
// src/InputsList.js
import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import addAssignment from './actions';

class InputsList extends React.Component {
  constructor() {
    super();
    this.state = { textValue: '' };
  }

  render() {
    const { add } = this.props;
    const { textValue } = this.state;

    return (
      <div>
        <input
          type="text"
          placeholder="Digite a tarefa"
          onChange={ (event) => this.setState({ textValue: event.target.value }) }
        />
        <button type="button" onClick={ () => add(textValue) }>
          Adicionar Tarefa
        </button>
      </div>
    );
  }
}

InputsList.propTypes = {
  add: PropTypes.func.isRequired,
};

const mapDispatchtoProps = (dispatch) => ({
  add: (value) => dispatch(addAssignment(value))
});

export default connect(null, mapDispatchtoProps)(InputsList);
// src/List.js
import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';

class List extends React.Component {
  render () {
    const { list } = this.props;

    return (
      <div>
        <div>
          {list.map((element, index) => <p key={ index }>{element}</p>)}
        </div>
      </div>
    );
  }
}

const mapStateToProps = (state) => ({
  list: state.listReducer});

List.propTypes = {
  list: PropTypes.arrayOf(PropTypes.string).isRequired,
}

export default connect(mapStateToProps)(List);

// src/App.js
import React from 'react';
import InputsList from './InputsList';
import List from './List';

function App() {
  return (
    <div>
      <InputsList />
      <List />
    </div>
  );
}

export default App;
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import App from './App';
import store from './store';

ReactDOM.render(
  <React.StrictMode>
    <Provider store = { store }>
      <App />
    </Provider>
  </React.StrictMode>,
  document.getElementById('root'),
);

Fluxo de dados no Redux
O gif abaixo resume todas partes e como elas se comunicam para funcionamento do Redux com React. Basicamente, segue-se os seguintes passos:
1- Um Store √© criado para armazenar todos o estado da aplica√ß√£o;
2- O Store √© disponibilizado atrav√©s do Provider para todos os componentes da aplica√ß√£o;
3- Os componentes usam o connect para conectarem-se ao Store ;
4- As pessoas que utilizam a aplica√ß√£o interagem com ela e disparam eventos;
5- Estes eventos t√™m o nome de Actions e s√£o enviadas ao Store atrav√©s de um dispatch ;
6- Os Reducers recebem essas Actions e alteram o estado da aplica√ß√£o (criando um novo estado) e salvando no Store ;
7- Os componentes conectados ao Store "ouvem" estas mudan√ßas e atualizam a View (visualiza√ß√£o).



Checklist react-redux: Passo a passo para guardar no cora√ß√£o e colar na parede
npx create-react-app my-app-redux;
npm install redux react-redux;
npm install.
Criar dentro do diret√≥rio src:
diret√≥rio actions;
diret√≥rio reducers;
diret√≥rio store.
Criar dentro do diret√≥rio actions:
arquivo index.js.
Criar dentro do diret√≥rio reducers:
arquivo index.js.
Criar dentro do diret√≥rio store:
arquivo index.js.
Em src/index.js:
definir o Provider, <Provider store={ store }> , para fornecer os estados √† todos os componentes encapsulados em <App /> .
Se a sua aplica√ß√£o n√£o ter√° outras p√°ginas, n√£o √© necess√°rio configurar as rotas. Caso contr√°rio:
npm install react-router-dom@v5;
Em src/index.js:
definir o BrowserRouter, <BrowserRouter> .
No arquivo App.js:
definir o Switch, <Switch> ;
definir a Route, <Route> .
O BrowserRouter, o Switch e a Route s√£o tr√™s componentes essenciais para trabalhar rotas em React.
Caso necess√°rio:
criar o diret√≥rio components;
criar o diret√≥rio pages.
No arquivo store/index.js:
importar o rootReducer e criar a store;
configurar o Redux DevTools.
Na pasta reducers:
criar os reducers necess√°rios;
configurar os exports do arquivo index.js.
Na pasta actions:
criar os actionTypes;
criar as actions necess√°rias.
Nos componentes:
criar a fun√ß√£o mapStateToProps se necess√°rio;
criar a fun√ß√£o mapDispatchToProps se necess√°rio;
fazer o connect se necess√°rio.
#theend

//          24/02 ‚Äì 15.3 - Usando o Redux no React ‚Äì Pr√°tica

O que vamos aprender?
O Redux √© uma ferramenta extremamente importante na vida de uma pessoa desenvolvedora front-end. Praticar √© a melhor forma de aprender Redux. Hoje voc√™ ir√° aplicar o Redux em alguns cen√°rios. Para praticar esses conceitos e tamb√©m soft skills, trabalharemos algumas partes individualmente e outras em grupo, colocando em pr√°tica o valor de colabora√ß√£o (a facilita√ß√£o dar√° mais instru√ß√µes) para que todo mundo possa compartilhar conhecimento e ganhar efici√™ncia. A proposta √© fazer o m√°ximo poss√≠vel dos exerc√≠cios, para ganhar mais familiaridade com o Redux.
Array: eu atualizo ou fa√ßo uma c√≥pia?
Para utilizar o Redux com mais tranquilidade, devemos sempre nos lembrar de que o state √© imut√°vel . Isso significa que s√≥ podemos usar m√©todos que fa√ßam clonagem e n√£o podemos usar m√©todos que fa√ßam muta√ß√£o . Mas v√° com calma, esse √© um conceito um pouco mais abstrato e poder√° levar um tempo para que voc√™ o domine, mas dominar esse conceito vai lhe dar muito mais seguran√ßa na hora de manipular a store .
No JavaScript h√° v√°rios m√©todos para trabalhar com arrays. Podemos divid√≠-los entre os m√©todos que, ao realizar a sua fun√ß√£o, n√£o criam um novo array, ou seja, causam muta√ß√£o no array j√° existente, e os que criam um novo array, sem alterar o array antigo, ou seja, fazem clonagem .
Sabendo disso, e tendo a regra n√≠tida de que a Store deve ser imut√°vel, s√≥ podemos trabalhar com m√©todos que fa√ßam clonagem e nunca com os m√©todos que fazem muta√ß√£o . Em resumo, a muta√ß√£o atualiza um valor j√° existente na mem√≥ria e a clonagem cria um novo valor separado, mantendo o antigo intacto.
Agora, vamos a um exemplo pr√°tico do que √© muta√ß√£o:
const itemPrimario = [1, 2, 3, 4, 5];
let mutacaoTeste = itemPrimario;
mutacaoTeste.push(6);
console.log(mutacaoTeste); // [1, 2, 3, 4, 5, 6]
console.log(itemPrimario); // [1, 2, 3, 4, 5, 6]
A) Ao passar o valor da const itemPrimario para a const mutacaoTeste , voc√™ est√° apenas dando a vari√°vel mutacaoTeste o apontador para o local em mem√≥ria onde o valor de itemPrimario est√° localizado. Logo, voc√™ tem o mesmo valor apontado pelas duas vari√°veis.
B)Ao utilizar o push para colocar o valor 6, como o m√©todo n√£o faz clonagem , e sim muta√ß√£o , ele alterou diretamente o local em mem√≥ria que o valor estava guardado e, por isso, o valor das duas vari√°veis foi alterado. Isso n√£o √© permitido no Redux .
C)Exatamente pelo fato do endere√ßo em mem√≥ria ser alterado diretamente, n√£o tivemos a necessidade de passar o valor para a vari√°vel mutacaoTeste novamente, j√° que o endere√ßo em mem√≥ria permanece o mesmo.
Agora um exemplo de c√≥pia, num primeiro momento essa resposta parece errada, ent√£o rode esse c√≥digo linha a linha e veja o que acontece:
const itemPrimario = [1, 2, 3, 4, 5];
let clonagemTeste = itemPrimario;
clonagemTeste.concat(6);
console.log(clonagemTeste); // [1, 2, 3, 4, 5]
console.log(itemPrimario); // [1, 2, 3, 4, 5]
a) Aqui estamos utilizando o m√©todo concat porque esse m√©todo faz clonagem . Isto √©, ele cria um novo array com os valores atualizados MAS N√ÉO atualiza a vari√°vel clonagemTeste para que ela aponte para esse novo array. Logo, a vari√°vel clonagemTeste ainda aponta para o array antigo! Sem uma reatribui√ß√£o, o endere√ßo atribu√≠do a clonagemTeste √© o do valor antigo e por isso seu array n√£o foi alterado. Ficou entendido? A muta√ß√£o altera o valor para onde as duas vari√°veis apontam e a clonagem cria um novo valor e mant√©m o antigo intacto.
b)Refa√ßa o c√≥digo com a reatribui√ß√£o agora, e veja que itemPrimario vai manter seu valor antigo e clonagemTeste ter√° o valor novo.
C)Talvez voc√™ n√£o tenha se dado conta at√© agora, mas pense em todas as vezes que voc√™ precisou utilizar um push , um splice , um sort() ... Esses m√©todos tem algo em comum, voc√™ n√£o precisou reatribuir a vari√°vel com o novo valor depois, n√£o √© mesmo? Isso acontece porque esses valores fazem muta√ß√£o . J√° m√©todos como o concat , o slice , um filter() ... Esses m√©todos todos precisam que a vari√°vel seja reatribu√≠da, certo? Porque eles fazem clonagem e por conta disso, o novo valor deve ser atribu√≠do, do contr√°rio a vari√°vel ainda vai acessar o valor antigo.
d)Sempre que estiver na d√∫vida se pode ou n√£o utilizar um m√©todo fa√ßa esse teste, ou pesquise sobre o m√©todo e veja se ele faz muta√ß√£o ou clonagem . Para ajudar nessa tarefa, veja esse site https://doesitmutate.xyz/ que mant√©m uma lista dos m√©todos que fazem muta√ß√£o e dos que n√£o fazem.
Outra maneira de trabalharmos com imutabilidade de arrays √© com um conceito visto no m√≥dulo de fundamentos: o spread operator . Usando o mesmo array dos exemplos anteriores, desta vez com spread operator , ficaria desta forma:
const itemPrimario = [1, 2, 3, 4, 5, 6];
let spreadTeste = [...itemPrimario, 7];
console.log(spreadTeste); // [1, 2, 3, 4, 5, 6, 7]
console.log(itemPrimario); // [1, 2, 3, 4, 5, 6]
Temos esse conte√∫do no come√ßo de um dia mais voltado para exerc√≠cios, porque ele √© importante para evitar algumas armadilhas na hora de criar nosso state . Os pr√≥ximos exerc√≠cios v√£o necessitar que o conceito seja bem compreendido para serem resolvidos com tranquilidade.
Mais uma vez, esse conte√∫do √© um pouco mais abstrato, ent√£o tenha calma caso voc√™ tenha dificuldades de entendimento, conforme voc√™ for fazendo exerc√≠cios, isso vai ficando mais n√≠tido.
Durante o dia, pense sobre quando vale a pena utilizar o Redux, pois embora seja obrigat√≥rio para efeitos de aprendizado usar Redux em todos os exerc√≠cios de hoje, vale sempre a reflex√£o sobre quando √© interessante utilizar e quando pode ser melhor utilizar alguma outra tecnologia para controle de estado.

Exerc√≠cio:
Novamente em conjunto, tentem trocar de posi√ß√£o, quem pilotava, agora observa e vice-versa:
1- Voc√™ ir√° criar um sistema de cadastro de clientes. Esse sistema deve ser composto por 4 p√°ginas.
A primeira p√°gina deve ser a Home . Ela dever√° ter um Link que possibilite ao usu√°rio navegar para a p√°gina de login.
A segunda p√°gina ser√° a de Login. Devem existir 2 campos para pegar os dados do usu√°rio (email e senha). Ap√≥s o login ser efetuado, o usu√°rio deve ser redirecionado para a p√°gina de Clientes cadastrados.
Caso o login n√£o seja feito, ou seja, o usu√°rio tenha mudado √† m√£o o link do sistema e ido para a p√°gina de cadastro ou de clientes, a √∫nica mensagem exibida deve ser: "Login n√£o efetuado".
A p√°gina de Clientes cadastrados dever√° listar todos os clientes. Caso n√£o haja cliente, a mensagem "Nenhum cliente cadastrado" deve aparecer na tela, juntamente com um bot√£o para ir √† pagina de cadastro. Esse bot√£o deve permanecer na tela mesmo caso hajam clientes.
A p√°gina de cadastro deve conter 3 inputs, para pegar 3 dados do cliente: nome, idade e email. Um bot√£o deve gerar o cadastro. Deve haver tamb√©m na p√°gina um bot√£o que leve o usu√°rio para a p√°gina de Clientes cadastrados .
Estados que n√£o necessitem navegar para outros componentes, podem ser guardados internamente. Todos os outros devem ser trafegados via Redux.



Solu√ß√£o:
Cadastro de clientes
Rodando os exerc√≠cios localmente
Para executar as aplica√ß√µes localmente basta seguir os seguintes passos:
1- Crie uma aplica√ß√£o create-react-app :
Copiar
npx create-react-app reddit
2- Instale react-redux , redux , react-router-dom como depend√™ncias:
Copiar
npm install react-redux redux react-router-dom@v5

// src/actions/index.js
export const addRegister = value => ({ type: 'ADD_REGISTER', data: value });
export const login = value => ({ type: 'LOGIN', value });

// src/reducers/login.js
const Initial_State = {};

function loginReducer(state = Initial_State, action) {
  switch (action.type) {
    case 'LOGIN':
      return action.value;
    default:
      return state;
  }
}

export default loginReducer;

// src/reducers/register.js
const Initial_State = [];

function registerReducer(state = Initial_State, action) {
  switch (action.type) {
    case 'ADD_REGISTER':
      return [...state, action.data];
    default:
      return state;
  }
}

export default registerReducer;

// src/reducers/index.js
import { combineReducers } from 'redux';
import loginReducer from './login';
import registerReducer from './register';

const rootReducers = combineReducers({ registerReducer, loginReducer });

export default rootReducers;

// src/store/index.js
import { createStore } from 'redux';
import rootReducer from '../reducers';

const store = createStore(rootReducer);

export default store;

// src/App.js
import React from 'react';
import { Provider } from 'react-redux';
import { BrowserRouter, Switch, Route } from 'react-router-dom';
import store from './store';
import Home from './Home';
import Login from './Login';
import Register from './Register';
import Clients from './Clients';

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <BrowserRouter>
          <Switch>
            <Route exact path="/" component={Home} />
            <Route path="/login" component={Login} />
            <Route path="/register" component={Register} />
            <Route path="/clients" component={Clients} />
          </Switch>
        </BrowserRouter>
      </Provider>
    );
  }
}

export default App;

// src/Home.js
import React from 'react';
import { Link } from 'react-router-dom';

class Home extends React.Component {
  render() {
    return (
      <div>
        Bem-vindo ao sistema de cadastramento!
        <Link to="/Login">Fa√ßa seu Login</Link>
      </div>
    );
  }
}

export default Home;

// src/Login.js
import React from 'react';
import { connect } from 'react-redux';
import { login } from './actions';
import { Link } from 'react-router-dom';

class Login extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      email: '',
      password: '',
    };
  }
  render() {
    const { email, password } = this.state;
    return (
      <div>
        <div>
          <input
            type="text"
            onChange={e => this.setState({ email: e.target.value })}
            placeholder="email"
          />
          <input
            type="password"
            onChange={e => this.setState({ password: e.target.value })}
            placeholder="senha"
          />
        </div>
        <Link
          to="/clients"
          onClick={() => this.props.login({ email, password })}>
          Entre
        </Link>
      </div>
    );
  }
}

const mapDispatchToProps = dispatch => ({
  login: e => dispatch(login(e))});

export default connect(null, mapDispatchToProps)(Login);

// src/Register.js
import React from 'react';
import { connect } from 'react-redux';
import { addRegister } from './actions';
import { Link } from 'react-router-dom';

class Register extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      age: '',
      email: '',
    };
  }

  validateRegister = () => {
    const { name, age, email } = this.state;
    this.props.addRegister({ name, age, email });
    this.setState({
      name: '',
      age: '',
      email: '',
    });
  };

  render() {
    const { name, age, email } = this.state;
    const { userLogin } = this.props;
    if (!userLogin.email) return <div>Login n√£o efetuado!</div>;
    return (
      <div>
        <div>
          <input
            type="text"
            placeholder="Nome"
            value={name}
            onChange={e => this.setState({ name: e.target.value })}
          />
          <input
            type="number"
            placeholder="Idade"
            value={age}
            onChange={e => this.setState({ age: e.target.value })}
          />
          <input
            type="text"
            placeholder="Email"
            value={email}
            onChange={e => this.setState({ email: e.target.value })}
          />
        </div>
        <button onClick={this.validateRegister}>Registrar Cliente</button>
        <Link to="/clients">Ver clientes cadastrados</Link>
      </div>
    );
  }
}
const mapStateToProps = state => ({
  userLogin: state.loginReducer});
const mapDispatchToProps = dispatch => ({
  addRegister: e => dispatch(addRegister(e))});

export default connect(mapStateToProps, mapDispatchToProps)(Register);

// src/Clients.js
import React from 'react';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';

class Clients extends React.Component {
  render() {
    const { registers, userLogin } = this.props;
    if (!userLogin.email) return <div>Login n√£o efetuado!</div>;
    if (registers.length < 1)
      return (
        <div>
          <div>Nenhum cliente cadastrado</div>
          <Link to="/register">Cadastre agora!</Link>
        </div>
      );
    return (
      <div>
        <Link to="/register">Cadastre outros!</Link>
        <div>
          {registers.map((register, index) => {
            return (
              <div key={register.email}>
                <p>ID de registro: {index + 1}</p>
                <p>Nome: {register.name}</p>
                <p>Idade: {register.age}</p>
                <p>Email: {register.email}</p>
              </div>
            );
          })}
        </div>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  registers: state.registerReducer,
  userLogin: state.loginReducer});

export default connect(mapStateToProps)(Clients);

B√¥nus
Voc√™ ir√° implementar funcionalidades ao c√≥digo do exerc√≠cio 1.
Na p√°gina de clientes cadastrados, crie um bot√£o que ordene os clientes em ordem alfab√©tica a partir do campo nome . Caso o bot√£o seja clicado novamente, a ordena√ß√£o original deve ser mostrada.
Cada cadastro deve ser acompanhado de um bot√£o com o texto X . Caso o bot√£o seja clicado, o cadastro deve ser exclu√≠do.
Apenas os arquivos modificados em rela√ß√£o a resolu√ß√£o anterior ser√£o apresentados
Solu√ß√£o:
// src/Clients.js
import React from 'react';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';
import { deleteRegister } from './actions';

class Clients extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      ordened: false,
    };
  }

  generateRegisters = array =>
    array.map(register => (
      <div key={register.email}>
        <p>Nome: {register.name}</p>
        <p>Idade: {register.age}</p>
        <p>Email: {register.email}</p>
        <button onClick={() => this.props.delete(register)}>X</button>
      </div>
    ));

  orderRegisters = () => {
    const ordened = [...this.props.registers];
    ordened.sort((a, b) => {
      const nameA = a.name.toUpperCase();
      const nameB = b.name.toUpperCase();

      let comparison = 0;
      if (nameA > nameB) {
        comparison = 1;
      } else if (nameA < nameB) {
        comparison = -1;
      }
      return comparison;
    });
    return ordened;
  };
  render() {
    const { registers, userLogin } = this.props;
    const { ordened } = this.state;

    if (!userLogin.email) return <div>Login n√£o efetuado!</div>;
    if (registers.length < 1)
      return (
        <div>
          <div>Nenhum cliente cadastrado</div>
          <Link to="/register">Cadastre agora!</Link>
        </div>
      );
    return (
      <div>
        <Link to="/register">Cadastre outros!</Link>
        <button
          onClick={() => this.setState(state => ({ ordened: !state.ordened }))}>
          Ordenar
        </button>
        <div>
          {this.generateRegisters(ordened ? this.orderRegisters() : registers)}
        </div>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  registers: state.registerReducer,
  userLogin: state.loginReducer});

const mapDispatchToProps = dispatch => ({
  delete: e => dispatch(deleteRegister(e))});

export default connect(mapStateToProps, mapDispatchToProps)(Clients);

// src/actions/index.js
export const addRegister = value => ({ type: 'ADD_REGISTER', data: value });
export const deleteRegister = value => ({ type: 'DELETE_REGISTER', value });
export const login = value => ({ type: 'LOGIN', value });

// src/reducers/register.js
const Initial_State = [];

function registerReducer(state = Initial_State, action) {
  switch (action.type) {
    case 'ADD_REGISTER':
      return [...state, action.data];
    case 'DELETE_REGISTER':
      return state.filter(register => register !== action.value);
    default:
      return state;
  }
}

export default registerReducer;
*/