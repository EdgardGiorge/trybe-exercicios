import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

/* 
25/02 15.4 - React com Redux - parte 2 ( Usando o Redux no React - Actions Ass√≠ncronas)

O que vamos aprender?
Vamos recapitular o que voc√™ aprendeu at√© ent√£o:
a) Voc√™ aprendeu a fazer uso de Redux para prover gerenciamento de estado √† sua aplica√ß√£o;
b) Voc√™ viu como o fluxo de dados funciona em uma aplica√ß√£o que usa Redux se baseia em 3 entidades fundamentais:
1- store : a √∫nica fonte da verdade referente ao estado compartilhado da sua aplica√ß√£o . Ou seja, √© na store e somente l√° que se encontram os dados compartilhados da sua aplica√ß√£o.
2- actions : ordens enviadas para a store que, por sua vez, interpreta as altera√ß√µes que devem ocorrer atrav√©s do reducer . No Redux , ainda existem as action creators , fun√ß√µes que criam as actions utilizadas na aplica√ß√£o. Uma boa pr√°tica √© inserir todas as action creators dentro de uma √∫nica pasta, separada dos demais arquivos.
3- reducer : uma fun√ß√£o pura que tem como responsabilidade gerenciar o estado da store de acordo com a action recebida. Ou seja, ele prov√™ um novo estado para a store , com as devidas altera√ß√µes relacionadas a action que lhe foi entregue. √â poss√≠vel combinar v√°rios reducers A , B , ..., N em um reducer X s√≥, de forma que somente X seja enviado para criar a store . Assim como as actions , √© uma boa pr√°tica inserir todos os seus reducers em uma pasta pr√≥pria.

c) Por fim, voc√™ viu como integrar Redux com React , haja visto que Redux n√£o √© exclusivo para aplica√ß√µes React . Tal integra√ß√£o √© feita via o pacote react-redux , permitindo que componentes React consigam acessar a store e enviar actions para ela.
Foquemos agora no fluxo de dados de uma aplica√ß√£o Redux : "out of the box", o Redux suporta somente o fluxo s√≠ncrono de dados, e isso consegue ser percebido ao olhar para actions : uma action √© um objeto JavaScript que descreve algum evento que j√° aconteceu e esse objeto √© enviado para a store para que seu estado seja atualizado.
Mas, e se fosse preciso ter uma action ass√≠ncrona, que precisa fazer uma requisi√ß√£o para uma API , de forma que os devidos dados necess√°rios estejam presentes para gerar a action ? De antem√£o n√£o ter√≠amos tais dados para formar essa action , esse objeto, haja visto que √© preciso esperar pela requisi√ß√£o ser conclu√≠da. Logo, como se cria actions ass√≠ncronas? √â isso que voc√™ aprender√° na aula de hoje.

Voc√™ ser√° capaz de:
Criar actions ass√≠ncronas na sua aplica√ß√£o React que faz uso de Redux.

Por que isso √© importante?
Na sua carreira de desenvolvimento opera√ß√µes ass√≠ncronas ser√£o extremamente recorrentes. Agora que voc√™ est√° usando Redux , vai ser comum voc√™ precisar salvar na store algum dado que veio de forma ass√≠ncrona (um endpoint que retorna informa√ß√µes do usu√°rio logado, para que esteja dispon√≠vel para sua aplica√ß√£o, por exemplo).
Tal necessidade, por si s√≥, n√£o √© sanada pelo pacote Redux , haja visto que ele suporta somente fluxo s√≠ncrono de dados. Isso faz com que seja necess√°rio fazer uso de outros pacotes, entre eles o mais popular: redux-thunk . Tal pacote prov√™ uma interface simples para dar suporte a action creators que geram actions ass√≠ncronas, e √© ele que voc√™ aprender√° para tornar sua aplica√ß√£o mais completa.

Redux-thunk

A solu√ß√£o padr√£o recomendada na documenta√ß√£o do Redux para se ter actions ass√≠ncronas √© via uso do pacote redux-thunk. Fun-fact: a l√≥gica desse pacote se encontra em um arquivo .ts com um pouco mais de 50 linhas de c√≥digo, e √© usado por mais de um milh√£o de reposit√≥rios. Olha o que aproximadamente 50 linhas de c√≥digo conseguiram prover para a comunidade. Que sirva de inspira√ß√£o para todos n√≥s! üôÇ

Vamos refor√ßar, a seguir, os conceitos pricipais do redux-thunk :
1- redux-thunk √© um middleware que, no contexto de uma aplica√ß√£o Redux , nada mais √© que um interceptador que captura todas as actions enviadas pela store antes delas chegarem a um reducer . Ou seja, fazendo analogia com pedido online de produto, se a action fosse o produto que voc√™ comprou em algum site, e o reducer fosse voc√™, o middleware seria o correio, que intercepta o produto antes de chegar at√© voc√™ para garantir que ele chegue como se deve. Depois, se quiser ler mais sobre middlewares , acesse o Redux - Middleware na sess√£o de recursos adicionais.

2- Para fazer uso do redux-thunk , √© preciso instal√°-lo via npm :
npm install redux-thunk

3- Para habilitar o uso dele na sua aplica√ß√£o, √© preciso fazer uso da fun√ß√£o applyMiddleware() do Redux :

// arquivo onde a redux store √© criada
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import reducer from '/path/to/your/root/reducer';

...

const store = createStore(reducer, applyMiddleware(thunk));
‚Ä¶

Dica: Para usar o redux-thunk junto com o Redux Devtools √© preciso passar o applyMiddleware(thunk) como par√¢metro para a fun√ß√£o composeWithDevTools , como no exemplo a seguir:

// arquivo onde a redux store √© criada
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import reducer from '/path/to/your/root/reducer';
import { composeWithDevTools } from 'redux-devtools-extension';

...

const store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));
‚Ä¶

4- thunk nada mais √© do que uma fun√ß√£o que encapsula uma opera√ß√£o para que ela seja feita posteriormente. Em termos pr√°ticos, isso significa que voc√™ est√° definindo uma fun√ß√£o que vai ser retornada por uma outra fun√ß√£o com mais l√≥gica adicionada a ela. Se tiver curiosidade sobre o que √© um "thunk", de forma geral, leia What the heck is a 'thunk'?, por Dave Ceddia na sess√£o de recursos adicionais.

5- Com redux-thunk , voc√™ consegue definir uma action creator que retorna uma fun√ß√£o (que ser√° invocada pelo redux-thunk ) em vez de retornar somente um objeto (o que voc√™ tem feito at√© a aula de hoje) . Na fun√ß√£o retornada voc√™ pode realizar uma opera√ß√£o ass√≠ncrona, como fazer chamadas de API e, uma vez finalizada a opera√ß√£o, voc√™ consegue enviar uma action com os dados obtidos por ela, da mesma forma que tem feito at√© ent√£o. Note a conveni√™ncia que isso traz: toda essa l√≥gica de lidar com opera√ß√µes ass√≠ncronas est√° encapsulada na sua respectiva action ass√≠ncrona, deixando transparente para quem for fazer uso dela, que para o seu caso seriam os componentes React ! Sob a perspectiva do componente, ele estaria consumindo uma action como uma outra qualquer!

6- Para ser devidamente usada pelo redux-thunk a action creator precisa retornar uma fun√ß√£o, que pode fazer uso de dispatch e getState da store como par√¢metros. Segue um exemplo de uma action creator definida em conformidade com tal contrato:

export const REQUEST_MOVIES = 'REQUEST_MOVIES';
export const RECEIVE_MOVIES = 'RECEIVE_MOVIES';

// action creator que retorna um objeto, que voc√™ tem feito at√© ent√£o
const requestMovies = () => ({
  type: REQUEST_MOVIES});

// outro action creator que retorna um objeto, que voc√™ tem feito at√© ent√£o
const receiveMovies = (movies) => ({
  type: RECEIVE_MOVIES,
  movies});

// action creator que retorna uma fun√ß√£o, poss√≠vel por conta do pacote redux-thunk
export function fetchMovies() {
  return (dispatch) => { // thunk declarado
    dispatch(requestMovies());
    return fetch('alguma-api-qualquer.com')
      .then((response) => response.json())
      .then((movies) => dispatch(receiveMovies(movies)));
  };
}

// componente onde voc√™ usaria a action creator fetchMovies ass√≠ncrona como uma outra qualquer
...
class MyConectedAppToRedux extends Component {
  ...
  componentDidMount() {
    const { dispatch, fetchMovies } = this.props;
    dispatch(fetchMovies()); // enviando a action fetchMovies
  }
  ...
}
‚Ä¶

OBS : √© poss√≠vel passar tamb√©m um terceiro argumento para a fun√ß√£o retornada. Para ver como fazer isso, leia esta se√ß√£o do reposit√≥rio do redux-thunk .
Em s√≠ntese, um thunk nada mais √© do que uma action que, quando despachada, faz uma requisi√ß√£o ass√≠ncrona e aguarda o resultado da requisi√ß√£o, podendo disparar uma a√ß√£o em caso de sucesso (tratando as informa√ß√µes recebidas) ou disparando outra a√ß√£o em caso de falha para buscar a informa√ß√£o.





Exemplos guiados

Agora que j√° temos uma ideia de como o thunk funciona, vamos ver um exemplo que mostra o que ele faz na pr√°tica. Para isso, vamos montar um app. Primeiro, vamos come√ßar um novo app em React. Crie um diret√≥rio e use o comando:

npx create-react-app doguinhos-app

Depois de terminar, vamos acessar o diret√≥rio do nosso novo app e instalar as depend√™ncias necess√°rias:

cd doguinhos-app
npm i redux react-redux

D√™ uma olhada no c√≥digo da aplica√ß√£o e gaste um tempo entendendo o que est√° sendo feito aqui. Exceto a parte do thunk (que n√£o est√° completa), voc√™ tem conhecimento sobre tudo.
Vamos come√ßar pelo arquivo index.js , onde conectamos o Provider aos componentes do nosso App.

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import App from './App';
import store from './store';

ReactDOM.render(
    <Provider store={store}>
      <App />
    </Provider>,
  document.getElementById('root'),
);

Tamb√©m temos que verificar o arquivo do componente. Como esse nosso App vai apenas fazer uma requisi√ß√£o externa (um fetch ), s√≥ teremos um componente, o App.js . N√≥s estamos utilizando o mapStateToProps para trazer o resultado do fetch e o valor da vari√°vel isFetching , que est√° na store, e o mapDispatchToProps para que se envie a action ao clicar no bot√£o.

// src/App.js
import React from 'react';
import { connect } from 'react-redux';
import { fetchDog } from './store';

function App({ isFetching, src, fetchDog }) {
  return (
    isFetching ? <p>Loading</p>
      : (
        <div style={{ width: 500 }}>
          <button
            style={{ display: 'block' }}
            onClick={fetchDog}
            type="button"
          >
            Novo Doguinho
          </button>
          <img style={{ width: '100%' }} src={src} alt="dog" />
        </div>
      )
  );
}

const mapStateToProps = (state) => ({
  src: state.imagePath,
  isFetching: state.isFetching});

const mapDispatchToProps = (dispatch) => ({
  fetchDog: () => dispatch(fetchDog())});

export default connect(mapStateToProps, mapDispatchToProps)(App);

Por √∫ltimo, vamos copiar o arquivo que cont√©m nossa store, action e reducer. Para fins did√°ticos estamos com tudo no mesmo arquivo, mas as boas pr√°ticas pedem que deixemos cada parte em um arquivo separado, tanto para manter o c√≥digo mais f√°cil de ser lido, quanto para fazer da manuten√ß√£o menos complexa.

// src/store/index.js
import { createStore } from 'redux';

const GET_IMAGE = 'GET_IMAGE';
const REQUEST_IMAGE = 'REQUEST_IMAGE';
const FAILED_REQUEST = 'FAILED_REQUEST';

function getImage(json) {
  return { type: GET_IMAGE, payload: json.message };
}

function requestDog() {
  return { type: REQUEST_IMAGE };
}

function failedRequest(error) {
  return { type: FAILED_REQUEST, payload: error };
}

export function fetchDog() {
  return (dispatch) => {
    dispatch(requestDog());
    return fetch('https://dog.ceo/api/breeds/image/random')
      .then(response => response.json())
      .then(json => dispatch(getImage(json)))
      .catch(error => dispatch(failedRequest(error)))
  };
}

const initialState = {
  isFetching: false,
  imagePath: '',
  error: '',
};

function reducer(state = initialState, action) {
  switch (action.type) {
    case REQUEST_IMAGE:
      return { ...state, isFetching: true };
    case GET_IMAGE:
      return { ...state, imagePath: action.payload, isFetching: false };
    case FAILED_REQUEST:
      return { ...state, error: action.payload, isFetching: false };
    default:
      return state;
  }
}

const store = createStore(reducer);

export default store;

Agora, rode o npm start e depois disso clique no bot√£o Novo Doguinho . Voc√™ ir√° se deparar com o seguinte erro: 
Error: Actions must be plain objects. Use custom middleware for async actions. (Dalta do redux-rhunk

Esse erro, Actions must be plain objects mostra algo que j√° nos foi ensinado anteriormente: actions precisam ser objetos puros, ou seja, n√£o podem ser fun√ß√µes. Para usar actions que s√£o fun√ß√µes n√≥s precisamos de um middleware especial, e √© a√≠ onde se encaixa o thunk na arquitetura Redux .
Ent√£o podemos entender que o que aquele c√≥digo de 14 linhas faz: ele nos permite usar fun√ß√µes (incluindo fun√ß√µes ass√≠ncronas) como actions.
Para vermos o app rodando corretamente, vamos instalar o pacote e alterar nosso c√≥digo para utilizar o thunk corretamente.

npm i redux-thunk

Ap√≥s a instala√ß√£o, devemos inserir o thunk em nossa aplica√ß√£o. O c√≥digo abaixo est√° com as linhas n√£o-alteradas comentadas, perceba que para utilizar o thunk √© preciso acrescentar poucas linhas.

// src/store/index.js
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension';

// const GET_IMAGE = 'GET_IMAGE';
// const REQUEST_IMAGE = 'REQUEST_IMAGE';
// const FAILED_REQUEST = 'FAILED_REQUEST';

// function getImage(json) {
//   return { type: GET_IMAGE, payload: json.message };
// }

// function requestDog() {
//   return { type: REQUEST_IMAGE };
// }

// function failedRequest(error) {
//   return { type: FAILED_REQUEST, payload: error };
// }

// export function fetchDog() {
//   return (dispatch) => {
//     dispatch(requestDog());
//     return fetch('https://dog.ceo/api/breeds/image/random')
//      .then(response => response.json())
//      .then(json => dispatch(getImage(json)))
//      .catch(error => dispatch(failedRequest(error)))
//   };
// }

// const initialState = {
//   isFetching: false,
//   imagePath: '',
//   error: '',
// };

// function reducer(state = initialState, action) {
//   switch (action.type) {
//     case REQUEST_IMAGE:
//       return { ...state, isFetching: true };
//     case GET_IMAGE:
//       return { ...state, imagePath: action.payload, isFetching: false };
//     case FAILED_REQUEST:
//       return { ...state, error: action.payload, isFetching: false };
//     default:
//       return state;
//   }
// }

const store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));

// export default store;

                    03/03 - 15.5 - Testando com redux

Testando Redux

Quando conectamos o Redux ao React, algumas altera√ß√µes s√£o necess√°rias pra que a aplica√ß√£o funcione. Um exemplo √© o Provider . Como j√° visto, √© ele quem prov√™ o acesso ao estado de um reducer para os componentes.
Quando fazemos testes em React , o primeiro passo √© renderizar um componente no ambiente simulado dos testes. Geralmente esse componente √© o App.js . Por causa do necess√°rio uso do Provider em aplica√ß√µes react-redux, no momento dos testes tamb√©m temos que utilizar o Provider , ou ficaremos sem o acesso ao state .
Voc√™ se lembra da fun√ß√£o renderWithRouter utilizada para renderizar componentes que trafegam entre rotas? Para o Redux, temos uma fun√ß√£o parecida, chamada renderWithRedux:

const renderWithRedux = (
  component,
  { initialState, store = createStore(reducer, initialState) } = {}
) => {
  return {
    ...render(<Provider store={store}>{component}</Provider>),
    store,
  }
}

A fun√ß√£o renderWithRedux recebe um componente como primeiro par√¢metro e desconstr√≥i um objeto como o segundo. Ele obt√©m o valor de uma chave initialState desse objeto e o armazena em uma vari√°vel com o mesmo nome. Al√©m disso, ele atribui um valor padr√£o para a chave store , e esse valor √© uma nova store criada com um reducer importado e o initialState que voc√™ acabou de desconstruir. Leia esta fun√ß√£o com calma para ter certeza que voc√™ entendeu.
Ent√£o, isso basicamente renderiza o componente envolvido pela store que voc√™ criou para o contexto do seu teste. Ela tamb√©m retorna a pr√≥pria store , caso voc√™ precise acess√°-la diretamente em seu teste. Em resumo: a fun√ß√£o renderWithRedux acrescenta ao seu componente renderizado um store criado para os testes. Veremos como fazer isso mais a frente!
Vamos utilizar de exemplo um contador de cliques para criar os testes, rode os comandos e fa√ßa as altera√ß√µes necess√°rias nos arquivos descritos.
Crie o contador a partir de npx create-react-app e ap√≥s instale o redux e o react-redux com o comando npm install redux react-redux . Agora crie e/ou altere os arquivos abaixo:

// src/App.js
import React from 'react';
import { Provider } from 'react-redux';
import store from './store';
import ButtonClicks from './ButtonClicks';
import NumberClicks from './NumberClicks';
class App extends React.Component {
  render() {
    return (
      <div>
        <Provider store={store}>
          <ButtonClicks />
          <NumberClicks />
        </Provider>
      </div>
    );
  }
}
export default App;


// src/ButtonClicks.js
import React from 'react';
import { connect } from 'react-redux';
import addClick from './actions';
class ButtonClicks extends React.Component {
  render () {
    return (
      <div>
        <button onClick={this.props.add}>Clique aqui</button>
      </div>
    );
  }
}

const mapDispatchToProps = dispatch => ({
  add: () => dispatch(addClick())});
export default connect(null, mapDispatchToProps)(ButtonClicks);


// src/NumberClicks
import React from 'react';
import { connect } from 'react-redux';
class NumberClicks extends React.Component {
  render() {
    return <div>{this.props.counter}</div>;
  }
}

const mapStateToProps = state => ({
  counter: state.clickReducer.counter});

export default connect(mapStateToProps)(NumberClicks);


// src/store/index.js
import { createStore, combineReducers } from 'redux';
import clickReducer from '../reducers';
const rootReducer = combineReducers({ clickReducer });

const store = createStore(rootReducer);

export default store;


// src/reducers/index.js
const Initial_State = {
  counter: 0,
};
function clickReducer(state = Initial_State, action) {
  switch (action.type) {
    case 'ADD_CLICK':
      return { counter: state.counter + 1 };
    default:
      return state;
  }
}
export default clickReducer;


// src/actions/index.js
const addClick = () => ({ type: 'ADD_CLICK' });

export default addClick;


Teste a aplica√ß√£o utilizando o npm start , se tudo estiver funcionando corretamente, voc√™ ja pode seguir e come√ßar a criar os testes abaixo.
Para utilizar a fun√ß√£o renderWithRedux em nossos testes, √© necess√°rio tamb√©m fazer alguns imports:

import React from 'react'
import { Provider } from 'react-redux'
import { render, cleanup } from '@testing-library/react';
import App from './App';

Esses imports servem para termos acesso √†s ferramentas necess√°rias pra mockar o store.
Um detalhe muito importante: como √© utilizado um combineReducers na resolu√ß√£o do exerc√≠cio, quando formos implementar os testes, temos que criar o store mockado com a mesma estrutura do padr√£o. Portanto, vamos importar o combineReducers e adaptar a fun√ß√£o renderWithRedux para utiliz√°-lo.

// demais imports...
import { createStore, combineReducers } from 'redux';
import clickReducer from './reducers';

const renderWithRedux = (
  component,
  { initialState, store = createStore(combineReducers({ clickReducer }), initialState) } = {}
) => {
  return {
    ...render(<Provider store={store}>{component}</Provider>),
    store,
  }
}

Outro detalhe que pode ser notado √© que, no caso, nosso reducer se chama clickReducer , por isso temos que import√°-lo e us√°-lo com o nome correto.
Por √∫ltimo, mais uma mudan√ßa √© necess√°ria. Voc√™ aprendeu a utilizar o Redux colocando o Provider no arquivo App.js mas, para que os testes funcionem, √© necess√°rio que movamos o Provider para o index.js . Afinal de contas, n√≥s precisamos ignorar o store provido na aplica√ß√£o em favor do store que nossos testes proveem (e que podemos controlar!). Repare, portanto, que se renderizamos o componente <App /> nos testes n√≥s n√£o renderizamos o store da aplica√ß√£o, que est√° fora desse componente. Assim ficamos livres para criar um novo store que podemos controlar no ambiente de testes!

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import { Provider } from 'react-redux';
import store from './store';
import App from './App';

// Store provido pela nossa aplica√ß√£o. Nos testes, precisamos prover um novo store para podermos control√°-lo

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store} >
      <App />
    </Provider>
  </React.StrictMode>,
  document.getElementById('root')
);

Pronto! Adapta√ß√µes feitas, vamos para os testes!
Como primeiro teste, vamos averiguar se o bot√£o Clique aqui e o texto "0" est√£o na tela.

describe('testing clicks', () => {
  beforeEach(cleanup);
  test('the page should has a button and a text 0', () => {
    const { queryByText } = renderWithRedux(<App />);
    const buttonAdicionar = queryByText('Clique aqui');

    expect(buttonAdicionar).toBeInTheDocument();
    expect(queryByText('0')).toBeInTheDocument();
  });
});

Bastou usar a fun√ß√£o renderWithRedux no lugar do render, que os testes ocorreram perfeitamente. Note que n√£o passamos valor inicial algum para o clickReducer e por isso ele utilizou o valor padr√£o 0, definido no c√≥digo da aplica√ß√£o.
Caso seja interessante alterar o valor inicial do clickReducer , isso tamb√©m √© poss√≠vel passando como segundo par√¢metro para a fun√ß√£o renderWithRedux um objeto com as propriedades que respeitem o formato original do state . Isto √©:

const { queryByText } = renderWithRedux(<App />, { initialState: { clickReducer: { counter: 5 }}});

Observe: o objeto initialState representa o valor inicial do state . O clickReducer representa o reducer criado. O counter representa a propriedade que criamos dentro do nosso reducer . Vamos testar essa altera√ß√£o no estado inicial:

  test('a click in a button should increment the value of clicks', () => {
    const { queryByText } = renderWithRedux(<App />, { initialState: { clickReducer: { counter: 5 }}});

    expect(queryByText('5')).toBeInTheDocument();
  });


Testes ass√≠ncronos
No v√≠deo abaixo, vamos rever tudo que aprendemos hoje com um outro exemplo: uma aplica√ß√£o que faz requisi√ß√µes a uma API!
Recapitulando o c√≥digo que vimos, temos:

// src/helper/index.js
import React from 'react';
import { Provider } from 'react-redux';
import { render } from '@testing-library/react';
import { createStore, combineReducers, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import reducer from '../../reducers';

const createMockStore = (initialState) => (
  createStore(combineReducers({ reducer }), initialState, applyMiddleware(thunk))
);

const renderWithRedux = (
  component, { initialState, store = createMockStore(initialState) } = {},
) => ({
  ...render(<Provider store={ store }>{component}</Provider>),
  store});

export default renderWithRedux;

Aqui definimos o nosso renderWithRedux como acima, acrescentando ao mesmo o thunk para permitirmos o teste de fun√ß√µes ass√≠ncronas.

// src/App.test.js
import { fireEvent, waitFor } from '@testing-library/react';
import React from 'react';
import fetchMock from 'fetch-mock-jest';
import App from '../App';
import renderWithRedux from './helpers';

describe('P√°gina principal', () => {
  test('Testa que o bot√£o de adicionar cachorro est√° presente', async () => {
    const { queryByText } = renderWithRedux(<App />);
    const buttonDoguinho = queryByText('Novo Doguinho');

    expect(buttonDoguinho).toBeInTheDocument();

    fetchMock.getOnce('https://dog.ceo/api/breeds/image/random', {
      body: { message: 'myDogUrl' },
    });

    fireEvent.click(buttonDoguinho);
    await waitFor(() => expect(fetchMock.called()).toBeTruthy());
  });
});

Aqui n√≥s usamos a biblioteca fetch-mock-jest ( https://www.npmjs.com/package/fetch-mock-jest ) para facilitar a nossa execu√ß√£o de testes ass√≠ncronos! √â perfeitamente poss√≠vel fazer os testes sem ela tamb√©m, mas fica como sugest√£o para experimentarem!
*/

