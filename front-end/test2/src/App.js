import { Component } from 'react';
import './App.css';
import Home from './components/Home';
import About from './components/About'
import HowTo from './components/HowTo';
import Profile from './components/Profile';
import { BrowserRouter, Route, Switch } from 'react-router-dom'


class App extends Component {
  render() {
  return (
    <BrowserRouter>
      <Switch>
        <Route path='/about' component={About} /> {/* Se a minha url estiver direcionada para a path /about, eu renderizo o componente About */ }
        <Route path='/howto/:ship' render={(props)=> <HowTo {...props} name="Conte√∫do do How to"/>} /> {/* Passar uma prop pelo componente em  que estamos querendo renderezar chamamos o render e ao inv√©s de passarmos um componente, passamos uma call back, que ir√° retornar o componente renderizado. 2 "Pulos do gato": Poder√≠amos passar a prop pela call back (<HowTo name="Conte√∫do do How to"/>), outra op√ß√£o √© que o router passa um array de props e podemos usar isso captutando com spread operator, com isso teremos acessp a 3 props, history(traz o hist√≥rico do navegador), location e match(serve pra passar par√¢metro pela url atrav√©s do param), temos que colocar uma sintax no path tamb√©m, a :ship que significa que podemos colocar qualquer palavra na url e resgat√°-la no componente com a chave chip: <Route path='/howto/:ship' render={(props)=> <HowTo {...props}, do lado do componente (la no HowTo reagatamos (ver dentro do HowTo/>), com isso da pra resgatar api's*/}
        <Route path='/profile'><Profile /></Route> {/* Podemos passar o componente que queremos utilizar como filho do Route,  fazendo o uso de elemento children */ }
        <Route exact path='/' component={Home} /> {/* exact pra renderizar exatamente a url escrita */}
      </Switch>  
    </BrowserRouter>
  )}
}

export default App;

/*
//        Single Page Application

Antes de come√ßar a falar sobre React Router , √© preciso entender um tipo de aplica√ß√£o chamado Single Page Application ( SPA ), haja vista que aplica√ß√µes em React Router s√£o SPA s. S√£o p√°ginas web que n√£o precisam dar reload, o conceito de SPA que existem em v√°rias bibliotecas e frameworks de dev de front-end , n√£o s√≥ em react, serve pra voc√™ ter em uma √∫nica p√°gina web j√° na primeira vez que voc√™ acessa, toda navega√ß√£o, intera√ß√£o e carregamento de novas informa√ß√µes dela dinamicamente atrav√©s de l√≥gica de JS, baseado no que a pessoa faz. Foco 100% na experi√™ncia de quem usa, agilidade e efici√™ncia, com uma p√°gina flu√≠da, sem delay de um ponto ao outro.

//  props.children

Children √© uma √≥tima ferramenta para reutiliza√ß√£o de componentes. A utiliza√ß√£o √© bem simples, veja abaixo:
class App extends Component {
  render() {
    return (
      <div className='main'>
        <ComponentePai>
          <p>SUPIMPA</p>
        </ComponentePai>
      </div>
    )
  }
}
E dessa forma podemos acessar e exibir na tela o valor SUPIMPA no ComponentePai :
const ComponentePai = (props) => {
  return (
    <div>
      {props.children}
    </div>
  )
}
Nesse exemplo utilizamos uma tag p , mas note que poderia ser um ou v√°rios elementos de qualquer natureza, seja uma tag, ou at√© um componente. Ainda sim, ela √© acessada da mesma forma dentro de ComponentePai . √â importante perceber que, no caso acima, props.children √© um objeto por ser apenas um elemento. Caso o ComponentePai esteja com mais de um elemento dentro como no exemplo abaixo, props.children se torna um array de objetos , com as informa√ß√µes de cada filho.
class App extends Component {
  render() {
    return (
      <div className='main'>
        <ComponentePai>
          <p>SUPIMPA</p>
          <h1>BACANA</h1>
          <span>INCR√çVEL</span>
        </ComponentePai>
      </div>
    )
  }
}

//      Instala√ß√£o React Router Dom

Para poder fazer uso de React Router , √© preciso que se instale em uma aplica√ß√£o React o pacote react-router-dom:
npm install react-router-dom@v5
Recentemente foi lan√ßada uma atualiza√ß√£o para o pacote react-router-dom que trouxe breaking changes , ou seja, mudan√ßas que n√£o s√£o compat√≠veis com as vers√µes anteriores. Por isso √© importante que voc√™ instale o react-router-dom na vesr√£o especificada acima, para que os exemplos da aula funcionem corretamente.

//      Componentes BrowserRouter e Route

Em suma:
1) BrowserRouter √© o componente que encapsula a sua aplica√ß√£o, de forma a te possibilitar fazer uso de navega√ß√£o.
2) Route √© o componente fundamental em React Router , que estabelece o mapeamento entre o caminho de URL declarado com o componente. Tal mapeamento, no que diz respeito √† correspond√™ncia entre o caminho da URL atual e a presente no componente, pode ser feito das seguintes formas, ilustradas pelos seguintes exemplos:
a) <Route path="/about" component={About} /> : l√™-se que se o caminho da URL atual do navegador come√ßa com o caminho /about , como declarado na prop path no componente Route , h√° uma correspond√™ncia entre os caminhos da URL e do componente Route , e o componente About ser√° renderizado. Ou seja, se o caminho da URL atual for /home , n√£o h√° correspond√™ncia, logo o componente About n√£o ser√° renderizado. Entretanto, se a URL atual for /about ou /about/me , h√° correspond√™ncia, e o componente About √© renderizado. O par√¢metro exact entra em a√ß√£o quando voc√™ tem v√°rios caminhos com nomes semelhantes.
b) <Route exact path="/about" component={About} /> : l√™-se que, se houver uma correspond√™ncia exata entre o caminho da URL atual e o caminho /about declarado em Route , o componente ser√° renderizado. Ou seja, se o caminho da URL atual for /home ou /about/me , n√£o h√° correspond√™ncia exata, logo o componente About n√£o ser√° renderizado. Entretanto, se a URL atual for /about , h√° correspond√™ncia exata, e o componente About ser√° renderizado.
OBS : Al√©m dessas duas formas de renderiza√ß√£o de componente com Route , voc√™ pode fazer uso de elemento children. Ou seja, se voc√™ tiver a rota <Route path="/about" component={About} /> , voc√™ tamb√©m poder√° fazer da seguinte forma:
    <Route path="/about" >
      <About />
    </Route>
3) Se houver v√°rios componentes apresentando correspond√™ncia entre seu caminho de URL e o caminho atual da aplica√ß√£o, todos os componentes apresentando correspond√™ncia ser√£o renderizados . Ou seja, suponha que houvesse a seguinte lista de componentes do tipo Route:
<Route path="/about" component={About} />
<Route path="/contact" component={Contact} />
<Route path="/" component={Home} />
Se o caminho atual da URL da aplica√ß√£o for / , todos esses componentes ser√£o renderizados, haja vista que todas as rotas n√£o fazem correspond√™ncia exata entre o caminho da URL atual e o definido via prop path , e fazer path="/" faz correspond√™ncia com qualquer caminho de URL ;
Agora, se o caminho atual da URL da aplica√ß√£o for /contact , os componentes Contact e Home ser√£o renderizados. Isso pode ser um problema, e uma forma de atac√°-lo √© organizar essas rotas via componente Switch , que voc√™ ver√° com mais detalhes em instantes. üòâ
*/

/*
Componente Switch
O componente Switch √© usado para encapsular um conjunto de rotas que voc√™ definiu via Route , conforme podemos observar na imagem abaixo:


Dada a URL atual da aplica√ß√£o, o Switch procura de cima para baixo pelo primeiro Route que possuir correspond√™ncia entre seu caminho definido na prop path do componente e a URL atual da aplica√ß√£o. Ou seja, se tivermos um Switch com as rotas abaixo:
<Switch>
  <Route path="/about" component={About} />
  <Route path="/contact" component={Contact} />
  <Route path="/movies" component={Movies} />
  <Route path="/" component={Home} />
  <Route path="*" component={NotFound} /> // exemplo de notFound 404
</Switch>
Ao mudarmos a URL da aplica√ß√£o para que seu caminho seja /contact , somente o componente Contact ser√° renderizado.
Todos os filhos de um Switch devem ser Route ou Redirect . Apenas o primeiro filho que corresponder ao local atual ser√° renderizado. Se n√£o houvesse o Switch mais de um componente poderia ser renderizado na mesma rota de forma errada.
Em uma compara√ß√£o direta, √© como o switch case do javascript :
√â apenas uma compara√ß√£o, n√£o utilize o exemplo abaixo.
  switch (rota) {
    case '/about':
      return <About />;
    case '/contact':
      return <Contact />;
    case '/movies':
      return <Movies />;
    default:
      return <Home />
  }

  Componente Redirect
Conforme o pr√≥prio nome diz, Redirect √© um componente que permite ativamente levar quem usa a aplica√ß√£o para diferentes locais dela. Um caso de uso bastante comum de Redirect √© autentica√ß√£o: a pessoa s√≥ pode acessar informa√ß√µes sens√≠veis (tipo conta banc√°ria) de uma aplica√ß√£o se ela j√° estiver autenticada; caso contr√°rio, ela √© redirecionada para uma p√°gina de login. Veja um exemplo de utiliza√ß√£o abaixo:
  <Switch>
    <Route path="/dashboard" component={Dashboard} />
    <Route exact path="/">
      {logado ? <Redirect to="/dashboard" /> : <Login />}
    </Route>
  </Switch>
Caso a aplica√ß√£o tenha o caminho / ser√° feita uma verifica√ß√£o na vari√°vel logado , no caso de true a p√°gina ser√° redirecionada para o caminho /dashboard e ent√£o renderizar√° o componente Dashboard , caso contr√°rio, renderizar√° o componente Login .
D√™ sempre prioridade para a utiliza√ß√£o de Redirect para redirecionar, uma vez que, ele √© criado para isso.
Para que voc√™ tenha um pouco mais de contexto, observe a imagem abaixo que compara o Link e o Redirect:

Entendendo o fluxo dos componentes do React Router




Main Group 7: 
List Products = Primeira Tela
Products = Product Container
Shop Cart = Cart

primeira tela: cart = bycart , product = newProduct
cart = prod = produto 

AddProduct = AddProductToCart em ProducDetail

AddProductToCart em ListProduct
*/