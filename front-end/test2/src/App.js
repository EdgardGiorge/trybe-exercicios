import { Component } from 'react';
import './App.css';
import Home from './components/Home';
import About from './components/About'
import HowTo from './components/HowTo';
import Profile from './components/Profile';
import { BrowserRouter, Route, Switch } from 'react-router-dom'


class App extends Component {
  render() {
  return (
    <BrowserRouter>
      <Switch>
        <Route path='/about' component={About} /> {/* Se a minha url estiver direcionada para a path /about, eu renderizo o componente About */ }
        <Route path='/howto/:ship' render={(props)=> <HowTo {...props} name="Conte√∫do do How to"/>} /> {/* Passar uma prop pelo componente em  que estamos querendo renderezar chamamos o render e ao inv√©s de passarmos um componente, passamos uma call back, que ir√° retornar o componente renderizado. 2 "Pulos do gato": Poder√≠amos passar a prop pela call back (<HowTo name="Conte√∫do do How to"/>), outra op√ß√£o √© que o router passa um array de props e podemos usar isso captutando com spread operator, com isso teremos acessp a 3 props, history(traz o hist√≥rico do navegador), location e match(serve pra passar par√¢metro pela url atrav√©s do param), temos que colocar uma sintax no path tamb√©m, a :ship que significa que podemos colocar qualquer palavra na url e resgat√°-la no componente com a chave chip: <Route path='/howto/:ship' render={(props)=> <HowTo {...props}, do lado do componente (la no HowTo reagatamos (ver dentro do HowTo/>), com isso da pra resgatar api's*/}
        <Route path='/profile'><Profile /></Route> {/* Podemos passar o componente que queremos utilizar como filho do Route,  fazendo o uso de elemento children */ }
        <Route exact path='/' component={Home} /> {/* exact pra renderizar exatamente a url escrita */}
      </Switch>  
    </BrowserRouter>
  )}
}

export default App;

/*
//        Single Page Application

Antes de come√ßar a falar sobre React Router , √© preciso entender um tipo de aplica√ß√£o chamado Single Page Application ( SPA ), haja vista que aplica√ß√µes em React Router s√£o SPA s. S√£o p√°ginas web que n√£o precisam dar reload, o conceito de SPA que existem em v√°rias bibliotecas e frameworks de dev de front-end , n√£o s√≥ em react, serve pra voc√™ ter em uma √∫nica p√°gina web j√° na primeira vez que voc√™ acessa, toda navega√ß√£o, intera√ß√£o e carregamento de novas informa√ß√µes dela dinamicamente atrav√©s de l√≥gica de JS, baseado no que a pessoa faz. Foco 100% na experi√™ncia de quem usa, agilidade e efici√™ncia, com uma p√°gina flu√≠da, sem delay de um ponto ao outro.

//  props.children

Children √© uma √≥tima ferramenta para reutiliza√ß√£o de componentes. A utiliza√ß√£o √© bem simples, veja abaixo:
class App extends Component {
  render() {
    return (
      <div className='main'>
        <ComponentePai>
          <p>SUPIMPA</p>
        </ComponentePai>
      </div>
    )
  }
}
E dessa forma podemos acessar e exibir na tela o valor SUPIMPA no ComponentePai :
const ComponentePai = (props) => {
  return (
    <div>
      {props.children}
    </div>
  )
}
Nesse exemplo utilizamos uma tag p , mas note que poderia ser um ou v√°rios elementos de qualquer natureza, seja uma tag, ou at√© um componente. Ainda sim, ela √© acessada da mesma forma dentro de ComponentePai . √â importante perceber que, no caso acima, props.children √© um objeto por ser apenas um elemento. Caso o ComponentePai esteja com mais de um elemento dentro como no exemplo abaixo, props.children se torna um array de objetos , com as informa√ß√µes de cada filho.
class App extends Component {
  render() {
    return (
      <div className='main'>
        <ComponentePai>
          <p>SUPIMPA</p>
          <h1>BACANA</h1>
          <span>INCR√çVEL</span>
        </ComponentePai>
      </div>
    )
  }
}

//      Instala√ß√£o React Router Dom

Para poder fazer uso de React Router , √© preciso que se instale em uma aplica√ß√£o React o pacote react-router-dom:
npm install react-router-dom@v5
Recentemente foi lan√ßada uma atualiza√ß√£o para o pacote react-router-dom que trouxe breaking changes , ou seja, mudan√ßas que n√£o s√£o compat√≠veis com as vers√µes anteriores. Por isso √© importante que voc√™ instale o react-router-dom na vesr√£o especificada acima, para que os exemplos da aula funcionem corretamente.

//      Componentes BrowserRouter e Route

Em suma:
1) BrowserRouter √© o componente que encapsula a sua aplica√ß√£o, de forma a te possibilitar fazer uso de navega√ß√£o.
2) Route √© o componente fundamental em React Router , que estabelece o mapeamento entre o caminho de URL declarado com o componente. Tal mapeamento, no que diz respeito √† correspond√™ncia entre o caminho da URL atual e a presente no componente, pode ser feito das seguintes formas, ilustradas pelos seguintes exemplos:
a) <Route path="/about" component={About} /> : l√™-se que se o caminho da URL atual do navegador come√ßa com o caminho /about , como declarado na prop path no componente Route , h√° uma correspond√™ncia entre os caminhos da URL e do componente Route , e o componente About ser√° renderizado. Ou seja, se o caminho da URL atual for /home , n√£o h√° correspond√™ncia, logo o componente About n√£o ser√° renderizado. Entretanto, se a URL atual for /about ou /about/me , h√° correspond√™ncia, e o componente About √© renderizado. O par√¢metro exact entra em a√ß√£o quando voc√™ tem v√°rios caminhos com nomes semelhantes.
b) <Route exact path="/about" component={About} /> : l√™-se que, se houver uma correspond√™ncia exata entre o caminho da URL atual e o caminho /about declarado em Route , o componente ser√° renderizado. Ou seja, se o caminho da URL atual for /home ou /about/me , n√£o h√° correspond√™ncia exata, logo o componente About n√£o ser√° renderizado. Entretanto, se a URL atual for /about , h√° correspond√™ncia exata, e o componente About ser√° renderizado.
OBS : Al√©m dessas duas formas de renderiza√ß√£o de componente com Route , voc√™ pode fazer uso de elemento children. Ou seja, se voc√™ tiver a rota <Route path="/about" component={About} /> , voc√™ tamb√©m poder√° fazer da seguinte forma:
    <Route path="/about" >
      <About />
    </Route>
3) Se houver v√°rios componentes apresentando correspond√™ncia entre seu caminho de URL e o caminho atual da aplica√ß√£o, todos os componentes apresentando correspond√™ncia ser√£o renderizados . Ou seja, suponha que houvesse a seguinte lista de componentes do tipo Route:
<Route path="/about" component={About} />
<Route path="/contact" component={Contact} />
<Route path="/" component={Home} />
Se o caminho atual da URL da aplica√ß√£o for / , todos esses componentes ser√£o renderizados, haja vista que todas as rotas n√£o fazem correspond√™ncia exata entre o caminho da URL atual e o definido via prop path , e fazer path="/" faz correspond√™ncia com qualquer caminho de URL ;
Agora, se o caminho atual da URL da aplica√ß√£o for /contact , os componentes Contact e Home ser√£o renderizados. Isso pode ser um problema, e uma forma de atac√°-lo √© organizar essas rotas via componente Switch , que voc√™ ver√° com mais detalhes em instantes. üòâ
*/

/*
Componente Switch
O componente Switch √© usado para encapsular um conjunto de rotas que voc√™ definiu via Route , conforme podemos observar na imagem abaixo:


Dada a URL atual da aplica√ß√£o, o Switch procura de cima para baixo pelo primeiro Route que possuir correspond√™ncia entre seu caminho definido na prop path do componente e a URL atual da aplica√ß√£o. Ou seja, se tivermos um Switch com as rotas abaixo:
<Switch>
  <Route path="/about" component={About} />
  <Route path="/contact" component={Contact} />
  <Route path="/movies" component={Movies} />
  <Route path="/" component={Home} />
  <Route path="*" component={NotFound} /> // exemplo de notFound 404
</Switch>
Ao mudarmos a URL da aplica√ß√£o para que seu caminho seja /contact , somente o componente Contact ser√° renderizado.
Todos os filhos de um Switch devem ser Route ou Redirect . Apenas o primeiro filho que corresponder ao local atual ser√° renderizado. Se n√£o houvesse o Switch mais de um componente poderia ser renderizado na mesma rota de forma errada.
Em uma compara√ß√£o direta, √© como o switch case do javascript :
√â apenas uma compara√ß√£o, n√£o utilize o exemplo abaixo.
  switch (rota) {
    case '/about':
      return <About />;
    case '/contact':
      return <Contact />;
    case '/movies':
      return <Movies />;
    default:
      return <Home />
  }

  Componente Redirect
Conforme o pr√≥prio nome diz, Redirect √© um componente que permite ativamente levar quem usa a aplica√ß√£o para diferentes locais dela. Um caso de uso bastante comum de Redirect √© autentica√ß√£o: a pessoa s√≥ pode acessar informa√ß√µes sens√≠veis (tipo conta banc√°ria) de uma aplica√ß√£o se ela j√° estiver autenticada; caso contr√°rio, ela √© redirecionada para uma p√°gina de login. Veja um exemplo de utiliza√ß√£o abaixo:
  <Switch>
    <Route path="/dashboard" component={Dashboard} />
    <Route exact path="/">
      {logado ? <Redirect to="/dashboard" /> : <Login />}
    </Route>
  </Switch>
Caso a aplica√ß√£o tenha o caminho / ser√° feita uma verifica√ß√£o na vari√°vel logado , no caso de true a p√°gina ser√° redirecionada para o caminho /dashboard e ent√£o renderizar√° o componente Dashboard , caso contr√°rio, renderizar√° o componente Login .
D√™ sempre prioridade para a utiliza√ß√£o de Redirect para redirecionar, uma vez que, ele √© criado para isso.
Para que voc√™ tenha um pouco mais de contexto, observe a imagem abaixo que compara o Link e o Redirect:

Entendendo o fluxo dos componentes do React Router




Main Group 7: 
List Products = Primeira Tela
Products = Product Container
Shop Cart = Cart

primeira tela: cart = bycart , product = newProduct
cart = prod = produto 

AddProduct = AddProductToCart em ProducDetail

AddProductToCart em ListProduct

08/02 - 13.1 ‚Äì Metodologias √°geis

Os m√©todos √°geis buscam promover um processo de gerenciamento de projetos que incentiva a inspe√ß√£o e adapta√ß√£o frequente. √â uma filosofia que acaba por incentivar o maior trabalho em equipe, a auto-organiza√ß√£o, a comunica√ß√£o frequente, o foco no cliente e a entrega de valor.
Basicamente, os m√©todos √°geis s√£o um conjunto de pr√°ticas eficazes que se destinam a permitir a entrega r√°pida e de alta qualidade do produto, tendo uma abordagem de neg√≥cios que alinha o desenvolvimento do projeto com as necessidades do cliente e os objetivos da empresa.
Pilares do manifesto √Ågil:
1- Indiv√≠duos e intera√ß√µes mais que processos e ferramentas
2- Software em funcionamento mais que documenta√ß√£o abrangente
3- Colabora√ß√£o com o cliente mais que negocia√ß√£o de contratos
4- Responder a mudan√ßas mais que seguir um plano
√â importante frisar que os itens da direita possuem valor no manifesto, mas os da esquerda devem estar em posi√ß√£o de destaque.
Os frameworks s√£o ferramentas que t√™m como base os princ√≠pios √°geis e podem ser implantados em times ou empresas que desejam incorporar o Agile em suas pr√°ticas. Entretanto, nem sempre √© poss√≠vel seguir as regras dos frameworks ao p√© da letra. Por isso, h√° quem advogue que os princ√≠pios √°geis devem ser adaptados √† realidade de cada √°rea ou organiza√ß√£o. Afinal, o mais importante √© que os princ√≠pios fundamentais se mantenham e cumpram com o objetivo de facilitar e agilizar os processos e as entregas da equipe, sem gerar complexidade desnecess√°ria.
Scrum
Scrum √© um framework para gest√£o e planejamento de projetos. As equipes que trabalham neste m√©todo, geralmente, s√£o divididas em Product Owner (PO) , Scrum Master e Scrum Team (ou Time de Desenvolvimento ). Voc√™, como pessoa desenvolvedora, dever√°, geralmente, integrar a equipe desta √∫ltima parte da divis√£o.
As Metodologias √°geis de desenvolvimento de software s√£o iterativas, ou seja, o trabalho √© dividido em itera√ß√µes (ciclos). No Scrum, os projetos s√£o divididos em ciclos chamados de Sprints .
O Sprint representa um espa√ßo de tempo, normalmente de 2 a 4 semanas, no qual um conjunto de atividades deve ser executado. As funcionalidades a serem implementadas em um projeto s√£o mantidas em uma lista que √© conhecida como Product Backlog . Este material cont√©m todas as funcionalidades que foram elencadas como importantes para quem usa o produto, e √© responsabilidade do PO definir seu conte√∫do. Estas informa√ß√µes n√£o precisam necessariamente estar dispon√≠veis no in√≠cio de um projeto, podendo ser acrescidas, alteradas e melhoradas √† medida que se aprende mais sobre o produto e quem o usa.
O pr√≥ximo passo √© conectar o que foi priorizado pela pessoa PO com o Scrum Team . Para isso, no in√≠cio de cada Sprint , faz-se um Sprint Planning Meeting , ou seja, uma reuni√£o de planejamento na qual a pessoa PO prioriza os itens do Product Backlog e a equipe seleciona as atividades que ela ser√° capaz de implementar durante o Sprint que se inicia, originando o Sprint Backlog . Para entender melhor o Scrum e a Sprint Planning , vamos a um v√≠deo:
O status das tarefas do Sprint Backlog ser√° atualizado pela pessoa que for Scrum Master . Este papel entra para fazer a gest√£o dos valores e das pr√°ticas do Scrum , assegurando sua funcionalidade e garantindo que o que foi selecionado pode e deve ser entregue ao final do ciclo. √â comum observar que, em algumas empresas, o papel de Scrum Master √© desempenhado pela mesma pessoa que √© lideran√ßa t√©cnica do time de desenvolvimento (Tech Lead). Nestes casos, n√£o existe uma pessoa que faz exclusivamente o papel de Scrum Master. Nas empresas que possuem uma pessoa com fun√ß√£o exclusiva de Scrum Master, os pap√©is de Scrum Master e Tech Lead s√£o separados. Isso quer dizer que, apesar da pessoa Scrum Master assumir uma responsabilidade importante de gest√£o das pr√°ticas √°geis do time, a lideran√ßa do time de desenvolvimento continua sendo o(a) Tech Lead.
Al√©m das tarefas citadas, a pessoa Scrum Master atuar√° como facilitadora da Daily Meeting (ou Daily Scrum ou DM ), uma reuni√£o di√°ria como o objetivo de disseminar a evolu√ß√£o do projeto, e identificar impedimentos que podem ser resolvidos com ajuda dos membros da equipe. A Daily deve ser breve, e cada integrante deve basicamente responder √† tr√™s perguntas:
a) O que voc√™ fez ontem?
b) O que far√° hoje?
c) H√° algum impedimento no seu caminho?
Finalmente, faz-se uma Sprint Retro Meeting (ou Sprint Retrospective ), onde s√£o apontados os pontos positivos e negativos do √∫ltimo Sprint , assim como a√ß√µes para mitigar os pontos negativos e evitar que se repitam. Ap√≥s essa reuni√£o, a equipe parte para o planejamento do pr√≥ximo Sprint .
Assim, reinicia-se o ciclo, levando em considera√ß√£o os aprendizados da √∫ltima itera√ß√£o. A figura abaixo ilustra o ciclo que voc√™ estudou:




Kanban
O m√©todo Kanban foi criado pela japonesa Toyota na d√©cada de 1960 e faz parte da metodologia Just in Time , um sistema de administra√ß√£o da produ√ß√£o que determina que deve ser feito somente o imprescind√≠vel para realiza√ß√£o da etapa seguinte do processo, em um fluxo de trabalho cont√≠nuo. Em outras palavras: fazer apenas o que √© necess√°rio, quando necess√°rio e na quantidade necess√°ria.
Em meio √† falta de recursos e diante da necessidade de se modernizar para acompanhar as mudan√ßas do mercado, a empresa precisava mudar sua metodologia de gest√£o e procurar por uma Gest√£o por Resultados , ou seja um modelo que priorizasse os resultados de todos os colaboradores que nele atuam, permitindo que os gestores e seus times avan√ßassem cautelosamente, por√©m de forma cont√≠nua e produtiva.
Era preciso agir r√°pido e urgentemente para criar um novo sistema de manufatura. Assim, inspirados pelo livro Today and Tomorrow , de Henry Ford, a diretoria da Toyota desenvolveu o Kanban .
Diante das dificuldades da √©poca, o fato do Kanban ser bastante visual facilitou muito o trabalho das equipes de produ√ß√£o e montagem. O sistema melhorou a comunica√ß√£o entre as pessoas que trabalhavam na empresa, bem como o entendimento de quais pe√ßas precisavam ser repostas no momento correto. A padroniza√ß√£o tamb√©m foi auxiliada pelo sistema, assim como a redu√ß√£o de desperd√≠cios.
A metodologia Kanban prop√µe a utiliza√ß√£o de cart√µes ou post-its em um quadro para indicar e acompanhar, de maneira visual, pr√°tica e utilizando poucos recursos, o andamento dos fluxos de produ√ß√£o nas empresas. De um lado do quadro, ficam as tarefas que precisam ser executadas, o que pode ser chamado de Backlog , que assim como no Scrum , s√£o as funcionalidades e objetivos do projeto como um todo, podendo ou n√£o estarem completamente prontos nos processos iniciais de desenvolvimento. E, do outro, as etapas de execu√ß√£o: em andamento e entregue. Voc√™ pode alterar o nome dessas etapas de acordo com seus processos internos. Conforme as tarefas s√£o desempenhadas, o cart√£o ou post-it √© colocado no campo correspondente ao status da tarefa.
Assista ao v√≠deo abaixo para complementar o conhecimento relacionado ao Kanban:
Os benef√≠cios do sistema Kanban
O Kanban nada mais √© que uma maneira simples e visual de organizar as tarefas e o fluxo de trabalho, tornando tudo muito mais eficiente. Os benef√≠cios do sistema Kanban s√£o:
a) Vis√£o do todo;
b) Simplicidade;
c) Acesso a informa√ß√µes;
d) Facilita√ß√£o do fluxo de trabalho;
e) Incentivo √† comunica√ß√£o;
f) Prioridade e metas claras.
Vis√£o do todo
Seja f√≠sico ou digital, o Kanban √© visual. Isso √© especialmente √∫til em situa√ß√µes em que v√°rias pessoas ou grupos coordenam e cooperam em um mesmo projeto, ou processo, permitindo que essas pessoas planejem suas tarefas atuais e as seguintes. O Kanban oferece uma vis√£o do todo, ou seja, uma perspectiva hol√≠stica de um processo. Ao inv√©s de fazer com que as pessoas trabalhem isoladamente, o sistema Kanban permite que todas as pessoas na organiza√ß√£o tenham uma melhor compreens√£o e aprecia√ß√£o do que outras pessoas e equipes est√£o fazendo. A lideran√ßa de √°rea, por sua vez, consegue ter uma vis√£o concreta de quem est√° fazendo o qu√™ e quantas etapas faltam para um projeto ser finalizado.
Simplicidade
A ideia e o conceito por tr√°s do Kanban s√£o simples. √â isso que o torna atraente para quase todas as √°reas de uma organiza√ß√£o. A simplicidade permite que todas as pessoas participem com mais facilidade e comprem a ideia.
Acesso √† informa√ß√£o
O Kanban tem processos inclusivos, que permitem que as pessoas tenham acesso a mais informa√ß√µes. Ele d√° √†s pessoas mais conhecimento corporativo, o que √© particularmente √∫til para aquelas que t√™m pouco entendimento de um sistema complexo, como, por exemplo, as pessoas rec√©m-contratadas. No fim da cadeia, ele d√° poder √†s pessoas e incentiva a autonomia.
Facilita√ß√£o do fluxo de trabalho
O Kanban contribui para que haja menos desperd√≠cio nas opera√ß√µes, tornando tudo mais pr√°tico e conciso. Partes redundantes ou desnecess√°rias de um processo podem ser removidas, enquanto outras podem ser simplificadas. Ou seja, o fluxo de trabalho pode ser facilitado, sem comprometer a qualidade. Isso significa uma constante melhora na produtividade.
Incentivo √† comunica√ß√£o
Como o uso do Kanban fornece uma vis√£o do todo, isso incentiva uma melhor coopera√ß√£o e comunica√ß√£o entre pessoas e equipes. As pessoas que trabalham na empresa poder√£o ajustar melhor seus cronogramas e prazos, porque sabem exatamente o que as outras pessoas est√£o fazendo. Por extens√£o, isso tamb√©m serve como meio de controle e equil√≠brio, no qual as inefici√™ncias e gargalos ao longo do processo podem ser eliminados.
Prioridades e metas claras
O Kanban aprimora a capacidade de foco, pois, al√©m do uso do WIP limit , o time tem uma vis√£o ampla dos processos e do fluxo de trabalho, e a ger√™ncia fica mais capacitada para decidir o que de deve ser priorizado para atingir os objetivos e metas estabelecidas.

15/02 - 14.1 - React Testing Library: Primeiros Passos
Introdu√ß√£o ao RTL
No conte√∫do de testes j√° visto no curso, fun√ß√µes eram testadas. J√° no RTL o objetivo √© testar comportamento, como se algo aparece ou n√£o na tela. Por exemplo:
Podemos testar se a nossa p√°gina possui um t√≠tulo espec√≠fico (igual aos requisitos que se pedem no projeto!);
Em uma lista de tarefas, como o projeto Todo list , precisamos verificar, por exemplo, se a funcionalidade de adicionar uma nova tarefa funciona. Para isso, devemos simular o comportamento de quem usa, que seria adicionar um texto no campo de texto alvo e clicar no bot√£o que adiciona a nova tarefa. Para testar se funcionou, verificamos se o texto aparece em algum lugar da p√°gina. O RTL nos d√° as ferramentas necess√°rias para realizar essa simula√ß√£o!
Esses s√£o apenas alguns dentre muitos exemplos! Agora veremos a estrutura desses testes e suas ferramentas:
Crie uma nova aplica√ß√£o com o comando npx create-react-app testes-react .
N√£o se preocupe! A biblioteca RTL j√° vem instalada nos novos projetos.
Abra a aplica√ß√£o no VSCode e abra o arquivo App.test.js . Ele est√° dentro do diret√≥rio src .
Observe o arquivo App.test.js :

import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
O que ele est√° fazendo √© verificar se algum elemento dentro do componente App possui o texto "learn react" ( /string/i √© utilizado para ignorar case sensitive , ou seja, n√£o diferenciar letras mai√∫sculas e min√∫sculas). Para rodar os testes v√° para a pasta src e execute npm test .
Caso apare√ßa a mensagem abaixo basta clicar a tecla "a", pra rodar todos os testes ‚Äúpress a to run all tests.‚Äù
Como pode ver, o nosso √∫nico teste passou. Quer dizer que existe o texto "learn react" dentro do componente App ! Se rodar aplica√ß√£o com o npm start , voc√™ encontrar√° o texto "learn react", conforme indicado pelo teste.
Agora vamos provocar um erro ou uma falha. Mude o texto "learn react" para "algo que n√£o aparece" e rode o teste. Seu terminal acusar√° erro.
Ele est√° falando que n√£o foi poss√≠vel encontrar um elemento que possui o texto "/algo que n√£o aparece/i".
D√™ uma olhada na cheatsheet da react-testing-library . Ela explica de forma resumida como a biblioteca funciona. Nos aprofundaremos nas explica√ß√µes ao longo deste bloco!
üí° Voc√™ ja reparou no arquivo setupTests.js ? Por padr√£o ele √© criado junto ao comando npx create-react-app , dentro dele temos coment√°rios e uma importa√ß√£o, essa importa√ß√£o fornece para nossos testes o que chamamos de custom jest matchers . O .toBeInTheDocument() no exemplo acima √© um deles, e voc√™ pode consultar outros na documenta√ß√£o do jest-dom (https://github.com/testing-library/jest-dom )sempre que precisar.
Agora veremos cada parte do c√≥digo para entender como que a biblioteca de teste funciona. Para testar uma aplica√ß√£o precisamos seguir alguns passos:
Renderiza√ß√£o
Testar um componente significa, em poucas palavras, renderiz√°-lo em um browser real ou numa simula√ß√£o de um browser e testar nele o comportamento desejado. Na RTL , √© necess√°rio o uso da fun√ß√£o render() para fazer isso. A fun√ß√£o render() faz a renderiza√ß√£o de um componente em mem√≥ria para que se possa simular as intera√ß√µes com esse componente.
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
Para usar o seletor/query getByText , precisamos usar o screen.getByText . Observe que ele √© muito parecido com os seletores do DOM, como o document.getElementById() ou document.querySelector() . Seguindo a mesma l√≥gica, ao usar o screen.getByText() , ele retornar√° um elemento html. A vantagem de utilizar o screen √© que voc√™ n√£o precisar√° atualizar e desestruturar a chamada do render para todo teste que voc√™ fizer, pois √© poss√≠vel consultar e utilizar todos os elementos do DOM atrav√©s do pr√≥prio screen . Em outras palavras, ele receber√° um objeto com os elementos contidos no DOM e voc√™ poder√° acessar as propriedades desse objeto atrav√©s dele.
Seletores
Seletores ou Queries s√£o m√©todos que usamos para indicar ao RTL algum elemento da nossa aplica√ß√£o e assim podermos realizar nossos testes e compara√ß√µes.
Veremos agora algumas formas de buscar por algum elemento HTML. No exemplo foi visto apenas o getByText que busca por um elemento que possui um determinado texto.
Todos os seletores (queries) est√£o dispon√≠veis nessa lista de queries da react-testing-library , mas n√£o √© necess√°rio ler toda a documenta√ß√£o! Use-a para tirar d√∫vidas ou procurar algum assunto espec√≠fico. Veremos algumas queries durante a aula.
Mas como fazer para buscar um elemento que n√£o possui um texto? Como um input? Para isso, existem outros seletores.
Vamos acrescentar um input de email ao arquivo App.js :
// App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
    </div>
  );
}

export default App;
Pronto, mudamos a estrutura e adicionamos um campo email com uma label dentro do nosso arquivo App.js . Agora precisamos testar se esse input est√°, de fato, aparecendo na tela. Como ele n√£o possui um texto, n√£o podemos usar o getByText , mas podemos usar o getByLabelText , onde ele pegar√° o input de acordo com o texto da label que est√° associado a ele. Nesse caso, o input est√° relacionado com a label Email .
// App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('Verificando se existe o campo Email.', () => {
  render(<App />);
  const inputEmail = screen.getByLabelText('Email');
  expect(inputEmail).toBeInTheDocument();
  expect(inputEmail).toHaveProperty('type', 'email');
});
Como pode ver, mudamos os expects tamb√©m, verificando se o elemento est√° na tela e √© do tipo correto.
Mas e se um campo n√£o tiver texto e nem label? Podemos usar o getByRole . Ele busca pelo atributo role. No caso de um bot√£o, o role √© definido pela propriedade type="button" . O role serve, por exemplo, para buscar por um elemento <button>Enviar<button/> ou <input type="button" value="Enviar" /> .
Adicione um bot√£o ao App.js .
// App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
      <input id="btn-send" type="button" value="Enviar" />
    </div>
  );
}

export default App;
Adicione o teste abaixo dentro do arquivo App.test.js :
test('Verificando se existe um bot√£o', () => {
  render(<App />);
  const btn = screen.getByRole('button');
  expect(btn).toBeInTheDocument();
});
Agora adicione um novo bot√£o na aplica√ß√£o.
// App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
      <input id="btn-send" type="button" value="Enviar" />
      <input id="btn-back" type="button" value="Voltar" />
    </div>
  );
}

export default App;
Note que, ao rodar os testes, ocorre um erro. O que acontece √© que o getByRole espera encontrar apenas um elemento, mas acaba encontrando dois, o bot√£o de Enviar e o de Voltar , pois os dois possuem o role button , retornando a mensagem Found multiple elements with the role "button" . Para resolver esse problema precisamos usar outro seletor, o getAllByRole , que armazenar√° todos os valores encontrados pelo seletor em um array. Para testar precisamos mudar o teste para:
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('Verificando se existe o campo Email.', () => {
  render(<App />);
  const inputEmail = screen.getByLabelText('Email');
  expect(inputEmail).toBeInTheDocument();
  expect(inputEmail).toHaveProperty('type', 'email');
});

// test('Verificando se existe um bot√£o', () => {
//   const { getByRole } = render(<App />);
//   const btn = getByRole('button');
//   expect(btn).toBeInTheDocument();
// });

test('Verificando se existe dois bot√µes', () => {
  render(<App />);
  const buttons = screen.getAllByRole('button');
  expect(buttons).toHaveLength(2);
});
Observe que usamos buttons juntamente com toHaveLength para verificar se foram encontrados dois bot√µes. N√£o precisamos usar o toBeInTheDocument para realizar a verifica√ß√£o de presen√ßa no documento!
Foi necess√°rio comentar o nosso segundo teste para n√£o ocorrer um erro. Vamos modific√°-lo para verificar se existe um bot√£o de enviar. Para isso usaremos a query getByTestId . Para usar esse seletor devemos adicionar uma propriedade ao nosso bot√£o de enviar, o data-testid , que √© um identificador para a biblioteca de testes.
// App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <label htmlFor="id-email">
        Email
        <input id="id-email" type="email" />
      </label>
      <input id="btn-send" type="button" data-testid="id-send" value="Enviar" />
      <input id="btn-back" type="button" value="Voltar" />
    </div>
  );
}

export default App;
O teste ficar√° assim:
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('Verificando se existe o campo Email.', () => {
  render(<App />);
  const inputEmail = screen.getByLabelText('Email');
  expect(inputEmail).toBeInTheDocument();
  expect(inputEmail).toHaveProperty('type', 'email');
});

test('Verificando se existem dois bot√µes', () => {
  render(<App />);
  const buttons = screen.getAllByRole('button');
  expect(buttons).toHaveLength(2);
});

test('Verificando se existe um bot√£o de enviar', () => {
  render(<App />);
  const btnSend = screen.getByTestId('id-send');
  expect(btnSend).toBeInTheDocument();
  expect(btnSend).toHaveProperty('type', 'button');
  expect(btnSend).toHaveValue('Enviar');
});
Buscamos o elemento pelo data-testid e verificamos se ele est√° na tela. Em seguida, verificamos se este elemento √© um bot√£o e com a propriedade toHaveValue conferimos se possui o texto Enviar.
Testando eventos
Por enquanto, estamos apenas testando se as coisas est√£o sendo renderizadas, mas precisamos testar o comportamento da pessoa usu√°ria, como um clique em um bot√£o. Para isso, usaremos a userEvent . A user-event √© uma biblioteca complementar √† React Testing Library (RTL) que possibilita a simula√ß√£o de v√°rias intera√ß√µes com o navegador. Essa biblioteca √© baseada no m√©todo fireEvent da React Testing Library, mas seus m√©todos s√£o mais aproximados da intera√ß√£o da pessoa usu√°ria. Enquanto um fireEvent.change(input, { target: { value: 'hello world' } }) dispara um evento de altera√ß√£o do campo de input, um userEvent.type(input, 'hello world') testar√° intera√ß√µes keyDown, keyPress e keyUp para cada caractere digitado. Portanto √© uma boa pr√°tica, e altamente recomendado utilizar userEvent ao inv√©s de fireEvent , sempre que poss√≠vel . Voc√™ pode consultar a documenta√ß√£o com os eventos do userEvent e a lista completa de eventos suportados pelo fireEvent . Quando utilizamos o create-react-app para criar um projeto, a biblioteca user-event j√° vem instalada por padr√£o. Mas caso voc√™ precisa instalar ela manualmente, basta rodar o comando:
npm install --save-dev @testing-library/user-event
A maioria dos m√©todos do userEvent s√£o s√≠ncronos, exceto quando utilizar o userEvent.type, pois ele aguarda a informa√ß√£o que ser√° testada. O type possui tr√™s par√¢metros, sendo o terceiro par√¢metro opcional, type(element, text, [options]) , esse terceiro par√¢metro pode ser utilizado para passar um delay , em milissegundos, que ser√° o tempo esperado entre dois caracteres digitados para realizar a a√ß√£o do teste. Voc√™ pode utilizar essa op√ß√£o caso queira testar o comportamento de uma pessoa usu√°ria com maior ou menor agilidade de digita√ß√£o, o valor default para o delay √© 0 . O userEvent.type √© um evento que retorna uma Promise, por√©m, como valor default √© 0, voc√™ s√≥ precisar√° aguardar o retorno dessa Promise caso passe algum valor para a option delay , do contr√°rio o userEvent.type funcionar√° de modo s√≠ncrono.
Modificaremos nosso App.js para que, quem usa, possa inserir o seu email no campo, salv√°-lo e mostr√°-lo na tela:
// App.js
import React, { Component } from 'react';
import './App.css';

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      email: '',
      saveEmail: '',
    };
  }

  changeEmail(value) {
    this.setState({ email: value });
  }

  changeSaveEmail(value) {
    this.setState({ saveEmail: value, email: '' });
  }

  render() {
    const { email, saveEmail } = this.state;
    return (
      <div className="App">
        <label htmlFor="id-email">
          Email
          <input
            id="id-email"
            value={ email }
            type="email"
            onChange={ (e) => this.changeEmail(e.target.value) }
          />
        </label>
        <input
          id="btn-enviar"
          type="button"
          data-testid="id-send"
          value="Enviar"
          onClick={ () => this.changeSaveEmail(email) }
        />
        <input id="btn-id" type="button" value="Voltar" />
        <h2 data-testid="id-email-user">{`Valor: ${saveEmail}`}</h2>
      </div>
    );
  }
}

export default App;
Observe as mudan√ßas que foram feitas.
Rode a aplica√ß√£o e a teste √† m√£o, adicionando seu email no campo e clicando no bot√£o de enviar. Veja se seu email foi salvo.
Agora iremos automatizar cada passo que voc√™ fez no c√≥digo usando o userEvent , para n√£o precisar testar √† m√£o cada passo desses toda vez que alterar o c√≥digo. Bastar√°, ao inv√©s disso, apenas rodar o npm test . Para utilizar o userEvent √© necess√°rio importar a biblioteca para o arquivo onde o teste ser√° realizado:
import userEvent from '@testing-library/user-event';
Observe cada linha do teste:
// App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import App from './App';


// Adicione esse teste.
test('Verificando se o bot√£o e o campo email est√£o funcionando.', () => {
  render(<App />);

  const EMAIL_USER = 'email@email.com';

  const textEmail = screen.getByTestId('id-email-user');
  expect(textEmail).toBeInTheDocument();
  expect(textEmail).toHaveTextContent('Valor:');

  const btnSend = screen.getByTestId('id-send');
  const inputEmail = screen.getByLabelText('Email');
  userEvent.type(inputEmail, EMAIL_USER);
  userEvent.click(btnSend);

  expect(inputEmail).toHaveValue('');
  expect(textEmail).toHaveTextContent(`Valor: ${ EMAIL_USER }`);
});
Passo a passo:
a) Primeiro renderizamos a aplica√ß√£o, depois salvamos o email da pessoa usu√°ria em uma vari√°vel (o que √© uma boa pr√°tica).
b) Depois, verificamos se a tag <h2> onde o email aparece na tela est√° apenas com o texto Valor: ,
c) Depois procuramos pelo o campo de email e o bot√£o que enviar√° os dados.
d) Simulamos a digita√ß√£o da pessoa usu√°ria no campo de email com o userEvent.type(inputEmail, EMAIL_USER) , passando o campo do input como primeiro par√¢metro e o valor esperado como segundo par√¢metro ( 'email@email.com' ).
e) Simulamos um clique no bot√£o com o userEvent.click(btnSend) , passando o elemento do bot√£o como par√¢metro.
f) Verificamos se ap√≥s o click , o campo de input do email retorna para vazio e se a tag <h2> , que anteriormente s√≥ exibia Valor: , agora recebe o email passado ao input, resultando em Valor: email@email.com.
Cheatsheet na documenta√ß√£o oficial:
https://testing-library.com/docs/dom-testing-library/cheatsheet
Testando apenas um componente
Agora imagine que est√° escrevendo teste para a aplica√ß√£o, mas precisa apenas testar um componente que voc√™ criou ou vai criar. N√£o precisamos renderizar toda a nossa aplica√ß√£o para realizar um teste: podemos renderizar apenas aquele componente espec√≠fico e criar os testes para ele.
Usaremos a mesma aplica√ß√£o anterior e criaremos um componente que mostra se o email √© v√°lido ou n√£o. Crie o componente ValidEmail.js
// ValidEmail.js
import React from 'react';
import PropTypes from 'prop-types';

const verifyEmail = (email) => {
  const emailRegex = /[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+/;
  return emailRegex.test(email);
};

const ValidEmail = (props) => {
  const { email } = props;
  return (
    <div>
      <h2 data-testid="id-email-user">{`Valor: ${email}`}</h2>
      <h3>{(verifyEmail(email) ? 'Email V√°lido' : 'Email Inv√°lido')}</h3>
    </div>
  );
};

ValidEmail.propTypes = {
  email: PropTypes.string.isRequired,
};

export default ValidEmail;
Substitua a linha do h2 no App.js e n√£o esque√ßa de importar o ValidEmail:
<h2 data-testid="id-email-user">{ `Valor: ${ saveEmail }` }</h2>
// Substitua a linha de cima pela a debaixo.
<ValidEmail email={ saveEmail } />
Rode os testes e observe que mesmo sem mudar nenhum teste, todos eles passaram, assegurando que nossa aplica√ß√£o continua funcionando mesmo ap√≥s essa mudan√ßa (super conveniente, certo?). Agora falta testar essa funcionalidade nova que adicionamos. Mas testaremos apenas renderizando o nosso componente ValidEmail . Crie um arquivo ValidEmail.test.js.
import React from 'react';
import { render, screen } from '@testing-library/react';
import ValidEmail from './ValidEmail';

test('Testando um componente, caso o email seja v√°lido.', () => {
  const EMAIL_USER = 'email@email.com';
  render(<ValidEmail email={ EMAIL_USER } />);
  const isValid = screen.getByText('Email V√°lido');
  expect(isValid).toBeInTheDocument();
});
Observe que a estrutura √© bem parecida com a dos outros testes. O que foi modificado √© o que est√° sendo renderizado. No lugar de render(<App />) , colocamos render(<ValidEmail email={ EMAIL_USER } />) . O componente que queremos renderizar precisa de uma props para funcionar, portanto precisamos passar um valor para ela, que no caso √© email={ EMAIL_USER } . O teste verifica se, com a prop passada, o nosso teste passar√°.
J√° estamos testando o cen√°rio onde o email √© v√°lido, agora precisamos testar o cen√°rio contr√°rio, ou seja, quando o email √© inv√°lido. Para isso, basta criar um novo teste, definindo a constante EMAIL_USER com o valor de um email inv√°lido e alterando o texto buscado para Email inv√°lido . Adicione o teste abaixo e rode os testes:
test('Testando um componente, caso o email seja inv√°lido.', () => {
  const EMAIL_USER = 'emailerrado';
  render(<ValidEmail email={ EMAIL_USER } />);
  const isValid = screen.getByText('Email Inv√°lido');
  expect(isValid).toBeInTheDocument();
});
Agora, para voc√™ come√ßar a fixar o assunto, adicione novas funcionalidades a esse componente e fa√ßa o teste:
N√£o exibir a mensagem caso o email ainda n√£o tenha sido enviado.
Mude a cor do texto caso o email seja v√°lido ou inv√°lido.
Dicas: Voc√™ pode usar o .not para negar o expect ( .not.toBeInTheDocument() ) no seu teste e tamb√©m usar a propriedade styles no seu componente para trocar a cor.
16/02 - 14.2 - React Testing Library: Mocks e Inputs
Os Mocks
O objetivo de mockar uma fun√ß√£o, m√≥dulo ou requisi√ß√£o √© permitir a quem desenvolve ter controle sobre todo o funcionamento de seus testes. Pense em uma requisi√ß√£o de API que constantemente muda seu retorno. Como ter certeza do seu retorno e, principalmente, de que seu teste n√£o est√° caindo em um falso-positivo ?
No exemplo abaixo, podemos ver um caso em que simular o comportamento da fun√ß√£o seria necess√°rio para o teste:
const retornaNumeroAleatorio = () => Math.floor(Math.random() * 100);

const divisivelPorDois = () => (retornaNumeroAleatorio() % 2) === 0;

test('quando o n√∫mero aleat√≥rio √© par, a fun√ß√£o retorna `true`', () => {
  expect(divisivelPorDois()).toBe(true); // Como garantimos que o n√∫mero retornado ser√° par?
});
Mockar o comportamento da fun√ß√£o retornaNumeroAleatorio() para garantir que ela est√°, nesse teste, retornando um n√∫mero par, seria a solu√ß√£o para esse impasse!
Dentre as principais formas de se mockar algo somente utilizando Jest, destacam-se tr√™s:
jest.fn();
jest.mock();
jest.spyOn();
Veja o v√≠deo abaixo para entender melhor sobre simula√ß√£o de comportamentos
Mockando fun√ß√µes com Jest
O m√©todo jest.fn() configura-se como a forma mais simples de se mockar algo: ele transforma uma fun√ß√£o em uma simula√ß√£o. Ou seja: ao mockar uma fun√ß√£o com o jest.fn() e fazer a chamada da mesma, o comportamento definido no mock ser√° chamado, em vez da fun√ß√£o original.
Ele √© muito √∫til para casos como o do exemplo da se√ß√£o anterior, em que precisamos ter controle dos n√∫meros gerados aleatoriamente.
Fazendo o teste para saber se a fun√ß√£o √© chamada, temos:

test("#divisivelPorDois", () => {
  // testando se a fun√ß√£o foi chamada
  divisivelPorDois();
  expect(divisivelPorDois).toHaveBeenCalled();
});
Esse teste deveria passar, n√£o? Afinal, a fun√ß√£o foi chamada logo acima dele. Mas ele n√£o passa e o erro nos indica o que fazer:
Matcher error : received value must be a mock or spy function
Esse erro acontece porque a propriedade toHaveBeenCalled , assim como outras que ser√£o ensinadas a seguir, s√£o exclusivas para fun√ß√µes simuladas. Ou seja: se voc√™ n√£o simula uma fun√ß√£o, a propriedade n√£o funciona corretamente .
Portanto, vamos utilizar o jest.fn() para testar a chamada dessa fun√ß√£o:
test("#divisivelPorDois", () => {
  // testando se a fun√ß√£o foi chamada. N√£o simulamos nenhum comportamento aqui, pois, para esse teste, isso n√£o importa! Apenas queremos saber se ela foi chamada.
  divisivelPorDois = jest.fn();

  divisivelPorDois();
  expect(divisivelPorDois).toHaveBeenCalled();
});
Ao declarar divisivelPorDois = jest.fn(); , estamos dizendo ao teste que, a partir daquele momento, estamos tomando controle da fun√ß√£o divisivelPorDois e que ela ser√° uma simula√ß√£o da fun√ß√£o original.
Por ser uma simula√ß√£o, podemos especificar qual vai ser o retorno da fun√ß√£o . Basicamente, o que podemos dizer √©: "No contexto deste teste, quando essa fun√ß√£o for chamada, ela retornar√° o valor que eu defini, ao inv√©s de um valor aleat√≥rio!" . Duas propriedades nos permitem fazer essa declara√ß√£o: mockReturnValue(value) e mockReturnValueOnce(value) . O mockReturnValue define um valor padr√£o de retorno. J√° o mockReturnValueOnce retorna o valor definido apenas uma vez, e √© importante, pois pode ser encadeado para que chamadas sucessivas retornem valores diferentes.
test("#divisivelPorDois", () => {
  // testando se a fun√ß√£o foi chamada e qual seu retorno
  divisivelPorDois = jest.fn().mockReturnValue(true);

  divisivelPorDois();
  expect(divisivelPorDois).toHaveBeenCalled();
  expect(divisivelPorDois()).toBe(true);
});
No exemplo acima, estamos manualmente chamando a fun√ß√£o divisivelPorDois(); . Caso isso n√£o seja feito, o teste expect(divisivelPorDois).toHaveBeenCalled() ir√° falhar. Isso acontece porque mockar uma fun√ß√£o redefine seu comportamento, mas n√£o a executa. A propriedade toHaveBeenCalled() espera que a fun√ß√£o dentro do expect tenha sido executada por alguma chamada anterior a essa linha dentro do contexto desse teste.
Al√©m disso, podemos tamb√©m testar quantas vezes a fun√ß√£o foi chamada. Para isso, utilizamos a propriedade toHaveBeenCalledTimes(number) :
test("#divisivelPorDois", () => {
  // testando quantas vezes a fun√ß√£o foi chamada e qual seu retorno
  divisivelPorDois = jest
    .fn()
    .mockReturnValue('default value')
    .mockReturnValueOnce('first call')
    .mockReturnValueOnce('second call');

  expect(divisivelPorDois).toHaveBeenCalledTimes(0);

  expect(divisivelPorDois()).toBe("first call");
  expect(divisivelPorDois).toHaveBeenCalledTimes(1);

  expect(divisivelPorDois()).toBe("second call");
  expect(divisivelPorDois).toHaveBeenCalledTimes(2);

  expect(divisivelPorDois()).toBe("default value");
  expect(divisivelPorDois).toHaveBeenCalledTimes(3);
});
√â poss√≠vel implementar v√°rios comportamentos em uma simula√ß√£o. No exemplo acima, note que a implementa√ß√£o mockReturnValueOnce se sobrep√µe em rela√ß√£o ao mockReturnValue , que se torna um padr√£o apenas ap√≥s os retornos de mockReturnValueOnce serem executados.
Mockando M√≥dulos
Diferente do jest.fn() , que simula apenas uma fun√ß√£o por vez, temos o jest.mock() , que tem como principal diferencial mockar todo um pacote de depend√™ncias ou m√≥dulo de uma vez.
Por exemplo: em um arquivo chamado math.js , temos as seguintes fun√ß√µes:
const sleep = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};

const somar = async (a, b) => { await sleep(10000); return a + b }; // Fun√ß√£o de somar mais lenta do mundo
const subtrair = (a, b) => a - b;
const multiplicar = (a, b) => a * b;
const dividir = (a, b) => a / b;

module.exports = { somar, subtrair, multiplicar, dividir };
Utilizando o jest.fn() , ter√≠amos que mockar todas as fun√ß√µes uma a uma. Com o jest.mock() , podemos mockar todas com um s√≥ comando:
jest.mock('./math');
Uma vez que mockarmos todo o arquivo math.js , passemos a simular o comportamento de todas as suas fun√ß√µes, por√©m sua implementa√ß√£o individual permanece indefinida. Caso passemos os par√¢metros 1 e 2 para a fun√ß√£o somar , por exemplo, o retorno ser√° "undefined". Isso se d√° porque a simula√ß√£o deixou de acessar o comportamento da fun√ß√£o original do math.js .
Apesar de podermos definir um retorno com mockReturnValue , h√° casos em que √© √∫til ir al√©m dessa capacidade de retornar valores e criar um novo comportamento para a fun√ß√£o simulada. √â o que o m√©todo mockImplementation(func) faz. Ele aceita uma fun√ß√£o que deve ser usada como implementa√ß√£o.
Veja um exemplo:
const math = require('./math');
jest.mock("./math");

test("#somar", () => {
  // Aqui testamos se fun√ß√£o foi chamada, quantas vezes foi chamada, quais par√¢metros foram usados e qual seu retorno

  math.somar.mockImplementation((a, b) => a + b);
  math.somar(1, 2);

  expect(math.somar).toHaveBeenCalled();
  expect(math.somar).toHaveBeenCalledTimes(1);
  expect(math.somar).toHaveBeenCalledWith(1, 2);
  expect(math.somar(1, 2)).toBe(3);
});
No exemplo acima, utilizamos tamb√©m o m√©todo toHaveBeenCalledWith(...args) , que valida quais par√¢metros foram passados para a fun√ß√£o.
Assim como o mockReturnValueOnce , podemos tamb√©m implementar uma funcionalidade para apenas uma chamada com mockImplementationOnce.
Trabalhando com mock e fun√ß√µes originais
Voc√™ j√° aprendeu que ter controle sobre o comportamento de uma fun√ß√£o e usar matchers como o toHaveBeenCalled s√£o ferramentas essenciais para quem desenvolve.
Existem casos nos quais √© √∫til verificar os efeitos colaterais de uma fun√ß√£o , como em uma altera√ß√£o de um elemento na p√°gina, por exemplo. Mas como fazer isso se, ao mockar uma fun√ß√£o, ela perde sua implementa√ß√£o original? E ao mesmo tempo, sem mockar , n√£o podemos test√°-la com o matcher?
O jest.spyOn() √© capaz de resolver esse problema. Ele "espia" a chamada da fun√ß√£o simulada, enquanto deixa a implementa√ß√£o original ativa.
const math = require('./math');

test("#somar", () => {
  // testando se a fun√ß√£o foi chamada, quantas vezes foi chamada, quais par√¢metros foram usados e qual seu retorno
  const mockSomar = jest.spyOn(math, "somar");

  mockSomar(1, 2);
  expect(mockSomar).toHaveBeenCalled();
  expect(mockSomar).toHaveBeenCalledTimes(1);
  expect(mockSomar).toHaveBeenCalledWith(1, 2);
  expect(mockSomar(1, 2)).resolves.toBe(3);
});
Podemos notar no exemplo que a simula√ß√£o da fun√ß√£o √© criada, mas sua implementa√ß√£o √© mantida, e a soma realizada.
H√° tamb√©m como limpar, resetar ou restaurar mocks . Existem tr√™s m√©todos capazes de fazer isso:
mock.mockClear()
√ötil quando voc√™ deseja limpar os dados de uso de uma simula√ß√£o entre dois expect s;
mock.mockReset()
Faz o que o mockClear() faz;
Remove qualquer retorno estipulado ou implementa√ß√£o;
√ötil quando voc√™ deseja resetar uma simula√ß√£o para seu estado inicial;
mock.mockRestore()
Faz tudo que mockReset() faz;
Restaura a implementa√ß√£o original;
√ötil para quando voc√™ quer simular fun√ß√µes em certos casos de teste e restaurar a implementa√ß√£o original em outros;
Como exemplo, imagine que voc√™ queira testar a fun√ß√£o mockada somar implementando para ela um m√©todo de subtra√ß√£o, mas que depois voc√™ queira redefinir as implementa√ß√µes do mock .
const math = require('./math');

test("#somar", () => {
  // testando a implementa√ß√£o original, o mock e o mock resetado

  // implementa√ß√£o original
  expect(math.somar(1, 2)).resolves.toBe(3);

  // criando o mock e substituindo a implementa√ß√£o para uma subtra√ß√£o
  math.somar = jest.fn().mockImplementation((a, b) => a - b);

  math.somar(5, 1);
  expect(math.somar).toHaveBeenCalledTimes(1);
  expect(math.somar(5, 1)).toBe(4);
  expect(math.somar).toHaveBeenCalledTimes(2);
  expect(math.somar).toHaveBeenLastCalledWith(5, 1);

  // resetando o mock
  math.somar.mockReset();
  expect(math.somar(1, 2)).toBe(undefined);
  expect(math.somar).toHaveBeenCalledTimes(1);
  expect(math.somar).toHaveBeenLastCalledWith(1, 2);
});
No exemplo acima, por termos usado o jest.fn(), n√£o h√° como restaurar as implementa√ß√µes originais da fun√ß√£o, pois suas funcionalidades n√£o permitem. A √∫nica ferramenta que nos permite transitar entre simula√ß√£o e comportamento original √© o jest.spyOn() .
const math = require('./math');

test("#somar", () => {
  // testando a implementa√ß√£o original, o mock e a restaura√ß√£o da fun√ß√£o original

  // implementa√ß√£o original
  expect(math.somar(1, 2)).resolves.toBe(3);

  // criando o mock e substituindo a implementa√ß√£o para uma subtra√ß√£o
  const mockSomar = jest
    .spyOn(math, "somar")
    .mockImplementation((a, b) => a - b);

  math.somar(5, 1);
  expect(mockSomar).toHaveBeenCalledTimes(1);
  expect(mockSomar(5, 1)).toBe(4);
  expect(mockSomar).toHaveBeenCalledTimes(2);
  expect(mockSomar).toHaveBeenLastCalledWith(5, 1);

  // restaurando a implementa√ß√£o original
  math.somar.mockRestore();
  expect(math.somar(1, 2)).resolves.toBe(3);
});

Testando uma chamada de API no React
Os testes que dependem de requisi√ß√µes s√£o os mais beneficiados com o uso do mock . Excluem problem√°ticas como falha na API, instabilidade de internet e tamanho de retorno.
Agora que voc√™ j√° conheceu o b√°sico de mockar fun√ß√µes e m√≥dulos no Jest, vamos ver como isso funciona em uma aplica√ß√£o React. Utilizaremos a api de piadas aleat√≥rias para acompanhar os exemplos. Primeiro crie uma aplica√ß√£o com npx create-react-app , substitua o App.js pelo conte√∫do abaixo:
// App.js
import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      joke: '',
    };
  }

  componentDidMount() {
    const API_URL = 'https://icanhazdadjoke.com/';
    fetch(API_URL, { headers: { Accept: 'application/json' } })
      .then((response) => response.json())
      .then((data) => this.setState({ joke: data.joke }));
  }

  render() {
    const { joke } = this.state;

    return (
      <div className="App">
        {joke}
      </div>
    );
  }
}

export default App;
Teste se sua aplica√ß√£o tem o funcionamento correto no navegador retornando uma piada aleat√≥ria a cada vez que a pagina √© atualizada.
Agora temos o problema, como testar a aplica√ß√£o sem que quebre toda vez que nossa api retornar uma nova piada diferente? ü§î
Para resolver esse problema, vamos ver dois exemplos com o Jest que v√£o nos permitir mockar , respectivamente, um m√≥dulo e sua implementa√ß√£o.
Exemplo 1
Substitua o arquivo App.test.js pelo conte√∫do abaixo:
// App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

afterEach(() => jest.clearAllMocks());

it('fetches a joke', async () => {
  const joke = {
    id: '7h3oGtrOfxc',
    joke: 'Whiteboards ... are remarkable.',
    status: 200,
  };

  jest.spyOn(global, 'fetch');
  global.fetch.mockResolvedValue({
    json: jest.fn().mockResolvedValue(joke),
  });

  render(<App />);
  const renderedJoke = await screen.findByText('Whiteboards ... are remarkable.');
  expect(renderedJoke).toBeInTheDocument();
  expect(global.fetch).toBeCalledTimes(1);
  expect(global.fetch).toBeCalledWith(
    'https://icanhazdadjoke.com/',
    { headers: { Accept: 'application/json' } },
  );
});
Vamos em partes entender o que esta acontecendo:
A constante joke cria um objeto similar ao que √© retornado da API ;
O jest.spyon espiona as chamadas a fun√ß√£o fetch do objeto global , √© por meio deste objeto global que conseguimos usar qualquer fun√ß√£o do sistema, por exemplo a fun√ß√£o parseInt ;
Quando a fun√ß√£o fetch for chamada, ao inv√©s de fazer uma requisi√ß√£o a uma API externa ser√° chamando nosso mock . Repare que para cada .then utilizamos .mockResolvedValue e simulamos o retorno que o fetch teria, primeiro retornamos um objeto que contem a fun√ß√£o .json e dentro dela criamos um mock que retorna a nossa piada, satisfazendo o que √© esperado no nosso componente;
√â importante termos o async em it('fetch joke', async () => { , para que se possa utilizar await findByText onde estamos dizendo ao nosso teste: ei espere at√© que consiga encontrar esse texto no dom ou de erro por limite de tempo ;
As fun√ß√µes toBeCalledTimes e toBeCalledWith servem para garantir respectivamente, o n√∫mero de chamadas ao nosso fetch e que ele foi chamado com os argumentos corretos.
A linha afterEach(() => jest.clearAllMocks()); faz com que, ap√≥s cada teste, nosso mock seja limpo, ou seja, no caso acima, garante que ap√≥s o teste o fetch n√£o seja mais um mock , isso √© bem util para que n√£o tenha interfer√™ncia entre um teste e outro.
Exemplo 2
Existem diversas formas de mockagem , voc√™ se lembra que a fun√ß√£o fetch √© uma Promise ? Que vantagem isso traz dentro dos testes? Veja no c√≥digo abaixo:
// App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

afterEach(() => jest.clearAllMocks());

it('fetches a joke', async () => {
  const joke = {
    id: '7h3oGtrOfxc',
    joke: 'Whiteboards ... are remarkable.',
    status: 200,
  };

  global.fetch = jest.fn(() => Promise.resolve({
    json: () => Promise.resolve(joke),
  }));

  render(<App />);
  const renderedJoke = await screen.findByText('Whiteboards ... are remarkable.');
  expect(renderedJoke).toBeInTheDocument();
  expect(global.fetch).toBeCalledTimes(1);
  expect(global.fetch).toBeCalledWith('https://icanhazdadjoke.com/', { headers: { Accept: 'application/json' } });
});
O c√≥digo √© muito similar ao do primeiro exemplo, alterando somente o mock .
Nesse exemplo estamos dizendo que global.fetch agora √© uma fun√ß√£o mockada com jest.fn que retorna uma Promise , e na primeira vez que ela for resolvida, deve se retornar um objeto com uma outra fun√ß√£o json que tamb√©m √© uma Promise , que quando resolvida retorna sua piada.
Outra forma de escrever o mesmo exemplo seria com a sintaxe async/await , onde temos o mock dessa forma:
global.fetch = jest.fn(async () => ({
  json: async () => joke
}));
Mockar requisi√ß√µes √© uma coisa realmente complexa mas, Palma, palma, n√£o priemos c√¢nico , voc√™ pode revisitar o conte√∫do sempre que precisar e com o tempo e pr√°tica, estar√° fazendo mocks como se n√£o fosse nada.
Nestes casos, utilizamos o mock para evitar uma chamada externa √† API, tornando o nosso teste mais r√°pido e confi√°vel, retornando o resultado contido na constante joke . Imagine que a API saia do ar ou que perdemos acesso √† internet enquanto o teste roda. O teste quebraria, apesar do seu c√≥digo estar funcionando. Mockar a chamada √† API evita esse tipo de problema. Outro ponto √© que seus testes v√£o rodar mais r√°pido se voc√™ n√£o fizer uma chamada real √† API todas as vezes que voc√™ for rodar seu teste.
Testando inputs em React
Agora, vamos falar um pouco sobre teste de formul√°rios, que s√£o um pouco diferentes do resto da p√°gina porque normalmente os componentes j√° est√£o em tela no momento do carregamento mas os valores do input n√£o est√£o. Ent√£o precisamos, nos testes, interagir com o input da mesma forma que a pessoa que est√° utilizando a aplica√ß√£o faria para poder test√°-lo corretamente.
Vamos primeiro criar dois campos de texto, um para digitar nome e outro para digitar e-mail.
No arquivo App.js de sua aplica√ß√£o react coloque o c√≥digo abaixo e veja no navegador e no console dele como funciona:
import React from 'react';

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      nome: '',
      email: '',
    };
  }

  handleInput(e) {
    const { name, value } = e.target;
    console.log(name, value);
    this.setState({ [name]: value });
  }

  render() {
    const { nome, email } = this.state;

    return (
      <div>
        <h1>Teste de inputs</h1>
        <p>
          <label htmlFor="nome">
            Nome
            <input
              type="text"
              id="nome"
              name="nome"
              value={ nome }
              onChange={ (e) => this.handleInput(e) }
            />
          </label>
        </p>
        <p>
          <label htmlFor="email">
            Email:
            <input
              type="text"
              id="email"
              name="email"
              value={ email }
              onChange={ (e) => this.handleInput(e) }
            />
          </label>
        </p>
      </div>
    );
  }
}
export default App;
Vamos escrever o teste, ele vai interagir com os inputs, colocar valores neles, assim como quem navegar pela p√°gina faria. Depois, vamos testar se o que for digitado aparece na p√°gina.
// App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import App from './App';

test('alterando o valor dos campos e testando o valor guardado', () => {
  render(<App />);
  const inputNome = screen.getByRole('textbox', { name: /nome/i });
  expect(inputNome).toBeInTheDocument();
  expect(inputNome).toHaveValue('');
  userEvent.type(inputNome, 'Estudante da Trybe');
  expect(inputNome).toHaveValue('Estudante da Trybe');

  const inputEmail = screen.getByRole('textbox', { name: /email/i });
  expect(inputEmail).toBeInTheDocument();
  expect(inputEmail).toHaveValue('');
  userEvent.type(inputEmail, 'estudante@trybe.com');
  expect(inputEmail).toHaveValue('estudante@trybe.com');
});
No c√≥digo, vemos como utilizar o userEvent . Observe que importamos uma biblioteca auxiliar para ter acesso a esta funcionalidade, que simula intera√ß√µes entre a pessoa usu√°ria e a p√°gina. Ela √© recomendada pois sua execu√ß√£o se aproxima mais a de uma intera√ß√£o real de uma pessoa, do que o m√©todo nativo que existe no RTL , o fireEvent .
O userEvent dispara um evento no elemento da p√°gina selecionado. Observe a sintaxe no nosso exemplo: estamos utilizando o evento type , e no primeiro argumento da fun√ß√£o informamos o elemento que queremos interagir ( inputNome ), e no segundo par√¢metro, o que queremos digitar neste campo ( 'Estudante da Trybe' ).
Uma coisa que pode ajudar a entender o que est√° acontecendo √© O console.log na fun√ß√£o handleInput do arquivo App.js exibindo a vari√°vel value . Fazendo isso, o console.log aparece no teste, o que lhe dar√° a certeza de que a RTL est√° realmente renderizando sua p√°gina e inserindo nos campos os valores, da mesma forma que uma pessoa faria.
Para visualizar o comportamento dos testes acima basta ter uma aplica√ß√£o react e substituir o arquivo App.js e App.test.js.

17/02 - 14.3 - React Testing Library: Testando React Router
Vamos passar por alguns pontos antes para termos uma maior compreens√£o do que vamos realizar:
1 - A biblioteca history nos permite acessar a sess√£o de hist√≥rico do navegador e tamb√©m a localiza√ß√£o atual (URL). Nesse link voc√™ pode encontrar a documenta√ß√£o.
Voc√™ pode encontrar na documenta√ß√£o maiores detalhes sobre todos os m√©todos e propriedades da biblioteca, mas para nossos testes, os mais utilizados ser√£o o push , que permite mudar de rota dentro do ambiente de testes , e o location.pathname , que retorna a URL exata em que voc√™ est√°.
De dentro da biblioteca, voc√™ tamb√©m importar√° a createMemoryHistory , que √© feita para ser utilizada em ambientes que n√£o possuem DOM, por exemplo, em testes automatizados. O intuito dessa fun√ß√£o √© criar um novo hist√≥rico de navega√ß√£o, para ser utilizado durante o teste. Essa biblioteca √© bastante utilizada nesses casos, como veremos no pr√≥ximo t√≥pico.
2 - A fun√ß√£o renderWithRouter √© uma fun√ß√£o customizada para fazer testes com rotas, uma vez que a fun√ß√£o render normal da RTL n√£o d√° suporte ao router . Ela pode ser muito √∫til e usa o createMemoryHistory para embutir no seu componente renderizado a l√≥gica de hist√≥rico de navega√ß√£o , para uso nos testes. Veja o c√≥digo de exemplo para se familiarizar.
Testando React Router
Agora, vamos praticar o que aprendemos. Siga os passos abaixo para criar e testar uma aplica√ß√£o usando React Router :
Primeiro, utilize o create-react-app com o nome que desejar.
Depois disso, vamos instalar as depend√™ncias que utilizaremos nesse projeto, a react-router-dom , history e a @testing-library/react , com o comando abaixo.
npm i react-router-dom@v5
Por √∫ltimo vamos copiar esse c√≥digo para dentro do nosso arquivo App.js apagando tudo o que j√° estiver l√°.
import React from 'react';
import { Switch, Route, Link } from 'react-router-dom';

export const About = () => <h1>Voc√™ est√° na p√°gina Sobre</h1>;
export const Home = () => <h1>Voc√™ est√° na p√°gina In√≠cio</h1>;
export const NoMatch = () => <h1>P√°gina n√£o encontrada</h1>;

export default function App() {
  return (
    <div>
      <Link to="/">In√≠cio</Link>
      <br />
      <Link to="/about">Sobre</Link>
      <Switch>
        <Route exact path="/" component={Home} />
        <Route path="/about" component={About} />
        <Route component={NoMatch} />
      </Switch>
    </div>
  );
};
Repare que, para efeito de aprendizado, temos mais de um componente dentro do arquivo App.js , por isso o export default no componente App . Os outros componentes, que est√£o sendo exportados acima do component App , tamb√©m ter√£o os seus respectivos exports . Lembrando que isso n√£o √© uma boa pr√°tica . Estamos fazendo dessa forma para diminuirmos a complexidade da aplica√ß√£o, com o intuito de facilitar o entendimento.
Outro ponto de aten√ß√£o √© que, quando utilizamos o export default e o export , a maneira de importar os componentes sofre uma pequena altera√ß√£o - que veremos na hora de realizar os testes.
Ao terminar de instalar, vamos nos deparar com um problema! A nossa p√°gina dar√° o seguinte erro:
You should not use <Link> outside a <Router>
Esse erro acontece porque o BrowserRouter deve encapsular todos os itens chamados pelo react-router-dom e, no nosso caso, existem dois <Link> no App.js , o que nos leva a esse erro. Vamos resolver isso colocando a tag <BrowserRouter> no arquivo index.js , deixando ele da seguinte forma:
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById('root')
);
Agora sim! Vamos ao navegador entender o que esse c√≥digo est√° fazendo. Basicamente, o nosso c√≥digo cria um router b√°sico com duas p√°ginas, a Home e a About , al√©m de criar uma p√°gina de Not Found para quando a pessoa digitar uma URL que n√£o existe.
Ap√≥s isso, vamos usar a fun√ß√£o renderWithRouter que √© uma fun√ß√£o helper ou assistente. Uma fun√ß√£o helper executa uma tarefa espec√≠fica e n√£o depende de outras fun√ß√µes.
No nosso caso, a helper ir√° criar um hist√≥rico e renderizar o componente que iremos testar. Para n√£o ficarmos sem contexto de onde essa fun√ß√£o veio, ela foi tirada da documenta√ß√£o oficial da Testing Library que voc√™ pode encontrar aqui. Vamos salvar a helper num arquivo src/renderWithRouter.js e entend√™-la antes de escrevermos os testes:
//src/renderWithRouter.js
import React from 'react';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import { render } from '@testing-library/react';

const renderWithRouter = (component) => {
  const history = createMemoryHistory();
  return ({
    ...render(<Router history={history}>{component}</Router>), history,
  });
};
export default renderWithRouter;
Aqui utilizaremos a biblioteca history para criar um hist√≥rico de navega√ß√£o. A helper ir√° passar o hist√≥rico para o componente Router , e vai renderizar o componente que quisermos dentro dele, bastando apenas passar o componente como argumento quando a chamarmos.
Existe uma forma de fazer sem o helper , mas ela implica em escrever bem mais c√≥digo. Esse link tem um exemplo muito parecido com o que estamos fazendo, a grande diferen√ßa √© que l√° eles n√£o utilizam uma fun√ß√£o auxiliar. Repare que a sintaxe que utilizaremos ser√° bem parecida com a do site, com a diferen√ßa de verbosidade que no exemplo do link acima ser√° bem maior.
Com a ajuda desta fun√ß√£o, vamos escrever muito menos c√≥digo na hora de testar, porque precisamos apenas chamar a renderWithRouter . N√£o podemos esquecer que devemos colocar o <BrowserRouter /> encapsulando o componente <App /> inteiro.
Para fazermos isso, devemos coloc√°-lo no index.js . Isto √© necess√°rio porque queremos ter controle sobre o BrowserRouter nos testes. Se ele estiver dentro do componente que vamos testar, n√≥s perderemos o controle sobre ele.
Uma outra caracter√≠stica dessa fun√ß√£o √© que ela retorna tanto o componente que passamos como par√¢metro, j√° encapsulado no router, quanto o hist√≥rico que geramos, o que tamb√©m serve para nos levar a outras p√°ginas com facilidade.
Escrevendo os testes da Aplica√ß√£o
Agora que vimos o App que vamos testar e entendemos a fun√ß√£o que vamos utilizar, iremos escrever os testes dentro do arquivo src/App.test.js:
import React from 'react';
import { screen } from '@testing-library/react';
import renderWithRouter from './renderWithRouter';
import App from './App';

it('deve renderizar o componente App', () => {
  renderWithRouter(<App />);

  const homeTitle = screen.getByRole('heading', {
    name: 'Voc√™ est√° na p√°gina In√≠cio',
  });
  expect(homeTitle).toBeInTheDocument();
});
Aqui, fizemos os imports necess√°rios: o pr√≥prio react , a helper e o componente que iremos testar.
Importamos o teste em si, que chama a helper passando o componente a ser renderizado. Nesse primeiro caso, mostraremos como renderizar a aplica√ß√£o toda, fazendo um teste geral, depois vamos ver como renderizar um componente espec√≠fico.
Continuando os testes, vamos clicar no link About em nossa aplica√ß√£o e verificar se estamos na p√°gina correta.
// import React from 'react';
// import { screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
// import renderWithRouter from './renderWithRouter';
// import App from './App';

// it('deve renderizar o componente App', () => {
//   renderWithRouter(<App />);

//   const homeTitle = screen.getByRole('heading', {
//     name: 'Voc√™ est√° na p√°gina In√≠cio',
//   });
//   expect(homeTitle).toBeInTheDocument();
// });

it('deve renderizar o componente Sobre', () => {
  const { history } = renderWithRouter(<App />);

  const aboutLink = screen.getByRole('link', { name: 'Sobre' });
  expect(aboutLink).toBeInTheDocument();
  userEvent.click(aboutLink);

  const { pathname } = history.location;
  expect(pathname).toBe('/about');

  const aboutTitle = screen.getByRole('heading',
    { name: 'Voc√™ est√° na p√°gina Sobre' });
  expect(aboutTitle).toBeInTheDocument();
});
Com o userEvent (que deve ser importado da @testing-library/user-event ), podemos interagir com os elementos da tela (nesse caso, vamos clicar no link Sobre ). Depois disso, utilizaremos o history.location.pathname para verificar se estamos na p√°gina correta e, por √∫ltimo, checamos se o texto que aparece quando clicamos nesse link no navegador foi encontrado.
Agora que temos mais um caso de uso, √© interessante colocar o describe, ele ajudar√° bastante na hora de separar os testes e numa eventual falha, saberemos qual teste falhou. Vamos coloc√°-lo abaixo:
// import React from 'react';
// import { screen } from '@testing-library/react';
// import userEvent from '@testing-library/user-event';
// import renderWithRouter from './renderWithRouter';
// import App from './App';

describe('teste da aplica√ß√£o toda', () => {
  // it('deve renderizar o componente App', () => {
  //   renderWithRouter(<App />);

  //   const homeTitle = screen.getByRole('heading', {
  //     name: 'Voc√™ est√° na p√°gina In√≠cio',
  //   });
  //   expect(homeTitle).toBeInTheDocument();
  // });

  // it('deve renderizar o componente Sobre', () => {
  //   const { history } = renderWithRouter(<App />);

  //   const aboutLink = screen.getByRole('link', { name: 'Sobre' });
  //   expect(aboutLink).toBeInTheDocument();
  //   userEvent.click(aboutLink);

  //   const { pathname } = history.location;
  //   expect(pathname).toBe('/about');

  //   const aboutTitle = screen.getByRole('heading',
  //     { name: 'Voc√™ est√° na p√°gina Sobre' });
  //   expect(aboutTitle).toBeInTheDocument();
  // });
});
Encerrando esse teste de aplica√ß√£o total, vamos testar a p√°gina que deveria aparecer ao digitar na barra de endere√ßos uma p√°gina que n√£o existe:
// import React from 'react';
// import { screen } from '@testing-library/react';
// import userEvent from '@testing-library/user-event';
// import renderWithRouter from './renderWithRouter';
// import App from './App';

// describe('teste da aplica√ß√£o toda', () => {
//   it('deve renderizar o componente App', () => {
//     renderWithRouter(<App />);

//     const homeTitle = screen.getByRole('heading', {
//       name: 'Voc√™ est√° na p√°gina In√≠cio',
//     });
//     expect(homeTitle).toBeInTheDocument();
//   });

//   it('deve renderizar o componente Sobre', () => {
//     const { history } = renderWithRouter(<App />);

//     const aboutLink = screen.getByRole('link', { name: 'Sobre' });
//     expect(aboutLink).toBeInTheDocument();
//     userEvent.click(aboutLink);

//     const { pathname } = history.location;
//     expect(pathname).toBe('/about');

//     const aboutTitle = screen.getByRole('heading',
//       { name: 'Voc√™ est√° na p√°gina Sobre' });
//     expect(aboutTitle).toBeInTheDocument();
//   });

  it('deve testar um caminho n√£o existente e a renderiza√ß√£o do Not Found', () => {
    const { history } = renderWithRouter(<App />);

    history.push('/pagina/que-nao-existe/');

    const notFoundTitle = screen.getByRole('heading',
      { name: 'P√°gina n√£o encontrada' });
    expect(notFoundTitle).toBeInTheDocument();
  });
// });

A diferen√ßa nesse caso √© que utilizamos a fun√ß√£o history.push() e passamos como argumento algum link que n√£o existe dentro de nossa aplica√ß√£o. Depois disso, testamos se o texto que aparece no navegador, ao digitar um caminho para uma p√°gina que n√£o existe, √© encontrado.
Testando componentes isoladamente
At√© aqui n√≥s aprendemos como testar nossa aplica√ß√£o renderizando ela por completo. Mas √© poss√≠vel testar os componentes separadamente tamb√©m. Vamos ver como:
it('deve renderizar o componente About (apenas componente)', () => {
  renderWithRouter(<About />);

  const aboutTitle = screen.getByRole('heading',
    { name: 'Voc√™ est√° na p√°gina Sobre' });
  expect(aboutTitle).toBeInTheDocument();
});
Voc√™ ver√° que, ao copiar esse test, o Jest retornar√° um erro, dizendo que o componente About n√£o foi definido. Isso √© porque ele n√£o foi importado nesse arquivo! Altere a linha de import do App.js para:
  import App, { About } from './App';
Talvez voc√™ esteja se perguntando porque o App n√£o foi importado com {} e o About foi. Isso aconteceu porque s√≥ pode haver um export default por arquivo (que faz o componente ser import√°vel sem as chaves {} ) e o App tomou esse espa√ßo, ent√£o os outros componentes exportados ficam em "segundo plano". Por isso, para serem importados corretamente, necessitam do {} .
Para ver a diferen√ßa entre a renderiza√ß√£o da aplica√ß√£o inteira e de apenas um componente, cause um erro nos testes, alterando o que √© esperado no getByRole dos testes. Voc√™ ver√° que, ao importar apenas o componente, toda a estrutura ao redor dele n√£o √© renderizada. No nosso caso de exemplo, os links do topo n√£o s√£o renderizados.

- fazer exerc√≠cios de tests
*/