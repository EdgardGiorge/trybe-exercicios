import { Component } from 'react';
import './App.css';
import Home from './components/Home';
import About from './components/About'
import HowTo from './components/HowTo';
import Profile from './components/Profile';
import { BrowserRouter, Route, Switch } from 'react-router-dom'


class App extends Component {
  render() {
  return (
    <BrowserRouter>
      <Switch>
        <Route path='/about' component={About} /> {/* Se a minha url estiver direcionada para a path /about, eu renderizo o componente About */ }
        <Route path='/howto/:ship' render={(props)=> <HowTo {...props} name="Conte√∫do do How to"/>} /> {/* Passar uma prop pelo componente em  que estamos querendo renderezar chamamos o render e ao inv√©s de passarmos um componente, passamos uma call back, que ir√° retornar o componente renderizado. 2 "Pulos do gato": Poder√≠amos passar a prop pela call back (<HowTo name="Conte√∫do do How to"/>), outra op√ß√£o √© que o router passa um array de props e podemos usar isso captutando com spread operator, com isso teremos acessp a 3 props, history(traz o hist√≥rico do navegador), location e match(serve pra passar par√¢metro pela url atrav√©s do param), temos que colocar uma sintax no path tamb√©m, a :ship que significa que podemos colocar qualquer palavra na url e resgat√°-la no componente com a chave chip: <Route path='/howto/:ship' render={(props)=> <HowTo {...props}, do lado do componente (la no HowTo reagatamos (ver dentro do HowTo/>), com isso da pra resgatar api's*/}
        <Route path='/profile'><Profile /></Route> {/* Podemos passar o componente que queremos utilizar como filho do Route,  fazendo o uso de elemento children */ }
        <Route exact path='/' component={Home} /> {/* exact pra renderizar exatamente a url escrita */}
      </Switch>  
    </BrowserRouter>
  )}
}

export default App;

/*
//        Single Page Application

Antes de come√ßar a falar sobre React Router , √© preciso entender um tipo de aplica√ß√£o chamado Single Page Application ( SPA ), haja vista que aplica√ß√µes em React Router s√£o SPA s. S√£o p√°ginas web que n√£o precisam dar reload, o conceito de SPA que existem em v√°rias bibliotecas e frameworks de dev de front-end , n√£o s√≥ em react, serve pra voc√™ ter em uma √∫nica p√°gina web j√° na primeira vez que voc√™ acessa, toda navega√ß√£o, intera√ß√£o e carregamento de novas informa√ß√µes dela dinamicamente atrav√©s de l√≥gica de JS, baseado no que a pessoa faz. Foco 100% na experi√™ncia de quem usa, agilidade e efici√™ncia, com uma p√°gina flu√≠da, sem delay de um ponto ao outro.

//  props.children

Children √© uma √≥tima ferramenta para reutiliza√ß√£o de componentes. A utiliza√ß√£o √© bem simples, veja abaixo:
class App extends Component {
  render() {
    return (
      <div className='main'>
        <ComponentePai>
          <p>SUPIMPA</p>
        </ComponentePai>
      </div>
    )
  }
}
E dessa forma podemos acessar e exibir na tela o valor SUPIMPA no ComponentePai :
const ComponentePai = (props) => {
  return (
    <div>
      {props.children}
    </div>
  )
}
Nesse exemplo utilizamos uma tag p , mas note que poderia ser um ou v√°rios elementos de qualquer natureza, seja uma tag, ou at√© um componente. Ainda sim, ela √© acessada da mesma forma dentro de ComponentePai . √â importante perceber que, no caso acima, props.children √© um objeto por ser apenas um elemento. Caso o ComponentePai esteja com mais de um elemento dentro como no exemplo abaixo, props.children se torna um array de objetos , com as informa√ß√µes de cada filho.
class App extends Component {
  render() {
    return (
      <div className='main'>
        <ComponentePai>
          <p>SUPIMPA</p>
          <h1>BACANA</h1>
          <span>INCR√çVEL</span>
        </ComponentePai>
      </div>
    )
  }
}

//      Instala√ß√£o React Router Dom

Para poder fazer uso de React Router , √© preciso que se instale em uma aplica√ß√£o React o pacote react-router-dom:
npm install react-router-dom@v5
Recentemente foi lan√ßada uma atualiza√ß√£o para o pacote react-router-dom que trouxe breaking changes , ou seja, mudan√ßas que n√£o s√£o compat√≠veis com as vers√µes anteriores. Por isso √© importante que voc√™ instale o react-router-dom na vesr√£o especificada acima, para que os exemplos da aula funcionem corretamente.

//      Componentes BrowserRouter e Route

Em suma:
1) BrowserRouter √© o componente que encapsula a sua aplica√ß√£o, de forma a te possibilitar fazer uso de navega√ß√£o.
2) Route √© o componente fundamental em React Router , que estabelece o mapeamento entre o caminho de URL declarado com o componente. Tal mapeamento, no que diz respeito √† correspond√™ncia entre o caminho da URL atual e a presente no componente, pode ser feito das seguintes formas, ilustradas pelos seguintes exemplos:
a) <Route path="/about" component={About} /> : l√™-se que se o caminho da URL atual do navegador come√ßa com o caminho /about , como declarado na prop path no componente Route , h√° uma correspond√™ncia entre os caminhos da URL e do componente Route , e o componente About ser√° renderizado. Ou seja, se o caminho da URL atual for /home , n√£o h√° correspond√™ncia, logo o componente About n√£o ser√° renderizado. Entretanto, se a URL atual for /about ou /about/me , h√° correspond√™ncia, e o componente About √© renderizado. O par√¢metro exact entra em a√ß√£o quando voc√™ tem v√°rios caminhos com nomes semelhantes.
b) <Route exact path="/about" component={About} /> : l√™-se que, se houver uma correspond√™ncia exata entre o caminho da URL atual e o caminho /about declarado em Route , o componente ser√° renderizado. Ou seja, se o caminho da URL atual for /home ou /about/me , n√£o h√° correspond√™ncia exata, logo o componente About n√£o ser√° renderizado. Entretanto, se a URL atual for /about , h√° correspond√™ncia exata, e o componente About ser√° renderizado.
OBS : Al√©m dessas duas formas de renderiza√ß√£o de componente com Route , voc√™ pode fazer uso de elemento children. Ou seja, se voc√™ tiver a rota <Route path="/about" component={About} /> , voc√™ tamb√©m poder√° fazer da seguinte forma:
    <Route path="/about" >
      <About />
    </Route>
3) Se houver v√°rios componentes apresentando correspond√™ncia entre seu caminho de URL e o caminho atual da aplica√ß√£o, todos os componentes apresentando correspond√™ncia ser√£o renderizados . Ou seja, suponha que houvesse a seguinte lista de componentes do tipo Route:
<Route path="/about" component={About} />
<Route path="/contact" component={Contact} />
<Route path="/" component={Home} />
Se o caminho atual da URL da aplica√ß√£o for / , todos esses componentes ser√£o renderizados, haja vista que todas as rotas n√£o fazem correspond√™ncia exata entre o caminho da URL atual e o definido via prop path , e fazer path="/" faz correspond√™ncia com qualquer caminho de URL ;
Agora, se o caminho atual da URL da aplica√ß√£o for /contact , os componentes Contact e Home ser√£o renderizados. Isso pode ser um problema, e uma forma de atac√°-lo √© organizar essas rotas via componente Switch , que voc√™ ver√° com mais detalhes em instantes. üòâ
*/

/*
Componente Switch
O componente Switch √© usado para encapsular um conjunto de rotas que voc√™ definiu via Route , conforme podemos observar na imagem abaixo:


Dada a URL atual da aplica√ß√£o, o Switch procura de cima para baixo pelo primeiro Route que possuir correspond√™ncia entre seu caminho definido na prop path do componente e a URL atual da aplica√ß√£o. Ou seja, se tivermos um Switch com as rotas abaixo:
<Switch>
  <Route path="/about" component={About} />
  <Route path="/contact" component={Contact} />
  <Route path="/movies" component={Movies} />
  <Route path="/" component={Home} />
  <Route path="*" component={NotFound} /> // exemplo de notFound 404
</Switch>
Ao mudarmos a URL da aplica√ß√£o para que seu caminho seja /contact , somente o componente Contact ser√° renderizado.
Todos os filhos de um Switch devem ser Route ou Redirect . Apenas o primeiro filho que corresponder ao local atual ser√° renderizado. Se n√£o houvesse o Switch mais de um componente poderia ser renderizado na mesma rota de forma errada.
Em uma compara√ß√£o direta, √© como o switch case do javascript :
√â apenas uma compara√ß√£o, n√£o utilize o exemplo abaixo.
  switch (rota) {
    case '/about':
      return <About />;
    case '/contact':
      return <Contact />;
    case '/movies':
      return <Movies />;
    default:
      return <Home />
  }

  Componente Redirect
Conforme o pr√≥prio nome diz, Redirect √© um componente que permite ativamente levar quem usa a aplica√ß√£o para diferentes locais dela. Um caso de uso bastante comum de Redirect √© autentica√ß√£o: a pessoa s√≥ pode acessar informa√ß√µes sens√≠veis (tipo conta banc√°ria) de uma aplica√ß√£o se ela j√° estiver autenticada; caso contr√°rio, ela √© redirecionada para uma p√°gina de login. Veja um exemplo de utiliza√ß√£o abaixo:
  <Switch>
    <Route path="/dashboard" component={Dashboard} />
    <Route exact path="/">
      {logado ? <Redirect to="/dashboard" /> : <Login />}
    </Route>
  </Switch>
Caso a aplica√ß√£o tenha o caminho / ser√° feita uma verifica√ß√£o na vari√°vel logado , no caso de true a p√°gina ser√° redirecionada para o caminho /dashboard e ent√£o renderizar√° o componente Dashboard , caso contr√°rio, renderizar√° o componente Login .
D√™ sempre prioridade para a utiliza√ß√£o de Redirect para redirecionar, uma vez que, ele √© criado para isso.
Para que voc√™ tenha um pouco mais de contexto, observe a imagem abaixo que compara o Link e o Redirect:

Entendendo o fluxo dos componentes do React Router




Main Group 7: 
List Products = Primeira Tela
Products = Product Container
Shop Cart = Cart

primeira tela: cart = bycart , product = newProduct
cart = prod = produto 

AddProduct = AddProductToCart em ProducDetail

AddProductToCart em ListProduct

08/02 - 13.1 ‚Äì Metodologias √°geis

Os m√©todos √°geis buscam promover um processo de gerenciamento de projetos que incentiva a inspe√ß√£o e adapta√ß√£o frequente. √â uma filosofia que acaba por incentivar o maior trabalho em equipe, a auto-organiza√ß√£o, a comunica√ß√£o frequente, o foco no cliente e a entrega de valor.
Basicamente, os m√©todos √°geis s√£o um conjunto de pr√°ticas eficazes que se destinam a permitir a entrega r√°pida e de alta qualidade do produto, tendo uma abordagem de neg√≥cios que alinha o desenvolvimento do projeto com as necessidades do cliente e os objetivos da empresa.
Pilares do manifesto √Ågil:
1- Indiv√≠duos e intera√ß√µes mais que processos e ferramentas
2- Software em funcionamento mais que documenta√ß√£o abrangente
3- Colabora√ß√£o com o cliente mais que negocia√ß√£o de contratos
4- Responder a mudan√ßas mais que seguir um plano
√â importante frisar que os itens da direita possuem valor no manifesto, mas os da esquerda devem estar em posi√ß√£o de destaque.
Os frameworks s√£o ferramentas que t√™m como base os princ√≠pios √°geis e podem ser implantados em times ou empresas que desejam incorporar o Agile em suas pr√°ticas. Entretanto, nem sempre √© poss√≠vel seguir as regras dos frameworks ao p√© da letra. Por isso, h√° quem advogue que os princ√≠pios √°geis devem ser adaptados √† realidade de cada √°rea ou organiza√ß√£o. Afinal, o mais importante √© que os princ√≠pios fundamentais se mantenham e cumpram com o objetivo de facilitar e agilizar os processos e as entregas da equipe, sem gerar complexidade desnecess√°ria.
Scrum
Scrum √© um framework para gest√£o e planejamento de projetos. As equipes que trabalham neste m√©todo, geralmente, s√£o divididas em Product Owner (PO) , Scrum Master e Scrum Team (ou Time de Desenvolvimento ). Voc√™, como pessoa desenvolvedora, dever√°, geralmente, integrar a equipe desta √∫ltima parte da divis√£o.
As Metodologias √°geis de desenvolvimento de software s√£o iterativas, ou seja, o trabalho √© dividido em itera√ß√µes (ciclos). No Scrum, os projetos s√£o divididos em ciclos chamados de Sprints .
O Sprint representa um espa√ßo de tempo, normalmente de 2 a 4 semanas, no qual um conjunto de atividades deve ser executado. As funcionalidades a serem implementadas em um projeto s√£o mantidas em uma lista que √© conhecida como Product Backlog . Este material cont√©m todas as funcionalidades que foram elencadas como importantes para quem usa o produto, e √© responsabilidade do PO definir seu conte√∫do. Estas informa√ß√µes n√£o precisam necessariamente estar dispon√≠veis no in√≠cio de um projeto, podendo ser acrescidas, alteradas e melhoradas √† medida que se aprende mais sobre o produto e quem o usa.
O pr√≥ximo passo √© conectar o que foi priorizado pela pessoa PO com o Scrum Team . Para isso, no in√≠cio de cada Sprint , faz-se um Sprint Planning Meeting , ou seja, uma reuni√£o de planejamento na qual a pessoa PO prioriza os itens do Product Backlog e a equipe seleciona as atividades que ela ser√° capaz de implementar durante o Sprint que se inicia, originando o Sprint Backlog . Para entender melhor o Scrum e a Sprint Planning , vamos a um v√≠deo:
O status das tarefas do Sprint Backlog ser√° atualizado pela pessoa que for Scrum Master . Este papel entra para fazer a gest√£o dos valores e das pr√°ticas do Scrum , assegurando sua funcionalidade e garantindo que o que foi selecionado pode e deve ser entregue ao final do ciclo. √â comum observar que, em algumas empresas, o papel de Scrum Master √© desempenhado pela mesma pessoa que √© lideran√ßa t√©cnica do time de desenvolvimento (Tech Lead). Nestes casos, n√£o existe uma pessoa que faz exclusivamente o papel de Scrum Master. Nas empresas que possuem uma pessoa com fun√ß√£o exclusiva de Scrum Master, os pap√©is de Scrum Master e Tech Lead s√£o separados. Isso quer dizer que, apesar da pessoa Scrum Master assumir uma responsabilidade importante de gest√£o das pr√°ticas √°geis do time, a lideran√ßa do time de desenvolvimento continua sendo o(a) Tech Lead.
Al√©m das tarefas citadas, a pessoa Scrum Master atuar√° como facilitadora da Daily Meeting (ou Daily Scrum ou DM ), uma reuni√£o di√°ria como o objetivo de disseminar a evolu√ß√£o do projeto, e identificar impedimentos que podem ser resolvidos com ajuda dos membros da equipe. A Daily deve ser breve, e cada integrante deve basicamente responder √† tr√™s perguntas:
a) O que voc√™ fez ontem?
b) O que far√° hoje?
c) H√° algum impedimento no seu caminho?
Finalmente, faz-se uma Sprint Retro Meeting (ou Sprint Retrospective ), onde s√£o apontados os pontos positivos e negativos do √∫ltimo Sprint , assim como a√ß√µes para mitigar os pontos negativos e evitar que se repitam. Ap√≥s essa reuni√£o, a equipe parte para o planejamento do pr√≥ximo Sprint .
Assim, reinicia-se o ciclo, levando em considera√ß√£o os aprendizados da √∫ltima itera√ß√£o. A figura abaixo ilustra o ciclo que voc√™ estudou:




Kanban
O m√©todo Kanban foi criado pela japonesa Toyota na d√©cada de 1960 e faz parte da metodologia Just in Time , um sistema de administra√ß√£o da produ√ß√£o que determina que deve ser feito somente o imprescind√≠vel para realiza√ß√£o da etapa seguinte do processo, em um fluxo de trabalho cont√≠nuo. Em outras palavras: fazer apenas o que √© necess√°rio, quando necess√°rio e na quantidade necess√°ria.
Em meio √† falta de recursos e diante da necessidade de se modernizar para acompanhar as mudan√ßas do mercado, a empresa precisava mudar sua metodologia de gest√£o e procurar por uma Gest√£o por Resultados , ou seja um modelo que priorizasse os resultados de todos os colaboradores que nele atuam, permitindo que os gestores e seus times avan√ßassem cautelosamente, por√©m de forma cont√≠nua e produtiva.
Era preciso agir r√°pido e urgentemente para criar um novo sistema de manufatura. Assim, inspirados pelo livro Today and Tomorrow , de Henry Ford, a diretoria da Toyota desenvolveu o Kanban .
Diante das dificuldades da √©poca, o fato do Kanban ser bastante visual facilitou muito o trabalho das equipes de produ√ß√£o e montagem. O sistema melhorou a comunica√ß√£o entre as pessoas que trabalhavam na empresa, bem como o entendimento de quais pe√ßas precisavam ser repostas no momento correto. A padroniza√ß√£o tamb√©m foi auxiliada pelo sistema, assim como a redu√ß√£o de desperd√≠cios.
A metodologia Kanban prop√µe a utiliza√ß√£o de cart√µes ou post-its em um quadro para indicar e acompanhar, de maneira visual, pr√°tica e utilizando poucos recursos, o andamento dos fluxos de produ√ß√£o nas empresas. De um lado do quadro, ficam as tarefas que precisam ser executadas, o que pode ser chamado de Backlog , que assim como no Scrum , s√£o as funcionalidades e objetivos do projeto como um todo, podendo ou n√£o estarem completamente prontos nos processos iniciais de desenvolvimento. E, do outro, as etapas de execu√ß√£o: em andamento e entregue. Voc√™ pode alterar o nome dessas etapas de acordo com seus processos internos. Conforme as tarefas s√£o desempenhadas, o cart√£o ou post-it √© colocado no campo correspondente ao status da tarefa.
Assista ao v√≠deo abaixo para complementar o conhecimento relacionado ao Kanban:
Os benef√≠cios do sistema Kanban
O Kanban nada mais √© que uma maneira simples e visual de organizar as tarefas e o fluxo de trabalho, tornando tudo muito mais eficiente. Os benef√≠cios do sistema Kanban s√£o:
a) Vis√£o do todo;
b) Simplicidade;
c) Acesso a informa√ß√µes;
d) Facilita√ß√£o do fluxo de trabalho;
e) Incentivo √† comunica√ß√£o;
f) Prioridade e metas claras.
Vis√£o do todo
Seja f√≠sico ou digital, o Kanban √© visual. Isso √© especialmente √∫til em situa√ß√µes em que v√°rias pessoas ou grupos coordenam e cooperam em um mesmo projeto, ou processo, permitindo que essas pessoas planejem suas tarefas atuais e as seguintes. O Kanban oferece uma vis√£o do todo, ou seja, uma perspectiva hol√≠stica de um processo. Ao inv√©s de fazer com que as pessoas trabalhem isoladamente, o sistema Kanban permite que todas as pessoas na organiza√ß√£o tenham uma melhor compreens√£o e aprecia√ß√£o do que outras pessoas e equipes est√£o fazendo. A lideran√ßa de √°rea, por sua vez, consegue ter uma vis√£o concreta de quem est√° fazendo o qu√™ e quantas etapas faltam para um projeto ser finalizado.
Simplicidade
A ideia e o conceito por tr√°s do Kanban s√£o simples. √â isso que o torna atraente para quase todas as √°reas de uma organiza√ß√£o. A simplicidade permite que todas as pessoas participem com mais facilidade e comprem a ideia.
Acesso √† informa√ß√£o
O Kanban tem processos inclusivos, que permitem que as pessoas tenham acesso a mais informa√ß√µes. Ele d√° √†s pessoas mais conhecimento corporativo, o que √© particularmente √∫til para aquelas que t√™m pouco entendimento de um sistema complexo, como, por exemplo, as pessoas rec√©m-contratadas. No fim da cadeia, ele d√° poder √†s pessoas e incentiva a autonomia.
Facilita√ß√£o do fluxo de trabalho
O Kanban contribui para que haja menos desperd√≠cio nas opera√ß√µes, tornando tudo mais pr√°tico e conciso. Partes redundantes ou desnecess√°rias de um processo podem ser removidas, enquanto outras podem ser simplificadas. Ou seja, o fluxo de trabalho pode ser facilitado, sem comprometer a qualidade. Isso significa uma constante melhora na produtividade.
Incentivo √† comunica√ß√£o
Como o uso do Kanban fornece uma vis√£o do todo, isso incentiva uma melhor coopera√ß√£o e comunica√ß√£o entre pessoas e equipes. As pessoas que trabalham na empresa poder√£o ajustar melhor seus cronogramas e prazos, porque sabem exatamente o que as outras pessoas est√£o fazendo. Por extens√£o, isso tamb√©m serve como meio de controle e equil√≠brio, no qual as inefici√™ncias e gargalos ao longo do processo podem ser eliminados.
Prioridades e metas claras
O Kanban aprimora a capacidade de foco, pois, al√©m do uso do WIP limit , o time tem uma vis√£o ampla dos processos e do fluxo de trabalho, e a ger√™ncia fica mais capacitada para decidir o que de deve ser priorizado para atingir os objetivos e metas estabelecidas.
*/